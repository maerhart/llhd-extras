proc %fifo_v3.param1.always_comb.626.1 (i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i, i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [32 x i16]$ %mem_q) -> (i32$ %data_o, i1$ %gate_clock, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, [32 x i16]$ %mem_n) {
body:
    %read_pointer_q.prb = prb i4$ %read_pointer_q
    %0 = const time 0s 1e
    drv i4$ %read_pointer_n, %read_pointer_q.prb, %0
    %write_pointer_q.prb = prb i4$ %write_pointer_q
    drv i4$ %write_pointer_n, %write_pointer_q.prb, %0
    %status_cnt_q.prb = prb i5$ %status_cnt_q
    drv i5$ %status_cnt_n, %status_cnt_q.prb, %0
    %data_i.prb = prb i32$ %data_i
    %1 = const i32 0
    %mem_q.prb = prb [32 x i16]$ %mem_q
    %2 = const i16 0
    %3 = [32 x i16 %2]
    %4 = shr [32 x i16] %mem_q.prb, [32 x i16] %3, i4 %read_pointer_q.prb
    %5 = extf i16, [32 x i16] %4, 0
    %zext = inss i32 %1, i16 %5, 0, 16
    %6 = [i32 %zext, %data_i.prb]
    %7 = extf i32, [2 x i32] %6, 0
    drv i32$ %data_o, %7, %0
    drv [32 x i16]$ %mem_n, %mem_q.prb, %0
    %8 = const i1 1
    drv i1$ %gate_clock, %8, %0
    %push_i.prb = prb i1$ %push_i
    %9 = const i1 0
    %10 = neq i1 %push_i.prb, %9
    %full_o.prb = prb i1$ %full_o
    %11 = not i1 %full_o.prb
    %12 = neq i1 %11, %9
    %13 = and i1 %10, %12
    %14 = neq i1 %13, %9
    %15 = const i32 4294967295
    %16 = const i4 0
    %17 = const i32 1
    %zext1 = inss i32 %1, i5 %status_cnt_q.prb, 0, 5
    br %14, %if_exit, %if_true
if_true:
    %18 = sig [32 x i16] %3
    %19 = shr [32 x i16]$ %mem_n, [32 x i16]$ %18, i4 %write_pointer_q.prb
    %20 = extf i16$, [32 x i16]$ %19, 0
    %21 = exts i16, i32 %data_i.prb, 0, 16
    drv i16$ %20, %21, %0
    drv i1$ %gate_clock, %9, %0
    %zext2 = inss i32 %1, i4 %write_pointer_q.prb, 0, 4
    %22 = eq i32 %zext2, %15
    %23 = neq i1 %22, %9
    br %23, %if_false, %if_true1
if_exit:
    %pop_i.prb = prb i1$ %pop_i
    %24 = neq i1 %pop_i.prb, %9
    %empty_o.prb = prb i1$ %empty_o
    %25 = not i1 %empty_o.prb
    %26 = neq i1 %25, %9
    %27 = and i1 %24, %26
    %28 = neq i1 %27, %9
    br %28, %if_exit1, %if_true2
if_true1:
    drv i4$ %write_pointer_n, %16, %0
    br %if_exit2
if_false:
    %29 = add i32 %zext2, %17
    %30 = exts i4, i32 %29, 0, 4
    drv i4$ %write_pointer_n, %30, %0
    br %if_exit2
if_exit2:
    %31 = add i32 %zext1, %17
    %32 = exts i5, i32 %31, 0, 5
    drv i5$ %status_cnt_n, %32, %0
    br %if_exit
if_true2:
    %read_pointer_n.prb = prb i4$ %read_pointer_n
    %zext3 = inss i32 %1, i4 %read_pointer_n.prb, 0, 4
    %33 = eq i32 %zext3, %15
    %34 = neq i1 %33, %9
    br %34, %if_false1, %if_true3
if_exit1:
    %35 = and i1 %10, %24
    %36 = neq i1 %35, %9
    %37 = and i1 %36, %12
    %38 = neq i1 %37, %9
    %39 = and i1 %38, %26
    %40 = neq i1 %39, %9
    br %40, %if_exit3, %if_true4
if_true3:
    drv i4$ %read_pointer_n, %16, %0
    br %if_exit4
if_false1:
    %zext4 = inss i32 %1, i4 %read_pointer_q.prb, 0, 4
    %41 = add i32 %zext4, %17
    %42 = exts i4, i32 %41, 0, 4
    drv i4$ %read_pointer_n, %42, %0
    br %if_exit4
if_exit4:
    %43 = sub i32 %zext1, %17
    %44 = exts i5, i32 %43, 0, 5
    drv i5$ %status_cnt_n, %44, %0
    br %if_exit1
if_true4:
    drv i5$ %status_cnt_n, %status_cnt_q.prb, %0
    br %if_exit3
if_exit3:
    wait %body, %full_o, %empty_o, %data_i, %push_i, %pop_i, %read_pointer_q, %write_pointer_q, %status_cnt_q, %mem_q
}

proc %fifo_v3.param1.always_ff.745.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q) {
init:
    %clk_i.prb = prb i1$ %clk_i
    %rst_ni.prb = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %rst_ni.prb1 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni.prb, %0
    %4 = eq i1 %rst_ni.prb1, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni.prb1
    %6 = neq i1 %5, %0
    %7 = const i4 0
    %8 = const time 0s 1d
    %9 = const i5 0
    br %6, %if_false, %if_true
if_true:
    drv i4$ %read_pointer_q, %7, %8
    drv i4$ %write_pointer_q, %7, %8
    drv i5$ %status_cnt_q, %9, %8
    br %init
if_false:
    %flush_i.prb = prb i1$ %flush_i
    %10 = neq i1 %flush_i.prb, %0
    br %10, %if_false1, %if_true1
if_true1:
    drv i4$ %read_pointer_q, %7, %8
    drv i4$ %write_pointer_q, %7, %8
    drv i5$ %status_cnt_q, %9, %8
    br %init
if_false1:
    %read_pointer_n.prb = prb i4$ %read_pointer_n
    drv i4$ %read_pointer_q, %read_pointer_n.prb, %8
    %write_pointer_n.prb = prb i4$ %write_pointer_n
    drv i4$ %write_pointer_q, %write_pointer_n.prb, %8
    %status_cnt_n.prb = prb i5$ %status_cnt_n
    drv i5$ %status_cnt_q, %status_cnt_n.prb, %8
    br %init
}

proc %fifo_v3.param1.always_ff.789.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [32 x i16]$ %mem_n) -> ([32 x i16]$ %mem_q) {
init:
    %clk_i.prb = prb i1$ %clk_i
    %rst_ni.prb = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %rst_ni.prb1 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni.prb, %0
    %4 = eq i1 %rst_ni.prb1, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni.prb1
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i16 0
    %9 = [i16 %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8]
    drv [32 x i16]$ %mem_q, %9, %7
    br %init
if_false:
    %gate_clock.prb = prb i1$ %gate_clock
    %10 = neq i1 %gate_clock.prb, %0
    %11 = not i1 %10
    %12 = neq i1 %11, %0
    br %12, %init, %if_true1
if_true1:
    %mem_n.prb = prb [32 x i16]$ %mem_n
    drv [32 x i16]$ %mem_q, %mem_n.prb, %7
    br %init
}

proc %fifo_v3.param1.initial.805.1 () -> () {
0:
    halt
}

entity @fifo_v3.param1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %testmode_i, i32$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %full_o, i1$ %empty_o, i4$ %usage_o, i32$ %data_o) {
    %0 = const i1 0
    %gate_clock = sig i1 %0
    %1 = const i4 0
    %read_pointer_n = sig i4 %1
    %read_pointer_q = sig i4 %1
    %write_pointer_n = sig i4 %1
    %write_pointer_q = sig i4 %1
    %2 = const i5 0
    %status_cnt_n = sig i5 %2
    %status_cnt_q = sig i5 %2
    %3 = const i16 0
    %4 = [i16 %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3]
    %mem_n = sig [32 x i16] %4
    %mem_q = sig [32 x i16] %4
    %status_cnt_q.prb = prb i5$ %status_cnt_q
    %5 = exts i4, i5 %status_cnt_q.prb, 0, 4
    %6 = const time 0s 1e
    drv i4$ %usage_o, %5, %6
    %7 = const i5 16
    %8 = eq i5 %status_cnt_q.prb, %7
    drv i1$ %full_o, %8, %6
    %9 = const i32 0
    %zext = inss i32 %9, i5 %status_cnt_q.prb, 0, 5
    %10 = eq i32 %zext, %9
    drv i1$ %empty_o, %10, %6
    inst %fifo_v3.param1.always_comb.626.1 (i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i, i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [32 x i16]$ %mem_q) -> (i32$ %data_o, i1$ %gate_clock, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, [32 x i16]$ %mem_n)
    inst %fifo_v3.param1.always_ff.745.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q)
    inst %fifo_v3.param1.always_ff.789.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [32 x i16]$ %mem_n) -> ([32 x i16]$ %mem_q)
    inst %fifo_v3.param1.initial.805.1 () -> ()
}

proc %fifo_v3_tb.initial.987.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i1 0
    %2 = const time 1ns
    drv i1$ %rst_ni, %1, %2
    %3 = const i1 1
    %4 = const time 2ns
    drv i1$ %rst_ni, %3, %4
    %5 = const time 4ns
    wait %6 for %5
6:
    %7 = const i32 1000000
    br %loop_body
loop_body:
    %8 = phi i32 [%8, %9], [%7, %6]
    %10 = const i32 0
    %11 = neq i32 %8, %10
    br %11, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %12 = const i1 1
    %13 = const time 1ns
    drv i1$ %clk_i, %12, %13
    %14 = const i1 0
    %15 = const time 2ns
    drv i1$ %clk_i, %14, %15
    wait %9 for %15
9:
    br %loop_body
}

proc %fifo_v3_tb.always_comb.1003.0 (i1$ %full_o) -> (i1$ %push_i) {
body:
    %full_o.prb = prb i1$ %full_o
    %0 = const i1 0
    %1 = neq i1 %full_o.prb, %0
    %2 = not i1 %1
    %3 = const time 250ps
    drv i1$ %push_i, %2, %3
    wait %body, %full_o
}

proc %fifo_v3_tb.always.1028.0 (i1$ %clk_i, i1$ %full_o) -> (i32$ %data_i) {
init:
    %clk_i.prb = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %full_o.prb = prb i1$ %full_o
    %3 = neq i1 %full_o.prb, %0
    %4 = not i1 %3
    %iff = and i1 %posedge, %4
    br %iff, %init, %event
event:
    %data_i.prb = prb i32$ %data_i
    %5 = const i32 1
    %6 = add i32 %data_i.prb, %5
    %7 = const time 250ps
    drv i32$ %data_i, %6, %7
    br %init
}

proc %fifo_v3_tb.always_comb.1044.0 (i1$ %empty_o) -> (i1$ %pop_i) {
body:
    %empty_o.prb = prb i1$ %empty_o
    %0 = const i1 0
    %1 = neq i1 %empty_o.prb, %0
    %2 = not i1 %1
    %3 = const time 250ps
    drv i1$ %pop_i, %2, %3
    wait %body, %empty_o
}

entity @fifo_v3_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %full_o = sig i1 %0
    %empty_o = sig i1 %0
    %2 = const i32 0
    %data_i = sig i32 %2
    %push_i = sig i1 %0
    %data_o = sig i32 %2
    %pop_i = sig i1 %0
    %clk_i.prb = prb i1$ %clk_i
    %3 = sig i1 %0
    %4 = const time 0s 1e
    drv i1$ %3, %clk_i.prb, %4
    %rst_ni.prb = prb i1$ %rst_ni
    %5 = sig i1 %0
    drv i1$ %5, %rst_ni.prb, %4
    %6 = sig i1 %0
    drv i1$ %6, %0, %4
    %7 = sig i1 %0
    drv i1$ %7, %0, %4
    %data_i.prb = prb i32$ %data_i
    %8 = sig i32 %2
    drv i32$ %8, %data_i.prb, %4
    %push_i.prb = prb i1$ %push_i
    %9 = sig i1 %0
    drv i1$ %9, %push_i.prb, %4
    %pop_i.prb = prb i1$ %pop_i
    %10 = sig i1 %0
    drv i1$ %10, %pop_i.prb, %4
    %11 = const i4 0
    %dut.usage_o.default = sig i4 %11
    inst @fifo_v3.param1 (i1$ %3, i1$ %5, i1$ %6, i1$ %7, i32$ %8, i1$ %9, i1$ %10) -> (i1$ %full_o, i1$ %empty_o, i4$ %dut.usage_o.default, i32$ %data_o)
    inst %fifo_v3_tb.initial.987.0 () -> (i1$ %clk_i, i1$ %rst_ni)
    inst %fifo_v3_tb.always_comb.1003.0 (i1$ %full_o) -> (i1$ %push_i)
    inst %fifo_v3_tb.always.1028.0 (i1$ %clk_i, i1$ %full_o) -> (i32$ %data_i)
    inst %fifo_v3_tb.always_comb.1044.0 (i1$ %empty_o) -> (i1$ %pop_i)
}
