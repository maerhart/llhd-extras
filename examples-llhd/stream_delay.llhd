proc %delta_counter.param3.always_comb.1233.3 (i5$ %counter_q, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i) -> (i5$ %counter_d) {
body:
    %counter_q1 = prb i5$ %counter_q
    %0 = const time 0s 1e
    drv i5$ %counter_d, %counter_q1, %0
    %clear_i1 = prb i1$ %clear_i
    %1 = const i1 0
    %2 = neq i1 %clear_i1, %1
    %3 = const i5 0
    br %2, %if_false, %if_true
check:
    wait %body, %counter_q, %clear_i, %en_i, %load_i, %down_i, %delta_i, %d_i
if_true:
    drv i5$ %counter_d, %3, %0
    br %check
if_false:
    %load_i1 = prb i1$ %load_i
    %4 = neq i1 %load_i1, %1
    br %4, %if_false1, %if_true1
if_true1:
    %d_i1 = prb i4$ %d_i
    %5 = inss i5 %3, i4 %d_i1, 0, 4
    %6 = inss i5 %5, i1 %1, 4, 1
    drv i5$ %counter_d, %6, %0
    br %check
if_false1:
    %en_i1 = prb i1$ %en_i
    %7 = neq i1 %en_i1, %1
    br %7, %check, %if_true2
if_true2:
    %down_i1 = prb i1$ %down_i
    %8 = neq i1 %down_i1, %1
    %delta_i1 = prb i4$ %delta_i
    br %8, %if_false2, %if_true3
if_true3:
    %9 = inss i5 %3, i4 %delta_i1, 0, 4
    %10 = sub i5 %counter_q1, %9
    drv i5$ %counter_d, %10, %0
    br %check
if_false2:
    %11 = inss i5 %3, i4 %delta_i1, 0, 4
    %12 = add i5 %counter_q1, %11
    drv i5$ %counter_d, %12, %0
    br %check
}

proc %delta_counter.param3.always_ff.1272.3 (i5$ %counter_d, i1$ %clk_i, i1$ %rst_ni) -> (i5$ %counter_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i5 0
    drv i5$ %counter_q, %9, %8
    br %init
if_false:
    %counter_d1 = prb i5$ %counter_d
    drv i5$ %counter_q, %counter_d1, %8
    br %init
}

entity @delta_counter.param3 (i1$ %clk_i, i1$ %rst_ni, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i) -> (i4$ %q_o, i1$ %overflow_o) {
    %0 = const i5 0
    %counter_q = sig i5 %0
    %counter_d = sig i5 %0
    %counter_q1 = prb i5$ %counter_q
    %1 = exts i4, i5 %counter_q1, 0, 4
    %2 = const time 0s 1e
    drv i4$ %q_o, %1, %2
    %3 = exts i1, i5 %counter_q1, 4, 1
    %4 = inss i5 %0, i1 %3, 0, 1
    %5 = exts i1, i5 %4, 0, 1
    drv i1$ %overflow_o, %5, %2
    inst %delta_counter.param3.always_comb.1233.3 (i5$ %counter_q, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i) -> (i5$ %counter_d)
    inst %delta_counter.param3.always_ff.1272.3 (i5$ %counter_d, i1$ %clk_i, i1$ %rst_ni) -> (i5$ %counter_q)
}

entity @counter.param2 (i1$ %clk_i, i1$ %rst_ni, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %d_i) -> (i4$ %q_o, i1$ %overflow_o) {
    %clk_i1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = sig i1 %0
    %2 = const time 0s 1e
    drv i1$ %1, %clk_i1, %2
    %rst_ni1 = prb i1$ %rst_ni
    %3 = sig i1 %0
    drv i1$ %3, %rst_ni1, %2
    %clear_i1 = prb i1$ %clear_i
    %4 = sig i1 %0
    drv i1$ %4, %clear_i1, %2
    %en_i1 = prb i1$ %en_i
    %5 = sig i1 %0
    drv i1$ %5, %en_i1, %2
    %load_i1 = prb i1$ %load_i
    %6 = sig i1 %0
    drv i1$ %6, %load_i1, %2
    %down_i1 = prb i1$ %down_i
    %7 = sig i1 %0
    drv i1$ %7, %down_i1, %2
    %8 = const i4 1
    %9 = const i4 0
    %10 = sig i4 %9
    drv i4$ %10, %8, %2
    %d_i1 = prb i4$ %d_i
    %11 = sig i4 %9
    drv i4$ %11, %d_i1, %2
    inst @delta_counter.param3 (i1$ %1, i1$ %3, i1$ %4, i1$ %5, i1$ %6, i1$ %7, i4$ %10, i4$ %11) -> (i4$ %q_o, i1$ %overflow_o)
}

proc %lfsr_16bit.param4.always_comb.1432.4 (i16$ %shift_q, i1$ %en_i) -> (i16$ %shift_d, i16$ %out_o) {
body:
    %shift_q1 = prb i16$ %shift_q
    %0 = exts i1, i16 %shift_q1, 15, 1
    %1 = const i16 0
    %2 = inss i16 %1, i1 %0, 0, 1
    %3 = exts i1, i16 %2, 0, 1
    %4 = exts i4, i16 %shift_q1, 12, 4
    %5 = inss i16 %1, i4 %4, 0, 4
    %6 = exts i1, i16 %5, 0, 1
    %7 = xor i1 %3, %6
    %8 = exts i11, i16 %shift_q1, 5, 11
    %9 = inss i16 %1, i11 %8, 0, 11
    %10 = exts i1, i16 %9, 0, 1
    %11 = xor i1 %7, %10
    %12 = exts i15, i16 %shift_q1, 1, 15
    %13 = inss i16 %1, i15 %12, 0, 15
    %14 = exts i1, i16 %13, 0, 1
    %15 = xor i1 %11, %14
    %16 = const i1 0
    %17 = neq i1 %15, %16
    %18 = not i1 %17
    %19 = const time 0s 1e
    drv i16$ %shift_d, %shift_q1, %19
    %en_i1 = prb i1$ %en_i
    %20 = neq i1 %en_i1, %16
    br %20, %if_exit, %if_true
if_true:
    %21 = inss i16 %1, i1 %18, 0, 1
    %22 = exts i15, i16 %shift_q1, 0, 15
    %23 = inss i16 %21, i15 %22, 1, 15
    drv i16$ %shift_d, %23, %19
    br %if_exit
if_exit:
    drv i16$ %out_o, %shift_q1, %19
    wait %body, %shift_q, %en_i
}

proc %lfsr_16bit.param4.always_ff.1473.4 (i16$ %shift_d, i1$ %clk_i, i1$ %rst_ni) -> (i16$ %shift_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni2
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i16 0
    drv i16$ %shift_q, %8, %7
    br %init
if_false:
    %shift_d1 = prb i16$ %shift_d
    drv i16$ %shift_q, %shift_d1, %7
    br %init
}

proc %lfsr_16bit.param4.initial.1491.4 () -> () {
0:
    halt
}

entity @lfsr_16bit.param4 (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) -> (i16$ %out_o) {
    %0 = const i16 0
    %shift_d = sig i16 %0
    %shift_q = sig i16 %0
    inst %lfsr_16bit.param4.always_comb.1432.4 (i16$ %shift_q, i1$ %en_i) -> (i16$ %shift_d, i16$ %out_o)
    inst %lfsr_16bit.param4.always_ff.1473.4 (i16$ %shift_d, i1$ %clk_i, i1$ %rst_ni) -> (i16$ %shift_q)
    inst %lfsr_16bit.param4.initial.1491.4 () -> ()
}

proc %stream_delay.param1.always_comb.399.1 (i2$ %state_q, i4$ %count_out, i4$ %counter_load, i1$ %valid_i, i1$ %ready_i) -> (i2$ %state_d, i1$ %load, i1$ %en, i1$ %ready_o, i1$ %valid_o) {
body:
    %state_q1 = prb i2$ %state_q
    %0 = const time 0s 1e
    drv i2$ %state_d, %state_q1, %0
    %1 = const i1 0
    drv i1$ %valid_o, %1, %0
    drv i1$ %ready_o, %1, %0
    drv i1$ %load, %1, %0
    drv i1$ %en, %1, %0
    %2 = const i2 0
    %3 = eq i2 %state_q1, %2
    %4 = const i2 1
    %5 = const i1 1
    %6 = const i32 0
    %7 = const i2 2
    %ready_i1 = prb i1$ %ready_i
    br %3, %8, %case_body
check:
    wait %body, %state_q, %count_out, %counter_load, %valid_i, %ready_i
case_body:
    %valid_i1 = prb i1$ %valid_i
    %9 = neq i1 %valid_i1, %1
    br %9, %check, %if_true
8:
    %10 = eq i2 %state_q1, %4
    br %10, %11, %case_body1
if_true:
    drv i1$ %load, %5, %0
    drv i2$ %state_d, %4, %0
    %counter_load1 = prb i4$ %counter_load
    %12 = inss i32 %6, i4 %counter_load1, 0, 4
    %13 = const i32 1
    %14 = eq i32 %12, %13
    %15 = neq i1 %14, %1
    %16 = neq i1 %15, %1
    %17 = neq i1 %16, %1
    br %17, %if_exit, %if_true1
if_true1:
    drv i2$ %state_d, %7, %0
    br %if_exit
if_exit:
    %18 = eq i32 %12, %6
    %19 = neq i1 %18, %1
    %20 = neq i1 %19, %1
    br %20, %check, %if_true2
if_true2:
    drv i1$ %valid_o, %5, %0
    drv i1$ %ready_o, %ready_i1, %0
    %21 = neq i1 %ready_i1, %1
    br %21, %if_false, %if_true3
if_true3:
    drv i2$ %state_d, %2, %0
    br %check
if_false:
    drv i2$ %state_d, %7, %0
    br %check
case_body1:
    drv i1$ %en, %5, %0
    %count_out1 = prb i4$ %count_out
    %22 = inss i32 %6, i4 %count_out1, 0, 4
    %23 = eq i32 %22, %6
    %24 = neq i1 %23, %1
    br %24, %check, %if_true4
11:
    %25 = eq i2 %state_q1, %7
    br %25, %check, %case_body2
if_true4:
    drv i2$ %state_d, %7, %0
    br %check
case_body2:
    drv i1$ %valid_o, %5, %0
    drv i1$ %ready_o, %ready_i1, %0
    %26 = neq i1 %ready_i1, %1
    br %26, %check, %if_true5
if_true5:
    drv i2$ %state_d, %2, %0
    br %check
}

proc %stream_delay.param1.always_ff.539.1 (i2$ %state_d, i1$ %clk_i, i1$ %rst_ni) -> (i2$ %state_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni2
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i2 0
    drv i2$ %state_q, %8, %7
    br %init
if_false:
    %state_d1 = prb i2$ %state_d
    drv i2$ %state_q, %state_d1, %7
    br %init
}

entity @stream_delay.param1 (i1$ %clk_i, i1$ %rst_ni, i32$ %payload_i, i1$ %valid_i, i1$ %ready_i) -> (i1$ %ready_o, i32$ %payload_o, i1$ %valid_o) {
    %0 = const i2 0
    %state_d = sig i2 %0
    %state_q = sig i2 %0
    %1 = const i1 0
    %load = sig i1 %1
    %2 = const i4 0
    %count_out = sig i4 %2
    %en = sig i1 %1
    %counter_load = sig i4 %2
    %payload_i1 = prb i32$ %payload_i
    %3 = const time 0s 1e
    drv i32$ %payload_o, %payload_i1, %3
    %clk_i1 = prb i1$ %clk_i
    %4 = sig i1 %1
    drv i1$ %4, %clk_i1, %3
    %rst_ni1 = prb i1$ %rst_ni
    %5 = sig i1 %1
    drv i1$ %5, %rst_ni1, %3
    %6 = sig i1 %1
    drv i1$ %6, %1, %3
    %en1 = prb i1$ %en
    %7 = sig i1 %1
    drv i1$ %7, %en1, %3
    %load1 = prb i1$ %load
    %8 = sig i1 %1
    drv i1$ %8, %load1, %3
    %9 = const i1 1
    %10 = sig i1 %1
    drv i1$ %10, %9, %3
    %counter_load1 = prb i4$ %counter_load
    %11 = sig i4 %2
    drv i4$ %11, %counter_load1, %3
    %i_counter.overflow_o.default = sig i1 %1
    inst @counter.param2 (i1$ %4, i1$ %5, i1$ %6, i1$ %7, i1$ %8, i1$ %10, i4$ %11) -> (i4$ %count_out, i1$ %i_counter.overflow_o.default)
    %12 = const i16 0
    %lfsr_out = sig i16 %12
    %lfsr_out1 = prb i16$ %lfsr_out
    %13 = exts i4, i16 %lfsr_out1, 0, 4
    drv i4$ %counter_load, %13, %3
    %14 = sig i1 %1
    drv i1$ %14, %clk_i1, %3
    %15 = sig i1 %1
    drv i1$ %15, %rst_ni1, %3
    %16 = sig i1 %1
    drv i1$ %16, %load1, %3
    inst @lfsr_16bit.param4 (i1$ %14, i1$ %15, i1$ %16) -> (i16$ %lfsr_out)
    inst %stream_delay.param1.always_comb.399.1 (i2$ %state_q, i4$ %count_out, i4$ %counter_load, i1$ %valid_i, i1$ %ready_i) -> (i2$ %state_d, i1$ %load, i1$ %en, i1$ %ready_o, i1$ %valid_o)
    inst %stream_delay.param1.always_ff.539.1 (i2$ %state_d, i1$ %clk_i, i1$ %rst_ni) -> (i2$ %state_q)
}

proc %stream_delay_tb.initial.694.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i1 0
    %2 = const time 1ns
    drv i1$ %rst_ni, %1, %2
    %3 = const i1 1
    %4 = const time 2ns
    drv i1$ %rst_ni, %3, %4
    %5 = const time 4ns
    wait %6 for %5
6:
    %7 = const i32 600000
    br %loop_body
loop_body:
    %8 = phi i32 [%7, %6], [%9, %10]
    %11 = const i32 0
    %12 = neq i32 %8, %11
    br %12, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %13 = const i1 1
    %14 = const time 1ns
    drv i1$ %clk_i, %13, %14
    %15 = const i1 0
    %16 = const time 2ns
    drv i1$ %clk_i, %15, %16
    wait %10 for %16
10:
    %17 = const i32 1
    %9 = sub i32 %8, %17
    br %loop_body
}

proc %stream_delay_tb.always.724.0 (i1$ %clk_i, i1$ %ready_o) -> (i32$ %payload_i) {
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %ready_o1 = prb i1$ %ready_o
    %iff = and i1 %posedge, %ready_o1
    br %iff, %init, %event
event:
    %payload_i1 = prb i32$ %payload_i
    %3 = const i32 1
    %4 = add i32 %payload_i1, %3
    %5 = const time 500ps
    drv i32$ %payload_i, %4, %5
    br %init
}

entity @stream_delay_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %2 = const i32 0
    %payload_i = sig i32 %2
    %ready_o = sig i1 %0
    %valid_i = sig i1 %0
    %payload_o = sig i32 %2
    %ready_i = sig i1 %0
    %valid_o = sig i1 %0
    %3 = const time 0s 1e
    drv i1$ %valid_i, %1, %3
    %valid_o1 = prb i1$ %valid_o
    drv i1$ %ready_i, %valid_o1, %3
    %clk_i1 = prb i1$ %clk_i
    %4 = sig i1 %0
    drv i1$ %4, %clk_i1, %3
    %rst_ni1 = prb i1$ %rst_ni
    %5 = sig i1 %0
    drv i1$ %5, %rst_ni1, %3
    %payload_i1 = prb i32$ %payload_i
    %6 = sig i32 %2
    drv i32$ %6, %payload_i1, %3
    %valid_i1 = prb i1$ %valid_i
    %7 = sig i1 %0
    drv i1$ %7, %valid_i1, %3
    %ready_i1 = prb i1$ %ready_i
    %8 = sig i1 %0
    drv i1$ %8, %ready_i1, %3
    inst @stream_delay.param1 (i1$ %4, i1$ %5, i32$ %6, i1$ %7, i1$ %8) -> (i1$ %ready_o, i32$ %payload_o, i1$ %valid_o)
    inst %stream_delay_tb.initial.694.0 () -> (i1$ %clk_i, i1$ %rst_ni)
    inst %stream_delay_tb.always.724.0 (i1$ %clk_i, i1$ %ready_o) -> (i32$ %payload_i)
}
