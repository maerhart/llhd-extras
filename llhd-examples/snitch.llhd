proc %snitch_regfile.param2.always_comb.1766.2 ([1 x i5]$ %waddr_i, i1$ %we_i) -> ([1 x i32]$ %we_dec) {
0:
    br %body
body:
    %1 = const i32 0
    %j = var i32 %1
    br %loop_body
check:
    wait %body, %waddr_i, %we_i
loop_body:
    %j1 = ld i32* %j
    %2 = const i32 1
    %3 = slt i32 %j1, %2
    br %3, %loop_exit, %loop_continue
loop_exit:
    br %check
loop_continue:
    %4 = const i32 0
    %i = var i32 %4
    br %loop_body1
loop_body1:
    %i1 = ld i32* %i
    %5 = const i32 32
    %6 = slt i32 %i1, %5
    br %6, %loop_exit1, %loop_continue1
loop_exit1:
    %j2 = ld i32* %j
    %7 = const i32 1
    %8 = add i32 %j2, %7
    st i32* %j, %8
    %j3 = ld i32* %j
    %9 = const i32 0
    %10 = neq i32 %j3, %9
    br %loop_body
loop_continue1:
    %11 = const i32 0
    %waddr_i1 = prb [1 x i5]$ %waddr_i
    %j4 = ld i32* %j
    %12 = const i5 0
    %13 = [1 x i5 %12]
    %14 = shr [1 x i5] %waddr_i1, [1 x i5] %13, i32 %j4
    %15 = extf i5, [1 x i5] %14, 0
    %16 = inss i32 %11, i5 %15, 0, 5
    %i2 = ld i32* %i
    %17 = eq i32 %16, %i2
    br %17, %if_false, %if_true
if_true:
    %j5 = ld i32* %j
    %18 = const i32 0
    %19 = [1 x i32 %18]
    %20 = sig [1 x i32] %19
    %21 = shr [1 x i32]$ %we_dec, [1 x i32]$ %20, i32 %j5
    %22 = extf i32$, [1 x i32]$ %21, 0
    %i3 = ld i32* %i
    %23 = const i32 0
    %24 = sig i32 %23
    %25 = shr i32$ %22, i32$ %24, i32 %i3
    %26 = exts i1$, i32$ %25, 0, 1
    %we_i1 = prb i1$ %we_i
    %j6 = ld i32* %j
    %27 = const i1 0
    %28 = shr i1 %we_i1, i1 %27, i32 %j6
    %29 = exts i1, i1 %28, 0, 1
    %30 = const time 0s 1e
    drv i1$ %26, %29, %30
    br %if_exit
if_false:
    %j7 = ld i32* %j
    %31 = const i32 0
    %32 = [1 x i32 %31]
    %33 = sig [1 x i32] %32
    %34 = shr [1 x i32]$ %we_dec, [1 x i32]$ %33, i32 %j7
    %35 = extf i32$, [1 x i32]$ %34, 0
    %i4 = ld i32* %i
    %36 = const i32 0
    %37 = sig i32 %36
    %38 = shr i32$ %35, i32$ %37, i32 %i4
    %39 = exts i1$, i32$ %38, 0, 1
    %40 = const i1 0
    %41 = const time 0s 1e
    drv i1$ %39, %40, %41
    br %if_exit
if_exit:
    %i5 = ld i32* %i
    %42 = const i32 1
    %43 = add i32 %i5, %42
    st i32* %i, %43
    %i6 = ld i32* %i
    %44 = const i32 0
    %45 = neq i32 %i6, %44
    br %loop_body1
}

proc %snitch_regfile.param2.always_ff.1767.2 (i1$ %clk_i, [1 x i32]$ %wdata_i, [1 x i32]$ %we_dec) -> ([32 x i32]$ %mem) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %4 = const i32 0
    %j = var i32 %4
    br %loop_body
loop_body:
    %j1 = ld i32* %j
    %5 = const i32 1
    %6 = slt i32 %j1, %5
    br %6, %loop_exit, %loop_continue
loop_exit:
    br %0
loop_continue:
    %7 = const i32 0
    %i = var i32 %7
    br %loop_body1
loop_body1:
    %i1 = ld i32* %i
    %8 = const i32 32
    %9 = slt i32 %i1, %8
    br %9, %loop_exit1, %loop_continue1
loop_exit1:
    %10 = const i32 1
    %11 = const i32 0
    %12 = neq i32 %10, %11
    br %12, %if_false, %if_true
loop_continue1:
    %we_dec1 = prb [1 x i32]$ %we_dec
    %j2 = ld i32* %j
    %13 = const i32 0
    %14 = [1 x i32 %13]
    %15 = shr [1 x i32] %we_dec1, [1 x i32] %14, i32 %j2
    %16 = extf i32, [1 x i32] %15, 0
    %i2 = ld i32* %i
    %17 = const i32 0
    %18 = shr i32 %16, i32 %17, i32 %i2
    %19 = exts i1, i32 %18, 0, 1
    br %19, %if_false1, %if_true1
if_true1:
    %i3 = ld i32* %i
    %20 = const i32 0
    %21 = [32 x i32 %20]
    %22 = sig [32 x i32] %21
    %23 = shr [32 x i32]$ %mem, [32 x i32]$ %22, i32 %i3
    %24 = extf i32$, [32 x i32]$ %23, 0
    %wdata_i1 = prb [1 x i32]$ %wdata_i
    %j3 = ld i32* %j
    %25 = const i32 0
    %26 = [1 x i32 %25]
    %27 = shr [1 x i32] %wdata_i1, [1 x i32] %26, i32 %j3
    %28 = extf i32, [1 x i32] %27, 0
    %29 = const time 0s 1d
    drv i32$ %24, %28, %29
    br %if_exit
if_false1:
    br %if_exit
if_exit:
    %i4 = ld i32* %i
    %30 = const i32 1
    %31 = add i32 %i4, %30
    st i32* %i, %31
    %i5 = ld i32* %i
    %32 = const i32 0
    %33 = neq i32 %i5, %32
    br %loop_body1
if_true:
    %34 = const i32 0
    %35 = const i32 0
    %36 = [32 x i32 %35]
    %37 = sig [32 x i32] %36
    %38 = shr [32 x i32]$ %mem, [32 x i32]$ %37, i32 %34
    %39 = extf i32$, [32 x i32]$ %38, 0
    %40 = const i32 0
    %41 = const i1 0
    %42 = inss i32 %40, i1 %41, 0, 1
    %43 = const time 0s 1d
    drv i32$ %39, %42, %43
    br %if_exit1
if_false:
    br %if_exit1
if_exit1:
    %j4 = ld i32* %j
    %44 = const i32 1
    %45 = add i32 %j4, %44
    st i32* %j, %45
    %j5 = ld i32* %j
    %46 = const i32 0
    %47 = neq i32 %j5, %46
    br %loop_body
}

entity @snitch_regfile.param2 (i1$ %clk_i, [2 x i5]$ %raddr_i, [1 x i5]$ %waddr_i, [1 x i32]$ %wdata_i, i1$ %we_i) -> ([2 x i32]$ %rdata_o) {
    %0 = const i32 0
    %1 = const i32 0
    %2 = const i32 0
    %3 = const i32 0
    %4 = const i32 0
    %5 = const i32 0
    %6 = const i32 0
    %7 = const i32 0
    %8 = const i32 0
    %9 = const i32 0
    %10 = const i32 0
    %11 = const i32 0
    %12 = const i32 0
    %13 = const i32 0
    %14 = const i32 0
    %15 = const i32 0
    %16 = const i32 0
    %17 = const i32 0
    %18 = const i32 0
    %19 = const i32 0
    %20 = const i32 0
    %21 = const i32 0
    %22 = const i32 0
    %23 = const i32 0
    %24 = const i32 0
    %25 = const i32 0
    %26 = const i32 0
    %27 = const i32 0
    %28 = const i32 0
    %29 = const i32 0
    %30 = const i32 0
    %31 = const i32 0
    %32 = [i32 %0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31]
    %mem = sig [32 x i32] %32
    %33 = const i32 0
    %34 = [i32 %33]
    %we_dec = sig [1 x i32] %34
    %35 = const i32 0
    %36 = const i32 0
    %37 = [2 x i32 %36]
    %38 = sig [2 x i32] %37
    %39 = shr [2 x i32]$ %rdata_o, [2 x i32]$ %38, i32 %35
    %40 = extf i32$, [2 x i32]$ %39, 0
    %mem1 = prb [32 x i32]$ %mem
    %raddr_i1 = prb [2 x i5]$ %raddr_i
    %41 = const i32 0
    %42 = const i5 0
    %43 = [2 x i5 %42]
    %44 = shr [2 x i5] %raddr_i1, [2 x i5] %43, i32 %41
    %45 = extf i5, [2 x i5] %44, 0
    %46 = const i32 0
    %47 = [32 x i32 %46]
    %48 = shr [32 x i32] %mem1, [32 x i32] %47, i5 %45
    %49 = extf i32, [32 x i32] %48, 0
    %50 = const time 0s 1e
    drv i32$ %40, %49, %50
    %51 = const i32 1
    %52 = const i32 0
    %53 = [2 x i32 %52]
    %54 = sig [2 x i32] %53
    %55 = shr [2 x i32]$ %rdata_o, [2 x i32]$ %54, i32 %51
    %56 = extf i32$, [2 x i32]$ %55, 0
    %mem2 = prb [32 x i32]$ %mem
    %raddr_i2 = prb [2 x i5]$ %raddr_i
    %57 = const i32 1
    %58 = const i5 0
    %59 = [2 x i5 %58]
    %60 = shr [2 x i5] %raddr_i2, [2 x i5] %59, i32 %57
    %61 = extf i5, [2 x i5] %60, 0
    %62 = const i32 0
    %63 = [32 x i32 %62]
    %64 = shr [32 x i32] %mem2, [32 x i32] %63, i5 %61
    %65 = extf i32, [32 x i32] %64, 0
    %66 = const time 0s 1e
    drv i32$ %56, %65, %66
    inst %snitch_regfile.param2.always_comb.1766.2 ([1 x i5]$ %waddr_i, i1$ %we_i) -> ([1 x i32]$ %we_dec)
    inst %snitch_regfile.param2.always_ff.1767.2 (i1$ %clk_i, [1 x i32]$ %wdata_i, [1 x i32]$ %we_dec) -> ([32 x i32]$ %mem)
    %67 = const i32 0
    %68 = const i32 0
    %69 = [i32 %67, %68]
    %70 = const time 0s
    drv [2 x i32]$ %rdata_o, %69, %70
}

proc %fifo_v3.param6.always_comb.2398.6 (i1$ %full_o, i1$ %empty_o, {i5, i1, i3, i2}$ %data_i, i1$ %push_i, i1$ %pop_i, i1$ %read_pointer_n, i1$ %read_pointer_q, i1$ %write_pointer_q, i2$ %status_cnt_q, [1 x {i5, i1, i3, i2}]$ %mem_q) -> ({i5, i1, i3, i2}$ %data_o, i1$ %gate_clock, i1$ %read_pointer_n1, i1$ %write_pointer_n, i2$ %status_cnt_n, [1 x {i5, i1, i3, i2}]$ %mem_n) {
0:
    %1 = prb i1$ %read_pointer_n1
    %read_pointer_n.shadow = var i1 %1
    br %body
body:
    %2 = prb i1$ %read_pointer_n1
    st i1* %read_pointer_n.shadow, %2
    %read_pointer_q1 = prb i1$ %read_pointer_q
    %3 = const time 0s 1e
    drv i1$ %read_pointer_n1, %read_pointer_q1, %3
    st i1* %read_pointer_n.shadow, %read_pointer_q1
    %write_pointer_q1 = prb i1$ %write_pointer_q
    %4 = const time 0s 1e
    drv i1$ %write_pointer_n, %write_pointer_q1, %4
    %status_cnt_q1 = prb i2$ %status_cnt_q
    %5 = const time 0s 1e
    drv i2$ %status_cnt_n, %status_cnt_q1, %5
    %6 = const i32 1
    %7 = const i32 0
    %8 = eq i32 %6, %7
    %9 = const i11 0
    %data_i1 = prb {i5, i1, i3, i2}$ %data_i
    %10 = extf i2, {i5, i1, i3, i2} %data_i1, 3
    %11 = inss i11 %9, i2 %10, 0, 2
    %data_i2 = prb {i5, i1, i3, i2}$ %data_i
    %12 = extf i3, {i5, i1, i3, i2} %data_i2, 2
    %13 = inss i11 %11, i3 %12, 2, 3
    %data_i3 = prb {i5, i1, i3, i2}$ %data_i
    %14 = extf i1, {i5, i1, i3, i2} %data_i3, 1
    %15 = inss i11 %13, i1 %14, 5, 1
    %data_i4 = prb {i5, i1, i3, i2}$ %data_i
    %16 = extf i5, {i5, i1, i3, i2} %data_i4, 0
    %17 = inss i11 %15, i5 %16, 6, 5
    %18 = const i11 0
    %mem_q1 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q2 = prb i1$ %read_pointer_q
    %19 = const i5 0
    %20 = const i1 0
    %21 = const i3 0
    %22 = const i2 0
    %23 = {i5 %19, i1 %20, i3 %21, i2 %22}
    %24 = [1 x {i5, i1, i3, i2} %23]
    %25 = shr [1 x {i5, i1, i3, i2}] %mem_q1, [1 x {i5, i1, i3, i2}] %24, i1 %read_pointer_q2
    %26 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %25, 0
    %27 = extf i2, {i5, i1, i3, i2} %26, 3
    %28 = inss i11 %18, i2 %27, 0, 2
    %mem_q2 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q3 = prb i1$ %read_pointer_q
    %29 = const i5 0
    %30 = const i1 0
    %31 = const i3 0
    %32 = const i2 0
    %33 = {i5 %29, i1 %30, i3 %31, i2 %32}
    %34 = [1 x {i5, i1, i3, i2} %33]
    %35 = shr [1 x {i5, i1, i3, i2}] %mem_q2, [1 x {i5, i1, i3, i2}] %34, i1 %read_pointer_q3
    %36 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %35, 0
    %37 = extf i3, {i5, i1, i3, i2} %36, 2
    %38 = inss i11 %28, i3 %37, 2, 3
    %mem_q3 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q4 = prb i1$ %read_pointer_q
    %39 = const i5 0
    %40 = const i1 0
    %41 = const i3 0
    %42 = const i2 0
    %43 = {i5 %39, i1 %40, i3 %41, i2 %42}
    %44 = [1 x {i5, i1, i3, i2} %43]
    %45 = shr [1 x {i5, i1, i3, i2}] %mem_q3, [1 x {i5, i1, i3, i2}] %44, i1 %read_pointer_q4
    %46 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %45, 0
    %47 = extf i1, {i5, i1, i3, i2} %46, 1
    %48 = inss i11 %38, i1 %47, 5, 1
    %mem_q4 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q5 = prb i1$ %read_pointer_q
    %49 = const i5 0
    %50 = const i1 0
    %51 = const i3 0
    %52 = const i2 0
    %53 = {i5 %49, i1 %50, i3 %51, i2 %52}
    %54 = [1 x {i5, i1, i3, i2} %53]
    %55 = shr [1 x {i5, i1, i3, i2}] %mem_q4, [1 x {i5, i1, i3, i2}] %54, i1 %read_pointer_q5
    %56 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %55, 0
    %57 = extf i5, {i5, i1, i3, i2} %56, 0
    %58 = inss i11 %48, i5 %57, 6, 5
    %59 = [i11 %58, %17]
    %60 = mux [2 x i11] %59, i1 %8
    %61 = const i32 0
    %62 = const i11 0
    %63 = shr i11 %60, i11 %62, i32 %61
    %64 = exts i5, i11 %63, 0, 5
    %65 = const i32 1
    %66 = const i32 0
    %67 = eq i32 %65, %66
    %68 = const i11 0
    %data_i5 = prb {i5, i1, i3, i2}$ %data_i
    %69 = extf i2, {i5, i1, i3, i2} %data_i5, 3
    %70 = inss i11 %68, i2 %69, 0, 2
    %data_i6 = prb {i5, i1, i3, i2}$ %data_i
    %71 = extf i3, {i5, i1, i3, i2} %data_i6, 2
    %72 = inss i11 %70, i3 %71, 2, 3
    %data_i7 = prb {i5, i1, i3, i2}$ %data_i
    %73 = extf i1, {i5, i1, i3, i2} %data_i7, 1
    %74 = inss i11 %72, i1 %73, 5, 1
    %data_i8 = prb {i5, i1, i3, i2}$ %data_i
    %75 = extf i5, {i5, i1, i3, i2} %data_i8, 0
    %76 = inss i11 %74, i5 %75, 6, 5
    %77 = const i11 0
    %mem_q5 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q6 = prb i1$ %read_pointer_q
    %78 = const i5 0
    %79 = const i1 0
    %80 = const i3 0
    %81 = const i2 0
    %82 = {i5 %78, i1 %79, i3 %80, i2 %81}
    %83 = [1 x {i5, i1, i3, i2} %82]
    %84 = shr [1 x {i5, i1, i3, i2}] %mem_q5, [1 x {i5, i1, i3, i2}] %83, i1 %read_pointer_q6
    %85 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %84, 0
    %86 = extf i2, {i5, i1, i3, i2} %85, 3
    %87 = inss i11 %77, i2 %86, 0, 2
    %mem_q6 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q7 = prb i1$ %read_pointer_q
    %88 = const i5 0
    %89 = const i1 0
    %90 = const i3 0
    %91 = const i2 0
    %92 = {i5 %88, i1 %89, i3 %90, i2 %91}
    %93 = [1 x {i5, i1, i3, i2} %92]
    %94 = shr [1 x {i5, i1, i3, i2}] %mem_q6, [1 x {i5, i1, i3, i2}] %93, i1 %read_pointer_q7
    %95 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %94, 0
    %96 = extf i3, {i5, i1, i3, i2} %95, 2
    %97 = inss i11 %87, i3 %96, 2, 3
    %mem_q7 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q8 = prb i1$ %read_pointer_q
    %98 = const i5 0
    %99 = const i1 0
    %100 = const i3 0
    %101 = const i2 0
    %102 = {i5 %98, i1 %99, i3 %100, i2 %101}
    %103 = [1 x {i5, i1, i3, i2} %102]
    %104 = shr [1 x {i5, i1, i3, i2}] %mem_q7, [1 x {i5, i1, i3, i2}] %103, i1 %read_pointer_q8
    %105 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %104, 0
    %106 = extf i1, {i5, i1, i3, i2} %105, 1
    %107 = inss i11 %97, i1 %106, 5, 1
    %mem_q8 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q9 = prb i1$ %read_pointer_q
    %108 = const i5 0
    %109 = const i1 0
    %110 = const i3 0
    %111 = const i2 0
    %112 = {i5 %108, i1 %109, i3 %110, i2 %111}
    %113 = [1 x {i5, i1, i3, i2} %112]
    %114 = shr [1 x {i5, i1, i3, i2}] %mem_q8, [1 x {i5, i1, i3, i2}] %113, i1 %read_pointer_q9
    %115 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %114, 0
    %116 = extf i5, {i5, i1, i3, i2} %115, 0
    %117 = inss i11 %107, i5 %116, 6, 5
    %118 = [i11 %117, %76]
    %119 = mux [2 x i11] %118, i1 %67
    %120 = const i32 5
    %121 = const i11 0
    %122 = shr i11 %119, i11 %121, i32 %120
    %123 = exts i1, i11 %122, 0, 1
    %124 = const i32 1
    %125 = const i32 0
    %126 = eq i32 %124, %125
    %127 = const i11 0
    %data_i9 = prb {i5, i1, i3, i2}$ %data_i
    %128 = extf i2, {i5, i1, i3, i2} %data_i9, 3
    %129 = inss i11 %127, i2 %128, 0, 2
    %data_i10 = prb {i5, i1, i3, i2}$ %data_i
    %130 = extf i3, {i5, i1, i3, i2} %data_i10, 2
    %131 = inss i11 %129, i3 %130, 2, 3
    %data_i11 = prb {i5, i1, i3, i2}$ %data_i
    %132 = extf i1, {i5, i1, i3, i2} %data_i11, 1
    %133 = inss i11 %131, i1 %132, 5, 1
    %data_i12 = prb {i5, i1, i3, i2}$ %data_i
    %134 = extf i5, {i5, i1, i3, i2} %data_i12, 0
    %135 = inss i11 %133, i5 %134, 6, 5
    %136 = const i11 0
    %mem_q9 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q10 = prb i1$ %read_pointer_q
    %137 = const i5 0
    %138 = const i1 0
    %139 = const i3 0
    %140 = const i2 0
    %141 = {i5 %137, i1 %138, i3 %139, i2 %140}
    %142 = [1 x {i5, i1, i3, i2} %141]
    %143 = shr [1 x {i5, i1, i3, i2}] %mem_q9, [1 x {i5, i1, i3, i2}] %142, i1 %read_pointer_q10
    %144 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %143, 0
    %145 = extf i2, {i5, i1, i3, i2} %144, 3
    %146 = inss i11 %136, i2 %145, 0, 2
    %mem_q10 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q11 = prb i1$ %read_pointer_q
    %147 = const i5 0
    %148 = const i1 0
    %149 = const i3 0
    %150 = const i2 0
    %151 = {i5 %147, i1 %148, i3 %149, i2 %150}
    %152 = [1 x {i5, i1, i3, i2} %151]
    %153 = shr [1 x {i5, i1, i3, i2}] %mem_q10, [1 x {i5, i1, i3, i2}] %152, i1 %read_pointer_q11
    %154 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %153, 0
    %155 = extf i3, {i5, i1, i3, i2} %154, 2
    %156 = inss i11 %146, i3 %155, 2, 3
    %mem_q11 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q12 = prb i1$ %read_pointer_q
    %157 = const i5 0
    %158 = const i1 0
    %159 = const i3 0
    %160 = const i2 0
    %161 = {i5 %157, i1 %158, i3 %159, i2 %160}
    %162 = [1 x {i5, i1, i3, i2} %161]
    %163 = shr [1 x {i5, i1, i3, i2}] %mem_q11, [1 x {i5, i1, i3, i2}] %162, i1 %read_pointer_q12
    %164 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %163, 0
    %165 = extf i1, {i5, i1, i3, i2} %164, 1
    %166 = inss i11 %156, i1 %165, 5, 1
    %mem_q12 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q13 = prb i1$ %read_pointer_q
    %167 = const i5 0
    %168 = const i1 0
    %169 = const i3 0
    %170 = const i2 0
    %171 = {i5 %167, i1 %168, i3 %169, i2 %170}
    %172 = [1 x {i5, i1, i3, i2} %171]
    %173 = shr [1 x {i5, i1, i3, i2}] %mem_q12, [1 x {i5, i1, i3, i2}] %172, i1 %read_pointer_q13
    %174 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %173, 0
    %175 = extf i5, {i5, i1, i3, i2} %174, 0
    %176 = inss i11 %166, i5 %175, 6, 5
    %177 = [i11 %176, %135]
    %178 = mux [2 x i11] %177, i1 %126
    %179 = const i32 6
    %180 = const i11 0
    %181 = shr i11 %178, i11 %180, i32 %179
    %182 = exts i3, i11 %181, 0, 3
    %183 = const i32 1
    %184 = const i32 0
    %185 = eq i32 %183, %184
    %186 = const i11 0
    %data_i13 = prb {i5, i1, i3, i2}$ %data_i
    %187 = extf i2, {i5, i1, i3, i2} %data_i13, 3
    %188 = inss i11 %186, i2 %187, 0, 2
    %data_i14 = prb {i5, i1, i3, i2}$ %data_i
    %189 = extf i3, {i5, i1, i3, i2} %data_i14, 2
    %190 = inss i11 %188, i3 %189, 2, 3
    %data_i15 = prb {i5, i1, i3, i2}$ %data_i
    %191 = extf i1, {i5, i1, i3, i2} %data_i15, 1
    %192 = inss i11 %190, i1 %191, 5, 1
    %data_i16 = prb {i5, i1, i3, i2}$ %data_i
    %193 = extf i5, {i5, i1, i3, i2} %data_i16, 0
    %194 = inss i11 %192, i5 %193, 6, 5
    %195 = const i11 0
    %mem_q13 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q14 = prb i1$ %read_pointer_q
    %196 = const i5 0
    %197 = const i1 0
    %198 = const i3 0
    %199 = const i2 0
    %200 = {i5 %196, i1 %197, i3 %198, i2 %199}
    %201 = [1 x {i5, i1, i3, i2} %200]
    %202 = shr [1 x {i5, i1, i3, i2}] %mem_q13, [1 x {i5, i1, i3, i2}] %201, i1 %read_pointer_q14
    %203 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %202, 0
    %204 = extf i2, {i5, i1, i3, i2} %203, 3
    %205 = inss i11 %195, i2 %204, 0, 2
    %mem_q14 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q15 = prb i1$ %read_pointer_q
    %206 = const i5 0
    %207 = const i1 0
    %208 = const i3 0
    %209 = const i2 0
    %210 = {i5 %206, i1 %207, i3 %208, i2 %209}
    %211 = [1 x {i5, i1, i3, i2} %210]
    %212 = shr [1 x {i5, i1, i3, i2}] %mem_q14, [1 x {i5, i1, i3, i2}] %211, i1 %read_pointer_q15
    %213 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %212, 0
    %214 = extf i3, {i5, i1, i3, i2} %213, 2
    %215 = inss i11 %205, i3 %214, 2, 3
    %mem_q15 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q16 = prb i1$ %read_pointer_q
    %216 = const i5 0
    %217 = const i1 0
    %218 = const i3 0
    %219 = const i2 0
    %220 = {i5 %216, i1 %217, i3 %218, i2 %219}
    %221 = [1 x {i5, i1, i3, i2} %220]
    %222 = shr [1 x {i5, i1, i3, i2}] %mem_q15, [1 x {i5, i1, i3, i2}] %221, i1 %read_pointer_q16
    %223 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %222, 0
    %224 = extf i1, {i5, i1, i3, i2} %223, 1
    %225 = inss i11 %215, i1 %224, 5, 1
    %mem_q16 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %read_pointer_q17 = prb i1$ %read_pointer_q
    %226 = const i5 0
    %227 = const i1 0
    %228 = const i3 0
    %229 = const i2 0
    %230 = {i5 %226, i1 %227, i3 %228, i2 %229}
    %231 = [1 x {i5, i1, i3, i2} %230]
    %232 = shr [1 x {i5, i1, i3, i2}] %mem_q16, [1 x {i5, i1, i3, i2}] %231, i1 %read_pointer_q17
    %233 = extf {i5, i1, i3, i2}, [1 x {i5, i1, i3, i2}] %232, 0
    %234 = extf i5, {i5, i1, i3, i2} %233, 0
    %235 = inss i11 %225, i5 %234, 6, 5
    %236 = [i11 %235, %194]
    %237 = mux [2 x i11] %236, i1 %185
    %238 = const i32 9
    %239 = const i11 0
    %240 = shr i11 %237, i11 %239, i32 %238
    %241 = exts i2, i11 %240, 0, 2
    %242 = {i5 %64, i1 %123, i3 %182, i2 %241}
    %243 = const time 0s 1e
    drv {i5, i1, i3, i2}$ %data_o, %242, %243
    %mem_q17 = prb [1 x {i5, i1, i3, i2}]$ %mem_q
    %244 = const time 0s 1e
    drv [1 x {i5, i1, i3, i2}]$ %mem_n, %mem_q17, %244
    %245 = const i1 1
    %246 = const time 0s 1e
    drv i1$ %gate_clock, %245, %246
    %push_i1 = prb i1$ %push_i
    %full_o1 = prb i1$ %full_o
    %247 = not i1 %full_o1
    %248 = and i1 %push_i1, %247
    br %248, %if_false, %if_true
check:
    wait %body, %full_o, %empty_o, %data_i, %push_i, %pop_i, %read_pointer_n1, %read_pointer_q, %write_pointer_q, %status_cnt_q, %mem_q
if_true:
    %write_pointer_q2 = prb i1$ %write_pointer_q
    %249 = const i5 0
    %250 = const i1 0
    %251 = const i3 0
    %252 = const i2 0
    %253 = {i5 %249, i1 %250, i3 %251, i2 %252}
    %254 = [1 x {i5, i1, i3, i2} %253]
    %255 = sig [1 x {i5, i1, i3, i2}] %254
    %256 = shr [1 x {i5, i1, i3, i2}]$ %mem_n, [1 x {i5, i1, i3, i2}]$ %255, i1 %write_pointer_q2
    %257 = extf {i5, i1, i3, i2}$, [1 x {i5, i1, i3, i2}]$ %256, 0
    %data_i17 = prb {i5, i1, i3, i2}$ %data_i
    %258 = const time 0s 1e
    drv {i5, i1, i3, i2}$ %257, %data_i17, %258
    %259 = const i1 0
    %260 = const time 0s 1e
    drv i1$ %gate_clock, %259, %260
    %261 = const i32 0
    %write_pointer_q3 = prb i1$ %write_pointer_q
    %262 = inss i32 %261, i1 %write_pointer_q3, 0, 1
    %263 = const i32 1
    %264 = const i1 0
    %265 = const i32 0
    %266 = shr i32 %263, i32 %265, i1 %264
    %267 = exts i1, i32 %266, 0, 1
    %268 = exts i1, i1 %267, 0, 1
    %269 = const i32 0
    %270 = not i32 %269
    %271 = [i32 %269, %270]
    %272 = mux [2 x i32] %271, i1 %268
    %273 = inss i32 %272, i1 %267, 0, 1
    %274 = const i32 1
    %275 = sub i32 %273, %274
    %276 = eq i32 %262, %275
    br %276, %if_false1, %if_true1
if_false:
    br %if_exit
if_exit:
    %pop_i1 = prb i1$ %pop_i
    %empty_o1 = prb i1$ %empty_o
    %277 = not i1 %empty_o1
    %278 = and i1 %pop_i1, %277
    br %278, %if_false2, %if_true2
if_true1:
    %279 = const i1 0
    %280 = const time 0s 1e
    drv i1$ %write_pointer_n, %279, %280
    br %if_exit1
if_false1:
    %281 = const i32 0
    %write_pointer_q4 = prb i1$ %write_pointer_q
    %282 = inss i32 %281, i1 %write_pointer_q4, 0, 1
    %283 = const i32 1
    %284 = add i32 %282, %283
    %285 = exts i1, i32 %284, 0, 1
    %286 = const time 0s 1e
    drv i1$ %write_pointer_n, %285, %286
    br %if_exit1
if_exit1:
    %287 = const i32 0
    %status_cnt_q2 = prb i2$ %status_cnt_q
    %288 = inss i32 %287, i2 %status_cnt_q2, 0, 2
    %289 = const i32 1
    %290 = add i32 %288, %289
    %291 = exts i2, i32 %290, 0, 2
    %292 = const time 0s 1e
    drv i2$ %status_cnt_n, %291, %292
    br %if_exit
if_true2:
    %293 = const i32 0
    %read_pointer_n2 = ld i1* %read_pointer_n.shadow
    %294 = inss i32 %293, i1 %read_pointer_n2, 0, 1
    %295 = const i32 1
    %296 = const i1 0
    %297 = const i32 0
    %298 = shr i32 %295, i32 %297, i1 %296
    %299 = exts i1, i32 %298, 0, 1
    %300 = exts i1, i1 %299, 0, 1
    %301 = const i32 0
    %302 = not i32 %301
    %303 = [i32 %301, %302]
    %304 = mux [2 x i32] %303, i1 %300
    %305 = inss i32 %304, i1 %299, 0, 1
    %306 = const i32 1
    %307 = sub i32 %305, %306
    %308 = eq i32 %294, %307
    br %308, %if_false3, %if_true3
if_false2:
    br %if_exit2
if_exit2:
    %push_i2 = prb i1$ %push_i
    %pop_i2 = prb i1$ %pop_i
    %309 = and i1 %push_i2, %pop_i2
    %full_o2 = prb i1$ %full_o
    %310 = not i1 %full_o2
    %311 = and i1 %309, %310
    %empty_o2 = prb i1$ %empty_o
    %312 = not i1 %empty_o2
    %313 = and i1 %311, %312
    br %313, %if_false4, %if_true4
if_true3:
    %314 = const i1 0
    %315 = const time 0s 1e
    drv i1$ %read_pointer_n1, %314, %315
    st i1* %read_pointer_n.shadow, %314
    br %if_exit3
if_false3:
    %316 = const i32 0
    %read_pointer_q18 = prb i1$ %read_pointer_q
    %317 = inss i32 %316, i1 %read_pointer_q18, 0, 1
    %318 = const i32 1
    %319 = add i32 %317, %318
    %320 = exts i1, i32 %319, 0, 1
    %321 = const time 0s 1e
    drv i1$ %read_pointer_n1, %320, %321
    st i1* %read_pointer_n.shadow, %320
    br %if_exit3
if_exit3:
    %322 = const i32 0
    %status_cnt_q3 = prb i2$ %status_cnt_q
    %323 = inss i32 %322, i2 %status_cnt_q3, 0, 2
    %324 = const i32 1
    %325 = sub i32 %323, %324
    %326 = exts i2, i32 %325, 0, 2
    %327 = const time 0s 1e
    drv i2$ %status_cnt_n, %326, %327
    br %if_exit2
if_true4:
    %status_cnt_q4 = prb i2$ %status_cnt_q
    %328 = const time 0s 1e
    drv i2$ %status_cnt_n, %status_cnt_q4, %328
    br %if_exit4
if_false4:
    br %if_exit4
if_exit4:
    %329 = const i1 0
    %330 = const i32 0
    %status_cnt_q5 = prb i2$ %status_cnt_q
    %331 = inss i32 %330, i2 %status_cnt_q5, 0, 2
    %332 = const i32 0
    %333 = eq i32 %331, %332
    %334 = and i1 %329, %333
    %push_i3 = prb i1$ %push_i
    %335 = and i1 %334, %push_i3
    br %335, %if_false5, %if_true5
if_true5:
    %data_i18 = prb {i5, i1, i3, i2}$ %data_i
    %336 = const time 0s 1e
    drv {i5, i1, i3, i2}$ %data_o, %data_i18, %336
    %pop_i3 = prb i1$ %pop_i
    br %pop_i3, %if_false6, %if_true6
if_false5:
    br %if_exit5
if_exit5:
    br %check
if_true6:
    %status_cnt_q6 = prb i2$ %status_cnt_q
    %337 = const time 0s 1e
    drv i2$ %status_cnt_n, %status_cnt_q6, %337
    %read_pointer_q19 = prb i1$ %read_pointer_q
    %338 = const time 0s 1e
    drv i1$ %read_pointer_n1, %read_pointer_q19, %338
    st i1* %read_pointer_n.shadow, %read_pointer_q19
    %write_pointer_q5 = prb i1$ %write_pointer_q
    %339 = const time 0s 1e
    drv i1$ %write_pointer_n, %write_pointer_q5, %339
    br %if_exit6
if_false6:
    br %if_exit6
if_exit6:
    br %if_exit5
}

proc %fifo_v3.param6.always_ff.2399.6 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %read_pointer_n, i1$ %write_pointer_n, i2$ %status_cnt_n) -> (i1$ %read_pointer_q, i1$ %write_pointer_q, i2$ %status_cnt_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i1 0
    %9 = const time 0s 1d
    drv i1$ %read_pointer_q, %8, %9
    %10 = const i1 0
    %11 = const time 0s 1d
    drv i1$ %write_pointer_q, %10, %11
    %12 = const i2 0
    %13 = const i1 0
    %14 = inss i2 %12, i1 %13, 0, 1
    %15 = const time 0s 1d
    drv i2$ %status_cnt_q, %14, %15
    br %if_exit
if_false:
    %flush_i1 = prb i1$ %flush_i
    br %flush_i1, %if_false1, %if_true1
if_exit:
    br %0
if_true1:
    %16 = const i1 0
    %17 = const time 0s 1d
    drv i1$ %read_pointer_q, %16, %17
    %18 = const i1 0
    %19 = const time 0s 1d
    drv i1$ %write_pointer_q, %18, %19
    %20 = const i2 0
    %21 = const i1 0
    %22 = inss i2 %20, i1 %21, 0, 1
    %23 = const time 0s 1d
    drv i2$ %status_cnt_q, %22, %23
    br %if_exit1
if_false1:
    %read_pointer_n1 = prb i1$ %read_pointer_n
    %24 = const time 0s 1d
    drv i1$ %read_pointer_q, %read_pointer_n1, %24
    %write_pointer_n1 = prb i1$ %write_pointer_n
    %25 = const time 0s 1d
    drv i1$ %write_pointer_q, %write_pointer_n1, %25
    %status_cnt_n1 = prb i2$ %status_cnt_n
    %26 = const time 0s 1d
    drv i2$ %status_cnt_q, %status_cnt_n1, %26
    br %if_exit1
if_exit1:
    br %if_exit
}

proc %fifo_v3.param6.always_ff.2400.6 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [1 x {i5, i1, i3, i2}]$ %mem_n) -> ([1 x {i5, i1, i3, i2}]$ %mem_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i11 0
    %9 = const i1 0
    %10 = inss i11 %8, i1 %9, 0, 1
    %11 = const i32 0
    %12 = const i11 0
    %13 = shr i11 %10, i11 %12, i32 %11
    %14 = exts i11, i11 %13, 0, 11
    %15 = const i32 0
    %16 = const i11 0
    %17 = shr i11 %14, i11 %16, i32 %15
    %18 = exts i5, i11 %17, 0, 5
    %19 = const i11 0
    %20 = const i1 0
    %21 = inss i11 %19, i1 %20, 0, 1
    %22 = const i32 0
    %23 = const i11 0
    %24 = shr i11 %21, i11 %23, i32 %22
    %25 = exts i11, i11 %24, 0, 11
    %26 = const i32 5
    %27 = const i11 0
    %28 = shr i11 %25, i11 %27, i32 %26
    %29 = exts i1, i11 %28, 0, 1
    %30 = const i11 0
    %31 = const i1 0
    %32 = inss i11 %30, i1 %31, 0, 1
    %33 = const i32 0
    %34 = const i11 0
    %35 = shr i11 %32, i11 %34, i32 %33
    %36 = exts i11, i11 %35, 0, 11
    %37 = const i32 6
    %38 = const i11 0
    %39 = shr i11 %36, i11 %38, i32 %37
    %40 = exts i3, i11 %39, 0, 3
    %41 = const i11 0
    %42 = const i1 0
    %43 = inss i11 %41, i1 %42, 0, 1
    %44 = const i32 0
    %45 = const i11 0
    %46 = shr i11 %43, i11 %45, i32 %44
    %47 = exts i11, i11 %46, 0, 11
    %48 = const i32 9
    %49 = const i11 0
    %50 = shr i11 %47, i11 %49, i32 %48
    %51 = exts i2, i11 %50, 0, 2
    %52 = {i5 %18, i1 %29, i3 %40, i2 %51}
    %53 = [{i5, i1, i3, i2} %52]
    %54 = const time 0s 1d
    drv [1 x {i5, i1, i3, i2}]$ %mem_q, %53, %54
    br %if_exit
if_false:
    %gate_clock1 = prb i1$ %gate_clock
    %55 = not i1 %gate_clock1
    br %55, %if_false1, %if_true1
if_exit:
    br %0
if_true1:
    %mem_n1 = prb [1 x {i5, i1, i3, i2}]$ %mem_n
    %56 = const time 0s 1d
    drv [1 x {i5, i1, i3, i2}]$ %mem_q, %mem_n1, %56
    br %if_exit1
if_false1:
    br %if_exit1
if_exit1:
    br %if_exit
}

proc %fifo_v3.param6.initial.2401.6 () -> () {
0:
    halt
}

entity @fifo_v3.param6 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %testmode_i, {i5, i1, i3, i2}$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %full_o, i1$ %empty_o, i1$ %usage_o, {i5, i1, i3, i2}$ %data_o) {
    %0 = const i1 0
    %gate_clock = sig i1 %0
    %1 = const i1 0
    %read_pointer_n = sig i1 %1
    %2 = const i1 0
    %read_pointer_q = sig i1 %2
    %3 = const i1 0
    %write_pointer_n = sig i1 %3
    %4 = const i1 0
    %write_pointer_q = sig i1 %4
    %5 = const i2 0
    %status_cnt_n = sig i2 %5
    %6 = const i2 0
    %status_cnt_q = sig i2 %6
    %7 = const i5 0
    %8 = const i1 0
    %9 = const i3 0
    %10 = const i2 0
    %11 = {i5 %7, i1 %8, i3 %9, i2 %10}
    %12 = [{i5, i1, i3, i2} %11]
    %mem_n = sig [1 x {i5, i1, i3, i2}] %12
    %13 = const i5 0
    %14 = const i1 0
    %15 = const i3 0
    %16 = const i2 0
    %17 = {i5 %13, i1 %14, i3 %15, i2 %16}
    %18 = [{i5, i1, i3, i2} %17]
    %mem_q = sig [1 x {i5, i1, i3, i2}] %18
    %status_cnt_q1 = prb i2$ %status_cnt_q
    %19 = const i1 0
    %20 = const i2 0
    %21 = shr i2 %status_cnt_q1, i2 %20, i1 %19
    %22 = exts i1, i2 %21, 0, 1
    %23 = const time 0s 1e
    drv i1$ %usage_o, %22, %23
    %status_cnt_q2 = prb i2$ %status_cnt_q
    %24 = const i32 1
    %25 = const i1 0
    %26 = const i32 0
    %27 = shr i32 %24, i32 %26, i1 %25
    %28 = exts i2, i32 %27, 0, 2
    %29 = eq i2 %status_cnt_q2, %28
    %30 = const time 0s 1e
    drv i1$ %full_o, %29, %30
    %31 = const i32 0
    %status_cnt_q3 = prb i2$ %status_cnt_q
    %32 = inss i32 %31, i2 %status_cnt_q3, 0, 2
    %33 = const i32 0
    %34 = eq i32 %32, %33
    %35 = const i1 0
    %push_i1 = prb i1$ %push_i
    %36 = and i1 %35, %push_i1
    %37 = not i1 %36
    %38 = and i1 %34, %37
    %39 = const time 0s 1e
    drv i1$ %empty_o, %38, %39
    inst %fifo_v3.param6.always_comb.2398.6 (i1$ %full_o, i1$ %empty_o, {i5, i1, i3, i2}$ %data_i, i1$ %push_i, i1$ %pop_i, i1$ %read_pointer_n, i1$ %read_pointer_q, i1$ %write_pointer_q, i2$ %status_cnt_q, [1 x {i5, i1, i3, i2}]$ %mem_q) -> ({i5, i1, i3, i2}$ %data_o, i1$ %gate_clock, i1$ %read_pointer_n, i1$ %write_pointer_n, i2$ %status_cnt_n, [1 x {i5, i1, i3, i2}]$ %mem_n)
    inst %fifo_v3.param6.always_ff.2399.6 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %read_pointer_n, i1$ %write_pointer_n, i2$ %status_cnt_n) -> (i1$ %read_pointer_q, i1$ %write_pointer_q, i2$ %status_cnt_q)
    inst %fifo_v3.param6.always_ff.2400.6 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [1 x {i5, i1, i3, i2}]$ %mem_n) -> ([1 x {i5, i1, i3, i2}]$ %mem_q)
    inst %fifo_v3.param6.initial.2401.6 () -> ()
}

proc %snitch_lsu.param5.always_comb.2098.5 (i32$ %lsu_qaddr_i, i2$ %lsu_qsize_i) -> (i8$ %data_qstrb_o) {
0:
    br %body
body:
    %lsu_qsize_i1 = prb i2$ %lsu_qsize_i
    %1 = const i1 0
    %2 = const i2 0
    %3 = eq i2 %lsu_qsize_i1, %2
    %4 = or i1 %1, %3
    br %4, %5, %case_body
check:
    wait %body, %lsu_qaddr_i, %lsu_qsize_i
case_exit:
    br %check
case_body:
    %6 = const i8 1
    %lsu_qaddr_i1 = prb i32$ %lsu_qaddr_i
    %7 = const i1 0
    %8 = const i32 0
    %9 = shr i32 %lsu_qaddr_i1, i32 %8, i1 %7
    %10 = exts i3, i32 %9, 0, 3
    %11 = const i8 0
    %12 = shl i8 %6, i8 %11, i3 %10
    %13 = const time 0s 1e
    drv i8$ %data_qstrb_o, %12, %13
    br %case_exit
5:
    %14 = const i1 0
    %15 = const i2 1
    %16 = eq i2 %lsu_qsize_i1, %15
    %17 = or i1 %14, %16
    br %17, %18, %case_body1
case_body1:
    %19 = const i8 3
    %lsu_qaddr_i2 = prb i32$ %lsu_qaddr_i
    %20 = const i1 0
    %21 = const i32 0
    %22 = shr i32 %lsu_qaddr_i2, i32 %21, i1 %20
    %23 = exts i3, i32 %22, 0, 3
    %24 = const i8 0
    %25 = shl i8 %19, i8 %24, i3 %23
    %26 = const time 0s 1e
    drv i8$ %data_qstrb_o, %25, %26
    br %case_exit
18:
    %27 = const i1 0
    %28 = const i2 2
    %29 = eq i2 %lsu_qsize_i1, %28
    %30 = or i1 %27, %29
    br %30, %31, %case_body2
case_body2:
    %32 = const i8 15
    %lsu_qaddr_i3 = prb i32$ %lsu_qaddr_i
    %33 = const i1 0
    %34 = const i32 0
    %35 = shr i32 %lsu_qaddr_i3, i32 %34, i1 %33
    %36 = exts i3, i32 %35, 0, 3
    %37 = const i8 0
    %38 = shl i8 %32, i8 %37, i3 %36
    %39 = const time 0s 1e
    drv i8$ %data_qstrb_o, %38, %39
    br %case_exit
31:
    %40 = const i1 0
    %41 = const i2 3
    %42 = eq i2 %lsu_qsize_i1, %41
    %43 = or i1 %40, %42
    br %43, %44, %case_body3
case_body3:
    %45 = const i8 0
    %46 = const i1 1
    %47 = inss i8 %45, i1 %46, 0, 1
    %48 = const time 0s 1e
    drv i8$ %data_qstrb_o, %47, %48
    br %case_exit
44:
    %49 = const i8 0
    %50 = const i1 0
    %51 = inss i8 %49, i1 %50, 0, 1
    %52 = const time 0s 1e
    drv i8$ %data_qstrb_o, %51, %52
    br %case_exit
}

proc %snitch_lsu.param5.always_comb.2099.5 (i32$ %lsu_qaddr_i, i64$ %lsu_qdata_i) -> (i64$ %data_qdata_o) {
0:
    br %body
body:
    %lsu_qaddr_i1 = prb i32$ %lsu_qaddr_i
    %1 = const i1 0
    %2 = const i32 0
    %3 = shr i32 %lsu_qaddr_i1, i32 %2, i1 %1
    %4 = exts i3, i32 %3, 0, 3
    %5 = const i1 0
    %6 = const i3 0
    %7 = eq i3 %4, %6
    %8 = or i1 %5, %7
    br %8, %9, %case_body
check:
    wait %body, %lsu_qaddr_i, %lsu_qdata_i
case_exit:
    br %check
case_body:
    %lsu_qdata_i1 = prb i64$ %lsu_qdata_i
    %10 = const time 0s 1e
    drv i64$ %data_qdata_o, %lsu_qdata_i1, %10
    br %case_exit
9:
    %11 = const i1 0
    %12 = const i3 1
    %13 = eq i3 %4, %12
    %14 = or i1 %11, %13
    br %14, %15, %case_body1
case_body1:
    %16 = const i64 0
    %lsu_qdata_i2 = prb i64$ %lsu_qdata_i
    %17 = const i6 56
    %18 = const i64 0
    %19 = shr i64 %lsu_qdata_i2, i64 %18, i6 %17
    %20 = exts i8, i64 %19, 0, 8
    %21 = inss i64 %16, i8 %20, 0, 8
    %lsu_qdata_i3 = prb i64$ %lsu_qdata_i
    %22 = const i1 0
    %23 = const i64 0
    %24 = shr i64 %lsu_qdata_i3, i64 %23, i1 %22
    %25 = exts i56, i64 %24, 0, 56
    %26 = inss i64 %21, i56 %25, 8, 56
    %27 = const time 0s 1e
    drv i64$ %data_qdata_o, %26, %27
    br %case_exit
15:
    %28 = const i1 0
    %29 = const i3 2
    %30 = eq i3 %4, %29
    %31 = or i1 %28, %30
    br %31, %32, %case_body2
case_body2:
    %33 = const i64 0
    %lsu_qdata_i4 = prb i64$ %lsu_qdata_i
    %34 = const i6 48
    %35 = const i64 0
    %36 = shr i64 %lsu_qdata_i4, i64 %35, i6 %34
    %37 = exts i16, i64 %36, 0, 16
    %38 = inss i64 %33, i16 %37, 0, 16
    %lsu_qdata_i5 = prb i64$ %lsu_qdata_i
    %39 = const i1 0
    %40 = const i64 0
    %41 = shr i64 %lsu_qdata_i5, i64 %40, i1 %39
    %42 = exts i48, i64 %41, 0, 48
    %43 = inss i64 %38, i48 %42, 16, 48
    %44 = const time 0s 1e
    drv i64$ %data_qdata_o, %43, %44
    br %case_exit
32:
    %45 = const i1 0
    %46 = const i3 3
    %47 = eq i3 %4, %46
    %48 = or i1 %45, %47
    br %48, %49, %case_body3
case_body3:
    %50 = const i64 0
    %lsu_qdata_i6 = prb i64$ %lsu_qdata_i
    %51 = const i6 40
    %52 = const i64 0
    %53 = shr i64 %lsu_qdata_i6, i64 %52, i6 %51
    %54 = exts i24, i64 %53, 0, 24
    %55 = inss i64 %50, i24 %54, 0, 24
    %lsu_qdata_i7 = prb i64$ %lsu_qdata_i
    %56 = const i1 0
    %57 = const i64 0
    %58 = shr i64 %lsu_qdata_i7, i64 %57, i1 %56
    %59 = exts i40, i64 %58, 0, 40
    %60 = inss i64 %55, i40 %59, 24, 40
    %61 = const time 0s 1e
    drv i64$ %data_qdata_o, %60, %61
    br %case_exit
49:
    %62 = const i1 0
    %63 = const i3 4
    %64 = eq i3 %4, %63
    %65 = or i1 %62, %64
    br %65, %66, %case_body4
case_body4:
    %67 = const i64 0
    %lsu_qdata_i8 = prb i64$ %lsu_qdata_i
    %68 = const i6 32
    %69 = const i64 0
    %70 = shr i64 %lsu_qdata_i8, i64 %69, i6 %68
    %71 = exts i32, i64 %70, 0, 32
    %72 = inss i64 %67, i32 %71, 0, 32
    %lsu_qdata_i9 = prb i64$ %lsu_qdata_i
    %73 = const i1 0
    %74 = const i64 0
    %75 = shr i64 %lsu_qdata_i9, i64 %74, i1 %73
    %76 = exts i32, i64 %75, 0, 32
    %77 = inss i64 %72, i32 %76, 32, 32
    %78 = const time 0s 1e
    drv i64$ %data_qdata_o, %77, %78
    br %case_exit
66:
    %79 = const i1 0
    %80 = const i3 5
    %81 = eq i3 %4, %80
    %82 = or i1 %79, %81
    br %82, %83, %case_body5
case_body5:
    %84 = const i64 0
    %lsu_qdata_i10 = prb i64$ %lsu_qdata_i
    %85 = const i5 24
    %86 = const i64 0
    %87 = shr i64 %lsu_qdata_i10, i64 %86, i5 %85
    %88 = exts i40, i64 %87, 0, 40
    %89 = inss i64 %84, i40 %88, 0, 40
    %lsu_qdata_i11 = prb i64$ %lsu_qdata_i
    %90 = const i1 0
    %91 = const i64 0
    %92 = shr i64 %lsu_qdata_i11, i64 %91, i1 %90
    %93 = exts i24, i64 %92, 0, 24
    %94 = inss i64 %89, i24 %93, 40, 24
    %95 = const time 0s 1e
    drv i64$ %data_qdata_o, %94, %95
    br %case_exit
83:
    %96 = const i1 0
    %97 = const i3 6
    %98 = eq i3 %4, %97
    %99 = or i1 %96, %98
    br %99, %100, %case_body6
case_body6:
    %101 = const i64 0
    %lsu_qdata_i12 = prb i64$ %lsu_qdata_i
    %102 = const i5 16
    %103 = const i64 0
    %104 = shr i64 %lsu_qdata_i12, i64 %103, i5 %102
    %105 = exts i48, i64 %104, 0, 48
    %106 = inss i64 %101, i48 %105, 0, 48
    %lsu_qdata_i13 = prb i64$ %lsu_qdata_i
    %107 = const i1 0
    %108 = const i64 0
    %109 = shr i64 %lsu_qdata_i13, i64 %108, i1 %107
    %110 = exts i16, i64 %109, 0, 16
    %111 = inss i64 %106, i16 %110, 48, 16
    %112 = const time 0s 1e
    drv i64$ %data_qdata_o, %111, %112
    br %case_exit
100:
    %113 = const i1 0
    %114 = const i3 7
    %115 = eq i3 %4, %114
    %116 = or i1 %113, %115
    br %116, %117, %case_body7
case_body7:
    %118 = const i64 0
    %lsu_qdata_i14 = prb i64$ %lsu_qdata_i
    %119 = const i4 8
    %120 = const i64 0
    %121 = shr i64 %lsu_qdata_i14, i64 %120, i4 %119
    %122 = exts i56, i64 %121, 0, 56
    %123 = inss i64 %118, i56 %122, 0, 56
    %lsu_qdata_i15 = prb i64$ %lsu_qdata_i
    %124 = const i1 0
    %125 = const i64 0
    %126 = shr i64 %lsu_qdata_i15, i64 %125, i1 %124
    %127 = exts i8, i64 %126, 0, 8
    %128 = inss i64 %123, i8 %127, 56, 8
    %129 = const time 0s 1e
    drv i64$ %data_qdata_o, %128, %129
    br %case_exit
117:
    %lsu_qdata_i16 = prb i64$ %lsu_qdata_i
    %130 = const time 0s 1e
    drv i64$ %data_qdata_o, %lsu_qdata_i16, %130
    br %case_exit
}

proc %snitch_lsu.param5.always_comb.2105.5 ({i5, i1, i3, i2}$ %laq_out, i64$ %shifted_data) -> (i64$ %ld_result) {
0:
    br %body
body:
    %laq_out1 = prb {i5, i1, i3, i2}$ %laq_out
    %1 = extf i2, {i5, i1, i3, i2} %laq_out1, 3
    %2 = const i1 0
    %3 = const i2 0
    %4 = eq i2 %1, %3
    %5 = or i1 %2, %4
    br %5, %6, %case_body
check:
    wait %body, %laq_out, %shifted_data
case_exit:
    br %check
case_body:
    %7 = const i64 0
    %shifted_data1 = prb i64$ %shifted_data
    %8 = const i1 0
    %9 = const i64 0
    %10 = shr i64 %shifted_data1, i64 %9, i1 %8
    %11 = exts i8, i64 %10, 0, 8
    %12 = inss i64 %7, i8 %11, 0, 8
    %13 = const i1 0
    %shifted_data2 = prb i64$ %shifted_data
    %14 = const i32 7
    %15 = const i64 0
    %16 = shr i64 %shifted_data2, i64 %15, i32 %14
    %17 = exts i1, i64 %16, 0, 1
    %laq_out2 = prb {i5, i1, i3, i2}$ %laq_out
    %18 = extf i1, {i5, i1, i3, i2} %laq_out2, 1
    %19 = and i1 %17, %18
    %20 = inss i1 %13, i1 %19, 0, 1
    %21 = const i56 0
    %22 = inss i56 %21, i1 %20, 0, 1
    %23 = inss i56 %22, i1 %20, 1, 1
    %24 = inss i56 %23, i1 %20, 2, 1
    %25 = inss i56 %24, i1 %20, 3, 1
    %26 = inss i56 %25, i1 %20, 4, 1
    %27 = inss i56 %26, i1 %20, 5, 1
    %28 = inss i56 %27, i1 %20, 6, 1
    %29 = inss i56 %28, i1 %20, 7, 1
    %30 = inss i56 %29, i1 %20, 8, 1
    %31 = inss i56 %30, i1 %20, 9, 1
    %32 = inss i56 %31, i1 %20, 10, 1
    %33 = inss i56 %32, i1 %20, 11, 1
    %34 = inss i56 %33, i1 %20, 12, 1
    %35 = inss i56 %34, i1 %20, 13, 1
    %36 = inss i56 %35, i1 %20, 14, 1
    %37 = inss i56 %36, i1 %20, 15, 1
    %38 = inss i56 %37, i1 %20, 16, 1
    %39 = inss i56 %38, i1 %20, 17, 1
    %40 = inss i56 %39, i1 %20, 18, 1
    %41 = inss i56 %40, i1 %20, 19, 1
    %42 = inss i56 %41, i1 %20, 20, 1
    %43 = inss i56 %42, i1 %20, 21, 1
    %44 = inss i56 %43, i1 %20, 22, 1
    %45 = inss i56 %44, i1 %20, 23, 1
    %46 = inss i56 %45, i1 %20, 24, 1
    %47 = inss i56 %46, i1 %20, 25, 1
    %48 = inss i56 %47, i1 %20, 26, 1
    %49 = inss i56 %48, i1 %20, 27, 1
    %50 = inss i56 %49, i1 %20, 28, 1
    %51 = inss i56 %50, i1 %20, 29, 1
    %52 = inss i56 %51, i1 %20, 30, 1
    %53 = inss i56 %52, i1 %20, 31, 1
    %54 = inss i56 %53, i1 %20, 32, 1
    %55 = inss i56 %54, i1 %20, 33, 1
    %56 = inss i56 %55, i1 %20, 34, 1
    %57 = inss i56 %56, i1 %20, 35, 1
    %58 = inss i56 %57, i1 %20, 36, 1
    %59 = inss i56 %58, i1 %20, 37, 1
    %60 = inss i56 %59, i1 %20, 38, 1
    %61 = inss i56 %60, i1 %20, 39, 1
    %62 = inss i56 %61, i1 %20, 40, 1
    %63 = inss i56 %62, i1 %20, 41, 1
    %64 = inss i56 %63, i1 %20, 42, 1
    %65 = inss i56 %64, i1 %20, 43, 1
    %66 = inss i56 %65, i1 %20, 44, 1
    %67 = inss i56 %66, i1 %20, 45, 1
    %68 = inss i56 %67, i1 %20, 46, 1
    %69 = inss i56 %68, i1 %20, 47, 1
    %70 = inss i56 %69, i1 %20, 48, 1
    %71 = inss i56 %70, i1 %20, 49, 1
    %72 = inss i56 %71, i1 %20, 50, 1
    %73 = inss i56 %72, i1 %20, 51, 1
    %74 = inss i56 %73, i1 %20, 52, 1
    %75 = inss i56 %74, i1 %20, 53, 1
    %76 = inss i56 %75, i1 %20, 54, 1
    %77 = inss i56 %76, i1 %20, 55, 1
    %78 = inss i64 %12, i56 %77, 8, 56
    %79 = const time 0s 1e
    drv i64$ %ld_result, %78, %79
    br %case_exit
6:
    %80 = const i1 0
    %81 = const i2 1
    %82 = eq i2 %1, %81
    %83 = or i1 %80, %82
    br %83, %84, %case_body1
case_body1:
    %85 = const i64 0
    %shifted_data3 = prb i64$ %shifted_data
    %86 = const i1 0
    %87 = const i64 0
    %88 = shr i64 %shifted_data3, i64 %87, i1 %86
    %89 = exts i16, i64 %88, 0, 16
    %90 = inss i64 %85, i16 %89, 0, 16
    %91 = const i1 0
    %shifted_data4 = prb i64$ %shifted_data
    %92 = const i32 15
    %93 = const i64 0
    %94 = shr i64 %shifted_data4, i64 %93, i32 %92
    %95 = exts i1, i64 %94, 0, 1
    %laq_out3 = prb {i5, i1, i3, i2}$ %laq_out
    %96 = extf i1, {i5, i1, i3, i2} %laq_out3, 1
    %97 = and i1 %95, %96
    %98 = inss i1 %91, i1 %97, 0, 1
    %99 = const i48 0
    %100 = inss i48 %99, i1 %98, 0, 1
    %101 = inss i48 %100, i1 %98, 1, 1
    %102 = inss i48 %101, i1 %98, 2, 1
    %103 = inss i48 %102, i1 %98, 3, 1
    %104 = inss i48 %103, i1 %98, 4, 1
    %105 = inss i48 %104, i1 %98, 5, 1
    %106 = inss i48 %105, i1 %98, 6, 1
    %107 = inss i48 %106, i1 %98, 7, 1
    %108 = inss i48 %107, i1 %98, 8, 1
    %109 = inss i48 %108, i1 %98, 9, 1
    %110 = inss i48 %109, i1 %98, 10, 1
    %111 = inss i48 %110, i1 %98, 11, 1
    %112 = inss i48 %111, i1 %98, 12, 1
    %113 = inss i48 %112, i1 %98, 13, 1
    %114 = inss i48 %113, i1 %98, 14, 1
    %115 = inss i48 %114, i1 %98, 15, 1
    %116 = inss i48 %115, i1 %98, 16, 1
    %117 = inss i48 %116, i1 %98, 17, 1
    %118 = inss i48 %117, i1 %98, 18, 1
    %119 = inss i48 %118, i1 %98, 19, 1
    %120 = inss i48 %119, i1 %98, 20, 1
    %121 = inss i48 %120, i1 %98, 21, 1
    %122 = inss i48 %121, i1 %98, 22, 1
    %123 = inss i48 %122, i1 %98, 23, 1
    %124 = inss i48 %123, i1 %98, 24, 1
    %125 = inss i48 %124, i1 %98, 25, 1
    %126 = inss i48 %125, i1 %98, 26, 1
    %127 = inss i48 %126, i1 %98, 27, 1
    %128 = inss i48 %127, i1 %98, 28, 1
    %129 = inss i48 %128, i1 %98, 29, 1
    %130 = inss i48 %129, i1 %98, 30, 1
    %131 = inss i48 %130, i1 %98, 31, 1
    %132 = inss i48 %131, i1 %98, 32, 1
    %133 = inss i48 %132, i1 %98, 33, 1
    %134 = inss i48 %133, i1 %98, 34, 1
    %135 = inss i48 %134, i1 %98, 35, 1
    %136 = inss i48 %135, i1 %98, 36, 1
    %137 = inss i48 %136, i1 %98, 37, 1
    %138 = inss i48 %137, i1 %98, 38, 1
    %139 = inss i48 %138, i1 %98, 39, 1
    %140 = inss i48 %139, i1 %98, 40, 1
    %141 = inss i48 %140, i1 %98, 41, 1
    %142 = inss i48 %141, i1 %98, 42, 1
    %143 = inss i48 %142, i1 %98, 43, 1
    %144 = inss i48 %143, i1 %98, 44, 1
    %145 = inss i48 %144, i1 %98, 45, 1
    %146 = inss i48 %145, i1 %98, 46, 1
    %147 = inss i48 %146, i1 %98, 47, 1
    %148 = inss i64 %90, i48 %147, 16, 48
    %149 = const time 0s 1e
    drv i64$ %ld_result, %148, %149
    br %case_exit
84:
    %150 = const i1 0
    %151 = const i2 2
    %152 = eq i2 %1, %151
    %153 = or i1 %150, %152
    br %153, %154, %case_body2
case_body2:
    %155 = const i64 0
    %shifted_data5 = prb i64$ %shifted_data
    %156 = const i1 0
    %157 = const i64 0
    %158 = shr i64 %shifted_data5, i64 %157, i1 %156
    %159 = exts i32, i64 %158, 0, 32
    %160 = inss i64 %155, i32 %159, 0, 32
    %161 = const i1 0
    %shifted_data6 = prb i64$ %shifted_data
    %162 = const i32 31
    %163 = const i64 0
    %164 = shr i64 %shifted_data6, i64 %163, i32 %162
    %165 = exts i1, i64 %164, 0, 1
    %166 = const i32 0
    %167 = exts i1, i32 %166, 0, 1
    %168 = or i1 %165, %167
    %laq_out4 = prb {i5, i1, i3, i2}$ %laq_out
    %169 = extf i1, {i5, i1, i3, i2} %laq_out4, 1
    %170 = and i1 %168, %169
    %171 = inss i1 %161, i1 %170, 0, 1
    %172 = const i32 0
    %173 = inss i32 %172, i1 %171, 0, 1
    %174 = inss i32 %173, i1 %171, 1, 1
    %175 = inss i32 %174, i1 %171, 2, 1
    %176 = inss i32 %175, i1 %171, 3, 1
    %177 = inss i32 %176, i1 %171, 4, 1
    %178 = inss i32 %177, i1 %171, 5, 1
    %179 = inss i32 %178, i1 %171, 6, 1
    %180 = inss i32 %179, i1 %171, 7, 1
    %181 = inss i32 %180, i1 %171, 8, 1
    %182 = inss i32 %181, i1 %171, 9, 1
    %183 = inss i32 %182, i1 %171, 10, 1
    %184 = inss i32 %183, i1 %171, 11, 1
    %185 = inss i32 %184, i1 %171, 12, 1
    %186 = inss i32 %185, i1 %171, 13, 1
    %187 = inss i32 %186, i1 %171, 14, 1
    %188 = inss i32 %187, i1 %171, 15, 1
    %189 = inss i32 %188, i1 %171, 16, 1
    %190 = inss i32 %189, i1 %171, 17, 1
    %191 = inss i32 %190, i1 %171, 18, 1
    %192 = inss i32 %191, i1 %171, 19, 1
    %193 = inss i32 %192, i1 %171, 20, 1
    %194 = inss i32 %193, i1 %171, 21, 1
    %195 = inss i32 %194, i1 %171, 22, 1
    %196 = inss i32 %195, i1 %171, 23, 1
    %197 = inss i32 %196, i1 %171, 24, 1
    %198 = inss i32 %197, i1 %171, 25, 1
    %199 = inss i32 %198, i1 %171, 26, 1
    %200 = inss i32 %199, i1 %171, 27, 1
    %201 = inss i32 %200, i1 %171, 28, 1
    %202 = inss i32 %201, i1 %171, 29, 1
    %203 = inss i32 %202, i1 %171, 30, 1
    %204 = inss i32 %203, i1 %171, 31, 1
    %205 = inss i64 %160, i32 %204, 32, 32
    %206 = const time 0s 1e
    drv i64$ %ld_result, %205, %206
    br %case_exit
154:
    %207 = const i1 0
    %208 = const i2 3
    %209 = eq i2 %1, %208
    %210 = or i1 %207, %209
    br %210, %211, %case_body3
case_body3:
    %shifted_data7 = prb i64$ %shifted_data
    %212 = const time 0s 1e
    drv i64$ %ld_result, %shifted_data7, %212
    br %case_exit
211:
    %shifted_data8 = prb i64$ %shifted_data
    %213 = const time 0s 1e
    drv i64$ %ld_result, %shifted_data8, %213
    br %case_exit
}

entity @snitch_lsu.param5 (i1$ %clk_i, i1$ %rst_i, i5$ %lsu_qtag_i, i1$ %lsu_qwrite, i1$ %lsu_qsigned, i32$ %lsu_qaddr_i, i64$ %lsu_qdata_i, i2$ %lsu_qsize_i, i4$ %lsu_qamo_i, i1$ %lsu_qvalid_i, i1$ %lsu_pready_i, i1$ %data_qready_i, i64$ %data_pdata_i, i1$ %data_perror_i, i1$ %data_pvalid_i) -> (i1$ %lsu_qready_o, i64$ %lsu_pdata_o, i5$ %lsu_ptag_o, i1$ %lsu_perror_o, i1$ %lsu_pvalid_o, i32$ %data_qaddr_o, i1$ %data_qwrite_o, i4$ %data_qamo_o, i64$ %data_qdata_o, i8$ %data_qstrb_o, i1$ %data_qvalid_o, i1$ %data_pready_o) {
    %0 = const i64 0
    %ld_result = sig i64 %0
    %1 = const i5 0
    %2 = const i1 0
    %3 = const i3 0
    %4 = const i2 0
    %5 = {i5 %1, i1 %2, i3 %3, i2 %4}
    %laq_in = sig {i5, i1, i3, i2} %5
    %6 = const i5 0
    %7 = const i1 0
    %8 = const i3 0
    %9 = const i2 0
    %10 = {i5 %6, i1 %7, i3 %8, i2 %9}
    %laq_out = sig {i5, i1, i3, i2} %10
    %11 = const i1 0
    %laq_full = sig i1 %11
    %12 = const i1 0
    %laq_push = sig i1 %12
    %13 = const i64 0
    %shifted_data = sig i64 %13
    %lsu_qtag_i1 = prb i5$ %lsu_qtag_i
    %lsu_qsigned1 = prb i1$ %lsu_qsigned
    %lsu_qaddr_i1 = prb i32$ %lsu_qaddr_i
    %14 = const i1 0
    %15 = const i32 0
    %16 = shr i32 %lsu_qaddr_i1, i32 %15, i1 %14
    %17 = exts i3, i32 %16, 0, 3
    %lsu_qsize_i1 = prb i2$ %lsu_qsize_i
    %18 = {i5 %lsu_qtag_i1, i1 %lsu_qsigned1, i3 %17, i2 %lsu_qsize_i1}
    %19 = const time 0s 1e
    drv {i5, i1, i3, i2}$ %laq_in, %18, %19
    %lsu_qvalid_i1 = prb i1$ %lsu_qvalid_i
    %lsu_qwrite1 = prb i1$ %lsu_qwrite
    %laq_full1 = prb i1$ %laq_full
    %20 = not i1 %laq_full1
    %21 = or i1 %lsu_qwrite1, %20
    %22 = and i1 %lsu_qvalid_i1, %21
    %23 = const time 0s 1e
    drv i1$ %data_qvalid_o, %22, %23
    %lsu_qwrite2 = prb i1$ %lsu_qwrite
    %24 = const time 0s 1e
    drv i1$ %data_qwrite_o, %lsu_qwrite2, %24
    %25 = const i32 0
    %26 = const i3 0
    %27 = inss i32 %25, i3 %26, 0, 3
    %lsu_qaddr_i2 = prb i32$ %lsu_qaddr_i
    %28 = const i2 3
    %29 = const i32 0
    %30 = shr i32 %lsu_qaddr_i2, i32 %29, i2 %28
    %31 = exts i29, i32 %30, 0, 29
    %32 = inss i32 %27, i29 %31, 3, 29
    %33 = const time 0s 1e
    drv i32$ %data_qaddr_o, %32, %33
    %lsu_qamo_i1 = prb i4$ %lsu_qamo_i
    %34 = const time 0s 1e
    drv i4$ %data_qamo_o, %lsu_qamo_i1, %34
    %data_qvalid_o1 = prb i1$ %data_qvalid_o
    %data_qready_i1 = prb i1$ %data_qready_i
    %35 = not i1 %data_qready_i1
    %36 = and i1 %data_qvalid_o1, %35
    %37 = not i1 %36
    %laq_full2 = prb i1$ %laq_full
    %38 = not i1 %laq_full2
    %39 = and i1 %37, %38
    %40 = const time 0s 1e
    drv i1$ %lsu_qready_o, %39, %40
    %data_qready_i2 = prb i1$ %data_qready_i
    %data_qvalid_o2 = prb i1$ %data_qvalid_o
    %41 = and i1 %data_qready_i2, %data_qvalid_o2
    %laq_full3 = prb i1$ %laq_full
    %42 = not i1 %laq_full3
    %43 = and i1 %41, %42
    %44 = const time 0s 1e
    drv i1$ %laq_push, %43, %44
    %data_pdata_i1 = prb i64$ %data_pdata_i
    %45 = const i6 0
    %46 = const i3 0
    %47 = inss i6 %45, i3 %46, 0, 3
    %laq_out1 = prb {i5, i1, i3, i2}$ %laq_out
    %48 = extf i3, {i5, i1, i3, i2} %laq_out1, 2
    %49 = inss i6 %47, i3 %48, 3, 3
    %50 = const i64 0
    %51 = shr i64 %data_pdata_i1, i64 %50, i6 %49
    %52 = const time 0s 1e
    drv i64$ %shifted_data, %51, %52
    %data_perror_i1 = prb i1$ %data_perror_i
    %53 = const time 0s 1e
    drv i1$ %lsu_perror_o, %data_perror_i1, %53
    %ld_result1 = prb i64$ %ld_result
    %54 = const time 0s 1e
    drv i64$ %lsu_pdata_o, %ld_result1, %54
    %laq_out2 = prb {i5, i1, i3, i2}$ %laq_out
    %55 = extf i5, {i5, i1, i3, i2} %laq_out2, 0
    %56 = const time 0s 1e
    drv i5$ %lsu_ptag_o, %55, %56
    %data_pvalid_i1 = prb i1$ %data_pvalid_i
    %57 = const time 0s 1e
    drv i1$ %lsu_pvalid_o, %data_pvalid_i1, %57
    %lsu_pready_i1 = prb i1$ %lsu_pready_i
    %58 = const time 0s 1e
    drv i1$ %data_pready_o, %lsu_pready_i1, %58
    %clk_i1 = prb i1$ %clk_i
    %59 = const i1 0
    %60 = sig i1 %59
    %61 = const time 0s 1e
    drv i1$ %60, %clk_i1, %61
    %rst_i1 = prb i1$ %rst_i
    %62 = not i1 %rst_i1
    %63 = const i1 0
    %64 = sig i1 %63
    %65 = const time 0s 1e
    drv i1$ %64, %62, %65
    %66 = const i1 0
    %67 = const i1 0
    %68 = sig i1 %67
    %69 = const time 0s 1e
    drv i1$ %68, %66, %69
    %70 = const i1 0
    %71 = const i1 0
    %72 = sig i1 %71
    %73 = const time 0s 1e
    drv i1$ %72, %70, %73
    %74 = const i1 0
    %75 = sig i1 %74
    %76 = const i1 0
    %77 = sig i1 %76
    %laq_in1 = prb {i5, i1, i3, i2}$ %laq_in
    %78 = const i5 0
    %79 = const i1 0
    %80 = const i3 0
    %81 = const i2 0
    %82 = {i5 %78, i1 %79, i3 %80, i2 %81}
    %83 = sig {i5, i1, i3, i2} %82
    %84 = const time 0s 1e
    drv {i5, i1, i3, i2}$ %83, %laq_in1, %84
    %laq_push1 = prb i1$ %laq_push
    %85 = const i1 0
    %86 = sig i1 %85
    %87 = const time 0s 1e
    drv i1$ %86, %laq_push1, %87
    %data_pvalid_i2 = prb i1$ %data_pvalid_i
    %data_pready_o1 = prb i1$ %data_pready_o
    %88 = and i1 %data_pvalid_i2, %data_pready_o1
    %89 = const i1 0
    %90 = sig i1 %89
    %91 = const time 0s 1e
    drv i1$ %90, %88, %91
    inst @fifo_v3.param6 (i1$ %60, i1$ %64, i1$ %68, i1$ %72, {i5, i1, i3, i2}$ %83, i1$ %86, i1$ %90) -> (i1$ %laq_full, i1$ %75, i1$ %77, {i5, i1, i3, i2}$ %laq_out)
    inst %snitch_lsu.param5.always_comb.2098.5 (i32$ %lsu_qaddr_i, i2$ %lsu_qsize_i) -> (i8$ %data_qstrb_o)
    inst %snitch_lsu.param5.always_comb.2099.5 (i32$ %lsu_qaddr_i, i64$ %lsu_qdata_i) -> (i64$ %data_qdata_o)
    inst %snitch_lsu.param5.always_comb.2105.5 ({i5, i1, i3, i2}$ %laq_out, i64$ %shifted_data) -> (i64$ %ld_result)
}

proc %snitch.param1.always_ff.568.1 (i1$ %clk_i, i1$ %rst_i, i32$ %pc_d) -> (i32$ %pc_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %rst_i1 = prb i1$ %rst_i
    %4 = const i32 65536
    %pc_d1 = prb i32$ %pc_d
    %5 = [i32 %pc_d1, %4]
    %6 = mux [2 x i32] %5, i1 %rst_i1
    %7 = const time 0s 1d
    drv i32$ %pc_q, %6, %7
    br %0
}

proc %snitch.param1.always_ff.569.1 (i1$ %clk_i, i1$ %rst_i, i1$ %wfi_d) -> (i1$ %wfi_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %rst_i1 = prb i1$ %rst_i
    %4 = const i1 0
    %wfi_d1 = prb i1$ %wfi_d
    %5 = [i1 %wfi_d1, %4]
    %6 = mux [2 x i1] %5, i1 %rst_i1
    %7 = const time 0s 1d
    drv i1$ %wfi_q, %6, %7
    br %0
}

proc %snitch.param1.always_ff.570.1 (i1$ %clk_i, i1$ %rst_i, i32$ %sb_d) -> (i32$ %sb_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %rst_i1 = prb i1$ %rst_i
    %4 = const i32 0
    %sb_d1 = prb i32$ %sb_d
    %5 = [i32 %sb_d1, %4]
    %6 = mux [2 x i32] %5, i1 %rst_i1
    %7 = const time 0s 1d
    drv i32$ %sb_q, %6, %7
    br %0
}

proc %snitch.param1.always_ff.571.1 (i1$ %clk_i, i1$ %rst_i, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d) -> ({i3, {i1, i1, i1, i1, i1}}$ %fcsr_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %rst_i1 = prb i1$ %rst_i
    %4 = const i8 0
    %5 = const i8 0
    %6 = const i5 0
    %fcsr_d1 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %7 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d1, 1
    %8 = extf i1, {i1, i1, i1, i1, i1} %7, 4
    %9 = inss i5 %6, i1 %8, 0, 1
    %fcsr_d2 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %10 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d2, 1
    %11 = extf i1, {i1, i1, i1, i1, i1} %10, 3
    %12 = inss i5 %9, i1 %11, 1, 1
    %fcsr_d3 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %13 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d3, 1
    %14 = extf i1, {i1, i1, i1, i1, i1} %13, 2
    %15 = inss i5 %12, i1 %14, 2, 1
    %fcsr_d4 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %16 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d4, 1
    %17 = extf i1, {i1, i1, i1, i1, i1} %16, 1
    %18 = inss i5 %15, i1 %17, 3, 1
    %fcsr_d5 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %19 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d5, 1
    %20 = extf i1, {i1, i1, i1, i1, i1} %19, 0
    %21 = inss i5 %18, i1 %20, 4, 1
    %22 = inss i8 %5, i5 %21, 0, 5
    %fcsr_d6 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %23 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d6, 0
    %24 = inss i8 %22, i3 %23, 5, 3
    %25 = [i8 %24, %4]
    %26 = mux [2 x i8] %25, i1 %rst_i1
    %27 = const i32 0
    %28 = const i8 0
    %29 = shr i8 %26, i8 %28, i32 %27
    %30 = exts i3, i8 %29, 0, 3
    %rst_i2 = prb i1$ %rst_i
    %31 = const i8 0
    %32 = const i8 0
    %33 = const i5 0
    %fcsr_d7 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %34 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d7, 1
    %35 = extf i1, {i1, i1, i1, i1, i1} %34, 4
    %36 = inss i5 %33, i1 %35, 0, 1
    %fcsr_d8 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %37 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d8, 1
    %38 = extf i1, {i1, i1, i1, i1, i1} %37, 3
    %39 = inss i5 %36, i1 %38, 1, 1
    %fcsr_d9 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %40 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d9, 1
    %41 = extf i1, {i1, i1, i1, i1, i1} %40, 2
    %42 = inss i5 %39, i1 %41, 2, 1
    %fcsr_d10 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %43 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d10, 1
    %44 = extf i1, {i1, i1, i1, i1, i1} %43, 1
    %45 = inss i5 %42, i1 %44, 3, 1
    %fcsr_d11 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %46 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d11, 1
    %47 = extf i1, {i1, i1, i1, i1, i1} %46, 0
    %48 = inss i5 %45, i1 %47, 4, 1
    %49 = inss i8 %32, i5 %48, 0, 5
    %fcsr_d12 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %50 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d12, 0
    %51 = inss i8 %49, i3 %50, 5, 3
    %52 = [i8 %51, %31]
    %53 = mux [2 x i8] %52, i1 %rst_i2
    %54 = const i32 3
    %55 = const i8 0
    %56 = shr i8 %53, i8 %55, i32 %54
    %57 = exts i5, i8 %56, 0, 5
    %58 = const i32 0
    %59 = const i5 0
    %60 = shr i5 %57, i5 %59, i32 %58
    %61 = exts i1, i5 %60, 0, 1
    %rst_i3 = prb i1$ %rst_i
    %62 = const i8 0
    %63 = const i8 0
    %64 = const i5 0
    %fcsr_d13 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %65 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d13, 1
    %66 = extf i1, {i1, i1, i1, i1, i1} %65, 4
    %67 = inss i5 %64, i1 %66, 0, 1
    %fcsr_d14 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %68 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d14, 1
    %69 = extf i1, {i1, i1, i1, i1, i1} %68, 3
    %70 = inss i5 %67, i1 %69, 1, 1
    %fcsr_d15 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %71 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d15, 1
    %72 = extf i1, {i1, i1, i1, i1, i1} %71, 2
    %73 = inss i5 %70, i1 %72, 2, 1
    %fcsr_d16 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %74 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d16, 1
    %75 = extf i1, {i1, i1, i1, i1, i1} %74, 1
    %76 = inss i5 %73, i1 %75, 3, 1
    %fcsr_d17 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %77 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d17, 1
    %78 = extf i1, {i1, i1, i1, i1, i1} %77, 0
    %79 = inss i5 %76, i1 %78, 4, 1
    %80 = inss i8 %63, i5 %79, 0, 5
    %fcsr_d18 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %81 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d18, 0
    %82 = inss i8 %80, i3 %81, 5, 3
    %83 = [i8 %82, %62]
    %84 = mux [2 x i8] %83, i1 %rst_i3
    %85 = const i32 3
    %86 = const i8 0
    %87 = shr i8 %84, i8 %86, i32 %85
    %88 = exts i5, i8 %87, 0, 5
    %89 = const i32 1
    %90 = const i5 0
    %91 = shr i5 %88, i5 %90, i32 %89
    %92 = exts i1, i5 %91, 0, 1
    %rst_i4 = prb i1$ %rst_i
    %93 = const i8 0
    %94 = const i8 0
    %95 = const i5 0
    %fcsr_d19 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %96 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d19, 1
    %97 = extf i1, {i1, i1, i1, i1, i1} %96, 4
    %98 = inss i5 %95, i1 %97, 0, 1
    %fcsr_d20 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %99 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d20, 1
    %100 = extf i1, {i1, i1, i1, i1, i1} %99, 3
    %101 = inss i5 %98, i1 %100, 1, 1
    %fcsr_d21 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %102 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d21, 1
    %103 = extf i1, {i1, i1, i1, i1, i1} %102, 2
    %104 = inss i5 %101, i1 %103, 2, 1
    %fcsr_d22 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %105 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d22, 1
    %106 = extf i1, {i1, i1, i1, i1, i1} %105, 1
    %107 = inss i5 %104, i1 %106, 3, 1
    %fcsr_d23 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %108 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d23, 1
    %109 = extf i1, {i1, i1, i1, i1, i1} %108, 0
    %110 = inss i5 %107, i1 %109, 4, 1
    %111 = inss i8 %94, i5 %110, 0, 5
    %fcsr_d24 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %112 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d24, 0
    %113 = inss i8 %111, i3 %112, 5, 3
    %114 = [i8 %113, %93]
    %115 = mux [2 x i8] %114, i1 %rst_i4
    %116 = const i32 3
    %117 = const i8 0
    %118 = shr i8 %115, i8 %117, i32 %116
    %119 = exts i5, i8 %118, 0, 5
    %120 = const i32 2
    %121 = const i5 0
    %122 = shr i5 %119, i5 %121, i32 %120
    %123 = exts i1, i5 %122, 0, 1
    %rst_i5 = prb i1$ %rst_i
    %124 = const i8 0
    %125 = const i8 0
    %126 = const i5 0
    %fcsr_d25 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %127 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d25, 1
    %128 = extf i1, {i1, i1, i1, i1, i1} %127, 4
    %129 = inss i5 %126, i1 %128, 0, 1
    %fcsr_d26 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %130 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d26, 1
    %131 = extf i1, {i1, i1, i1, i1, i1} %130, 3
    %132 = inss i5 %129, i1 %131, 1, 1
    %fcsr_d27 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %133 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d27, 1
    %134 = extf i1, {i1, i1, i1, i1, i1} %133, 2
    %135 = inss i5 %132, i1 %134, 2, 1
    %fcsr_d28 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %136 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d28, 1
    %137 = extf i1, {i1, i1, i1, i1, i1} %136, 1
    %138 = inss i5 %135, i1 %137, 3, 1
    %fcsr_d29 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %139 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d29, 1
    %140 = extf i1, {i1, i1, i1, i1, i1} %139, 0
    %141 = inss i5 %138, i1 %140, 4, 1
    %142 = inss i8 %125, i5 %141, 0, 5
    %fcsr_d30 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %143 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d30, 0
    %144 = inss i8 %142, i3 %143, 5, 3
    %145 = [i8 %144, %124]
    %146 = mux [2 x i8] %145, i1 %rst_i5
    %147 = const i32 3
    %148 = const i8 0
    %149 = shr i8 %146, i8 %148, i32 %147
    %150 = exts i5, i8 %149, 0, 5
    %151 = const i32 3
    %152 = const i5 0
    %153 = shr i5 %150, i5 %152, i32 %151
    %154 = exts i1, i5 %153, 0, 1
    %rst_i6 = prb i1$ %rst_i
    %155 = const i8 0
    %156 = const i8 0
    %157 = const i5 0
    %fcsr_d31 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %158 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d31, 1
    %159 = extf i1, {i1, i1, i1, i1, i1} %158, 4
    %160 = inss i5 %157, i1 %159, 0, 1
    %fcsr_d32 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %161 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d32, 1
    %162 = extf i1, {i1, i1, i1, i1, i1} %161, 3
    %163 = inss i5 %160, i1 %162, 1, 1
    %fcsr_d33 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %164 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d33, 1
    %165 = extf i1, {i1, i1, i1, i1, i1} %164, 2
    %166 = inss i5 %163, i1 %165, 2, 1
    %fcsr_d34 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %167 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d34, 1
    %168 = extf i1, {i1, i1, i1, i1, i1} %167, 1
    %169 = inss i5 %166, i1 %168, 3, 1
    %fcsr_d35 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %170 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_d35, 1
    %171 = extf i1, {i1, i1, i1, i1, i1} %170, 0
    %172 = inss i5 %169, i1 %171, 4, 1
    %173 = inss i8 %156, i5 %172, 0, 5
    %fcsr_d36 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d
    %174 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_d36, 0
    %175 = inss i8 %173, i3 %174, 5, 3
    %176 = [i8 %175, %155]
    %177 = mux [2 x i8] %176, i1 %rst_i6
    %178 = const i32 3
    %179 = const i8 0
    %180 = shr i8 %177, i8 %179, i32 %178
    %181 = exts i5, i8 %180, 0, 5
    %182 = const i32 4
    %183 = const i5 0
    %184 = shr i5 %181, i5 %183, i32 %182
    %185 = exts i1, i5 %184, 0, 1
    %186 = {i1 %61, i1 %92, i1 %123, i1 %154, i1 %185}
    %187 = {i3 %30, {i1, i1, i1, i1, i1} %186}
    %188 = const time 0s 1d
    drv {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q, %187, %188
    br %0
}

proc %snitch.param1.always_comb.572.1 (i1$ %stall) -> ({i1, i1, i1, i1}$ %core_events_o) {
0:
    br %body
body:
    %1 = const i4 0
    %2 = const i1 0
    %3 = inss i4 %1, i1 %2, 0, 1
    %4 = const i32 0
    %5 = const i4 0
    %6 = shr i4 %3, i4 %5, i32 %4
    %7 = exts i1, i4 %6, 0, 1
    %8 = const i4 0
    %9 = const i1 0
    %10 = inss i4 %8, i1 %9, 0, 1
    %11 = const i32 1
    %12 = const i4 0
    %13 = shr i4 %10, i4 %12, i32 %11
    %14 = exts i1, i4 %13, 0, 1
    %15 = const i4 0
    %16 = const i1 0
    %17 = inss i4 %15, i1 %16, 0, 1
    %18 = const i32 2
    %19 = const i4 0
    %20 = shr i4 %17, i4 %19, i32 %18
    %21 = exts i1, i4 %20, 0, 1
    %22 = const i4 0
    %23 = const i1 0
    %24 = inss i4 %22, i1 %23, 0, 1
    %25 = const i32 3
    %26 = const i4 0
    %27 = shr i4 %24, i4 %26, i32 %25
    %28 = exts i1, i4 %27, 0, 1
    %29 = {i1 %7, i1 %14, i1 %21, i1 %28}
    %30 = const time 0s 1e
    drv {i1, i1, i1, i1}$ %core_events_o, %29, %30
    %31 = extf i1$, {i1, i1, i1, i1}$ %core_events_o, 3
    %stall1 = prb i1$ %stall
    %32 = not i1 %stall1
    %33 = const time 0s 1e
    drv i1$ %31, %32, %33
    br %check
check:
    wait %body, %stall
}

proc %snitch.param1.always_comb.590.1 (i5$ %acc_pid_i, i5$ %rd, i1$ %stall, i32$ %sb_q, i1$ %is_load, i5$ %lsu_rd, i1$ %retire_load, i1$ %retire_acc, i1$ %acc_register_rd) -> (i32$ %sb_d) {
0:
    br %body
body:
    %sb_q1 = prb i32$ %sb_q
    %1 = const time 0s 1e
    drv i32$ %sb_d, %sb_q1, %1
    %retire_load1 = prb i1$ %retire_load
    br %retire_load1, %if_false, %if_true
check:
    wait %body, %acc_pid_i, %rd, %stall, %sb_q, %is_load, %lsu_rd, %retire_load, %retire_acc, %acc_register_rd
if_true:
    %lsu_rd1 = prb i5$ %lsu_rd
    %2 = const i32 0
    %3 = sig i32 %2
    %4 = shr i32$ %sb_d, i32$ %3, i5 %lsu_rd1
    %5 = exts i1$, i32$ %4, 0, 1
    %6 = const i1 0
    %7 = const time 0s 1e
    drv i1$ %5, %6, %7
    br %if_exit
if_false:
    br %if_exit
if_exit:
    %is_load1 = prb i1$ %is_load
    %acc_register_rd1 = prb i1$ %acc_register_rd
    %8 = or i1 %is_load1, %acc_register_rd1
    %stall1 = prb i1$ %stall
    %9 = not i1 %stall1
    %10 = and i1 %8, %9
    br %10, %if_false1, %if_true1
if_true1:
    %rd1 = prb i5$ %rd
    %11 = const i32 0
    %12 = sig i32 %11
    %13 = shr i32$ %sb_d, i32$ %12, i5 %rd1
    %14 = exts i1$, i32$ %13, 0, 1
    %15 = const i1 1
    %16 = const time 0s 1e
    drv i1$ %14, %15, %16
    br %if_exit1
if_false1:
    br %if_exit1
if_exit1:
    %retire_acc1 = prb i1$ %retire_acc
    br %retire_acc1, %if_false2, %if_true2
if_true2:
    %acc_pid_i1 = prb i5$ %acc_pid_i
    %17 = const i1 0
    %18 = const i5 0
    %19 = shr i5 %acc_pid_i1, i5 %18, i1 %17
    %20 = exts i5, i5 %19, 0, 5
    %21 = const i32 0
    %22 = sig i32 %21
    %23 = shr i32$ %sb_d, i32$ %22, i5 %20
    %24 = exts i1$, i32$ %23, 0, 1
    %25 = const i1 0
    %26 = const time 0s 1e
    drv i1$ %24, %25, %26
    br %if_exit2
if_false2:
    br %if_exit2
if_exit2:
    %27 = const i32 0
    %28 = const i32 0
    %29 = sig i32 %28
    %30 = shr i32$ %sb_d, i32$ %29, i32 %27
    %31 = exts i1$, i32$ %30, 0, 1
    %32 = const i1 0
    %33 = const time 0s 1e
    drv i1$ %31, %32, %33
    br %check
}

proc %snitch.param1.always_comb.600.1 (i1$ %zero_lsb, i32$ %pc_q, i1$ %wfi_q, i32$ %consec_pc, i32$ %alu_result, i1$ %stall, i2$ %next_pc) -> (i32$ %pc_d) {
0:
    br %body
body:
    %pc_q1 = prb i32$ %pc_q
    %1 = const time 0s 1e
    drv i32$ %pc_d, %pc_q1, %1
    %stall1 = prb i1$ %stall
    %2 = not i1 %stall1
    %wfi_q1 = prb i1$ %wfi_q
    %3 = not i1 %wfi_q1
    %4 = and i1 %2, %3
    br %4, %if_false, %if_true
check:
    wait %body, %zero_lsb, %pc_q, %wfi_q, %consec_pc, %alu_result, %stall, %next_pc
if_true:
    %next_pc1 = prb i2$ %next_pc
    %5 = const i1 0
    %6 = const i2 0
    %7 = const i2 3
    %8 = and i2 %next_pc1, %7
    %9 = and i2 %6, %7
    %10 = eq i2 %8, %9
    %11 = or i1 %5, %10
    br %11, %12, %case_body
if_false:
    br %if_exit
if_exit:
    br %check
case_exit:
    br %if_exit
case_body:
    %consec_pc1 = prb i32$ %consec_pc
    %13 = const time 0s 1e
    drv i32$ %pc_d, %consec_pc1, %13
    br %case_exit
12:
    %14 = const i1 0
    %15 = const i2 1
    %16 = const i2 3
    %17 = and i2 %next_pc1, %16
    %18 = and i2 %15, %16
    %19 = eq i2 %17, %18
    %20 = or i1 %14, %19
    br %20, %21, %case_body1
case_body1:
    %alu_result1 = prb i32$ %alu_result
    %22 = const i32 0
    %zero_lsb1 = prb i1$ %zero_lsb
    %23 = not i1 %zero_lsb1
    %24 = inss i32 %22, i1 %23, 0, 1
    %25 = const i1 0
    %26 = const i1 1
    %27 = inss i1 %25, i1 %26, 0, 1
    %28 = const i31 0
    %29 = inss i31 %28, i1 %27, 0, 1
    %30 = inss i31 %29, i1 %27, 1, 1
    %31 = inss i31 %30, i1 %27, 2, 1
    %32 = inss i31 %31, i1 %27, 3, 1
    %33 = inss i31 %32, i1 %27, 4, 1
    %34 = inss i31 %33, i1 %27, 5, 1
    %35 = inss i31 %34, i1 %27, 6, 1
    %36 = inss i31 %35, i1 %27, 7, 1
    %37 = inss i31 %36, i1 %27, 8, 1
    %38 = inss i31 %37, i1 %27, 9, 1
    %39 = inss i31 %38, i1 %27, 10, 1
    %40 = inss i31 %39, i1 %27, 11, 1
    %41 = inss i31 %40, i1 %27, 12, 1
    %42 = inss i31 %41, i1 %27, 13, 1
    %43 = inss i31 %42, i1 %27, 14, 1
    %44 = inss i31 %43, i1 %27, 15, 1
    %45 = inss i31 %44, i1 %27, 16, 1
    %46 = inss i31 %45, i1 %27, 17, 1
    %47 = inss i31 %46, i1 %27, 18, 1
    %48 = inss i31 %47, i1 %27, 19, 1
    %49 = inss i31 %48, i1 %27, 20, 1
    %50 = inss i31 %49, i1 %27, 21, 1
    %51 = inss i31 %50, i1 %27, 22, 1
    %52 = inss i31 %51, i1 %27, 23, 1
    %53 = inss i31 %52, i1 %27, 24, 1
    %54 = inss i31 %53, i1 %27, 25, 1
    %55 = inss i31 %54, i1 %27, 26, 1
    %56 = inss i31 %55, i1 %27, 27, 1
    %57 = inss i31 %56, i1 %27, 28, 1
    %58 = inss i31 %57, i1 %27, 29, 1
    %59 = inss i31 %58, i1 %27, 30, 1
    %60 = inss i32 %24, i31 %59, 1, 31
    %61 = and i32 %alu_result1, %60
    %62 = const time 0s 1e
    drv i32$ %pc_d, %61, %62
    br %case_exit
21:
    %63 = const i1 0
    %64 = const i2 2
    %65 = const i2 3
    %66 = and i2 %next_pc1, %65
    %67 = and i2 %64, %65
    %68 = eq i2 %66, %67
    %69 = or i1 %63, %68
    br %69, %70, %case_body2
case_body2:
    %71 = const i32 65536
    %72 = const time 0s 1e
    drv i32$ %pc_d, %71, %72
    br %case_exit
70:
    br %case_exit
}

proc %snitch.param1.always_comb.604.1 (i32$ %inst_data_i, i1$ %wake_up_sync_i, i1$ %illegal_inst, i1$ %wfi_q, i32$ %uimm, i1$ %valid_instr, i1$ %write_rd, i32$ %csr_rvalue) -> (i1$ %acc_qvalid_o, i1$ %illegal_inst1, i1$ %zero_lsb, i1$ %wfi_d, i1$ %is_load, i1$ %is_store, i1$ %is_signed, i2$ %ls_size, i4$ %ls_amo, i4$ %alu_op, i4$ %opa_select, i4$ %opb_select, i1$ %write_rd1, i1$ %uses_rd, i2$ %next_pc, i2$ %rd_select, i32$ %rd_bypass, i1$ %is_branch, i1$ %csr_en, i1$ %acc_register_rd) {
0:
    %1 = prb i1$ %write_rd1
    %write_rd.shadow = var i1 %1
    %2 = prb i1$ %illegal_inst1
    %illegal_inst.shadow = var i1 %2
    br %body
body:
    %3 = prb i1$ %write_rd1
    st i1* %write_rd.shadow, %3
    %4 = prb i1$ %illegal_inst1
    st i1* %illegal_inst.shadow, %4
    %5 = const i1 0
    %6 = const time 0s 1e
    drv i1$ %illegal_inst1, %5, %6
    st i1* %illegal_inst.shadow, %5
    %7 = const i4 0
    %8 = const time 0s 1e
    drv i4$ %alu_op, %7, %8
    %9 = const i4 0
    %10 = const time 0s 1e
    drv i4$ %opa_select, %9, %10
    %11 = const i4 0
    %12 = const time 0s 1e
    drv i4$ %opb_select, %11, %12
    %13 = const i2 0
    %14 = const time 0s 1e
    drv i2$ %next_pc, %13, %14
    %15 = const i2 0
    %16 = const time 0s 1e
    drv i2$ %rd_select, %15, %16
    %17 = const i1 1
    %18 = const time 0s 1e
    drv i1$ %write_rd1, %17, %18
    st i1* %write_rd.shadow, %17
    %write_rd2 = ld i1* %write_rd.shadow
    %19 = const time 0s 1e
    drv i1$ %uses_rd, %write_rd2, %19
    %20 = const i32 0
    %21 = const i1 0
    %22 = inss i32 %20, i1 %21, 0, 1
    %23 = const time 0s 1e
    drv i32$ %rd_bypass, %22, %23
    %24 = const i1 0
    %25 = const time 0s 1e
    drv i1$ %zero_lsb, %24, %25
    %26 = const i1 0
    %27 = const time 0s 1e
    drv i1$ %is_branch, %26, %27
    %28 = const i1 0
    %29 = const time 0s 1e
    drv i1$ %is_load, %28, %29
    %30 = const i1 0
    %31 = const time 0s 1e
    drv i1$ %is_store, %30, %31
    %32 = const i1 0
    %33 = const time 0s 1e
    drv i1$ %is_signed, %32, %33
    %34 = const i2 0
    %35 = const time 0s 1e
    drv i2$ %ls_size, %34, %35
    %36 = const i4 0
    %37 = const time 0s 1e
    drv i4$ %ls_amo, %36, %37
    %38 = const i1 0
    %39 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %38, %39
    %40 = const i1 0
    %41 = const time 0s 1e
    drv i1$ %acc_register_rd, %40, %41
    %42 = const i1 0
    %43 = const time 0s 1e
    drv i1$ %csr_en, %42, %43
    %wake_up_sync_i1 = prb i1$ %wake_up_sync_i
    %44 = const i1 0
    %wfi_q1 = prb i1$ %wfi_q
    %45 = [i1 %wfi_q1, %44]
    %46 = mux [2 x i1] %45, i1 %wake_up_sync_i1
    %47 = const time 0s 1e
    drv i1$ %wfi_d, %46, %47
    %inst_data_i1 = prb i32$ %inst_data_i
    %48 = const i1 0
    %49 = const i32 51
    %50 = const i32 4261441663
    %51 = and i32 %inst_data_i1, %50
    %52 = and i32 %49, %50
    %53 = eq i32 %51, %52
    %54 = or i1 %48, %53
    br %54, %55, %case_body
check:
    wait %body, %inst_data_i, %wake_up_sync_i, %illegal_inst1, %wfi_q, %uimm, %valid_instr, %write_rd1, %csr_rvalue
case_exit:
    %illegal_inst2 = ld i1* %illegal_inst.shadow
    br %illegal_inst2, %if_false, %if_true
case_body:
    %56 = const i4 1
    %57 = const time 0s 1e
    drv i4$ %opa_select, %56, %57
    %58 = const i4 1
    %59 = const time 0s 1e
    drv i4$ %opb_select, %58, %59
    br %case_exit
55:
    %60 = const i1 0
    %61 = const i32 19
    %62 = const i32 28799
    %63 = and i32 %inst_data_i1, %62
    %64 = and i32 %61, %62
    %65 = eq i32 %63, %64
    %66 = or i1 %60, %65
    br %66, %67, %case_body1
case_body1:
    %68 = const i4 1
    %69 = const time 0s 1e
    drv i4$ %opa_select, %68, %69
    %70 = const i4 2
    %71 = const time 0s 1e
    drv i4$ %opb_select, %70, %71
    br %case_exit
67:
    %72 = const i1 0
    %73 = const i32 1073741875
    %74 = const i32 4261441663
    %75 = and i32 %inst_data_i1, %74
    %76 = and i32 %73, %74
    %77 = eq i32 %75, %76
    %78 = or i1 %72, %77
    br %78, %79, %case_body2
case_body2:
    %80 = const i4 1
    %81 = const time 0s 1e
    drv i4$ %alu_op, %80, %81
    %82 = const i4 1
    %83 = const time 0s 1e
    drv i4$ %opa_select, %82, %83
    %84 = const i4 1
    %85 = const time 0s 1e
    drv i4$ %opb_select, %84, %85
    br %case_exit
79:
    %86 = const i1 0
    %87 = const i32 16435
    %88 = const i32 4261441663
    %89 = and i32 %inst_data_i1, %88
    %90 = and i32 %87, %88
    %91 = eq i32 %89, %90
    %92 = or i1 %86, %91
    br %92, %93, %case_body3
case_body3:
    %94 = const i4 1
    %95 = const time 0s 1e
    drv i4$ %opa_select, %94, %95
    %96 = const i4 1
    %97 = const time 0s 1e
    drv i4$ %opb_select, %96, %97
    %98 = const i4 7
    %99 = const time 0s 1e
    drv i4$ %alu_op, %98, %99
    br %case_exit
93:
    %100 = const i1 0
    %101 = const i32 16403
    %102 = const i32 28799
    %103 = and i32 %inst_data_i1, %102
    %104 = and i32 %101, %102
    %105 = eq i32 %103, %104
    %106 = or i1 %100, %105
    br %106, %107, %case_body4
case_body4:
    %108 = const i4 7
    %109 = const time 0s 1e
    drv i4$ %alu_op, %108, %109
    %110 = const i4 1
    %111 = const time 0s 1e
    drv i4$ %opa_select, %110, %111
    %112 = const i4 2
    %113 = const time 0s 1e
    drv i4$ %opb_select, %112, %113
    br %case_exit
107:
    %114 = const i1 0
    %115 = const i32 24627
    %116 = const i32 4261441663
    %117 = and i32 %inst_data_i1, %116
    %118 = and i32 %115, %116
    %119 = eq i32 %117, %118
    %120 = or i1 %114, %119
    br %120, %121, %case_body5
case_body5:
    %122 = const i4 1
    %123 = const time 0s 1e
    drv i4$ %opa_select, %122, %123
    %124 = const i4 1
    %125 = const time 0s 1e
    drv i4$ %opb_select, %124, %125
    %126 = const i4 8
    %127 = const time 0s 1e
    drv i4$ %alu_op, %126, %127
    br %case_exit
121:
    %128 = const i1 0
    %129 = const i32 24595
    %130 = const i32 28799
    %131 = and i32 %inst_data_i1, %130
    %132 = and i32 %129, %130
    %133 = eq i32 %131, %132
    %134 = or i1 %128, %133
    br %134, %135, %case_body6
case_body6:
    %136 = const i4 8
    %137 = const time 0s 1e
    drv i4$ %alu_op, %136, %137
    %138 = const i4 1
    %139 = const time 0s 1e
    drv i4$ %opa_select, %138, %139
    %140 = const i4 2
    %141 = const time 0s 1e
    drv i4$ %opb_select, %140, %141
    br %case_exit
135:
    %142 = const i1 0
    %143 = const i32 28723
    %144 = const i32 4261441663
    %145 = and i32 %inst_data_i1, %144
    %146 = and i32 %143, %144
    %147 = eq i32 %145, %146
    %148 = or i1 %142, %147
    br %148, %149, %case_body7
case_body7:
    %150 = const i4 9
    %151 = const time 0s 1e
    drv i4$ %alu_op, %150, %151
    %152 = const i4 1
    %153 = const time 0s 1e
    drv i4$ %opa_select, %152, %153
    %154 = const i4 1
    %155 = const time 0s 1e
    drv i4$ %opb_select, %154, %155
    br %case_exit
149:
    %156 = const i1 0
    %157 = const i32 28691
    %158 = const i32 28799
    %159 = and i32 %inst_data_i1, %158
    %160 = and i32 %157, %158
    %161 = eq i32 %159, %160
    %162 = or i1 %156, %161
    br %162, %163, %case_body8
case_body8:
    %164 = const i4 9
    %165 = const time 0s 1e
    drv i4$ %alu_op, %164, %165
    %166 = const i4 1
    %167 = const time 0s 1e
    drv i4$ %opa_select, %166, %167
    %168 = const i4 2
    %169 = const time 0s 1e
    drv i4$ %opb_select, %168, %169
    br %case_exit
163:
    %170 = const i1 0
    %171 = const i32 8243
    %172 = const i32 4261441663
    %173 = and i32 %inst_data_i1, %172
    %174 = and i32 %171, %172
    %175 = eq i32 %173, %174
    %176 = or i1 %170, %175
    br %176, %177, %case_body9
case_body9:
    %178 = const i4 2
    %179 = const time 0s 1e
    drv i4$ %alu_op, %178, %179
    %180 = const i4 1
    %181 = const time 0s 1e
    drv i4$ %opa_select, %180, %181
    %182 = const i4 1
    %183 = const time 0s 1e
    drv i4$ %opb_select, %182, %183
    br %case_exit
177:
    %184 = const i1 0
    %185 = const i32 8211
    %186 = const i32 28799
    %187 = and i32 %inst_data_i1, %186
    %188 = and i32 %185, %186
    %189 = eq i32 %187, %188
    %190 = or i1 %184, %189
    br %190, %191, %case_body10
case_body10:
    %192 = const i4 2
    %193 = const time 0s 1e
    drv i4$ %alu_op, %192, %193
    %194 = const i4 1
    %195 = const time 0s 1e
    drv i4$ %opa_select, %194, %195
    %196 = const i4 2
    %197 = const time 0s 1e
    drv i4$ %opb_select, %196, %197
    br %case_exit
191:
    %198 = const i1 0
    %199 = const i32 12339
    %200 = const i32 4261441663
    %201 = and i32 %inst_data_i1, %200
    %202 = and i32 %199, %200
    %203 = eq i32 %201, %202
    %204 = or i1 %198, %203
    br %204, %205, %case_body11
case_body11:
    %206 = const i4 3
    %207 = const time 0s 1e
    drv i4$ %alu_op, %206, %207
    %208 = const i4 1
    %209 = const time 0s 1e
    drv i4$ %opa_select, %208, %209
    %210 = const i4 1
    %211 = const time 0s 1e
    drv i4$ %opb_select, %210, %211
    br %case_exit
205:
    %212 = const i1 0
    %213 = const i32 12307
    %214 = const i32 28799
    %215 = and i32 %inst_data_i1, %214
    %216 = and i32 %213, %214
    %217 = eq i32 %215, %216
    %218 = or i1 %212, %217
    br %218, %219, %case_body12
case_body12:
    %220 = const i4 3
    %221 = const time 0s 1e
    drv i4$ %alu_op, %220, %221
    %222 = const i4 1
    %223 = const time 0s 1e
    drv i4$ %opa_select, %222, %223
    %224 = const i4 2
    %225 = const time 0s 1e
    drv i4$ %opb_select, %224, %225
    br %case_exit
219:
    %226 = const i1 0
    %227 = const i32 4147
    %228 = const i32 4261441663
    %229 = and i32 %inst_data_i1, %228
    %230 = and i32 %227, %228
    %231 = eq i32 %229, %230
    %232 = or i1 %226, %231
    br %232, %233, %case_body13
case_body13:
    %234 = const i4 4
    %235 = const time 0s 1e
    drv i4$ %alu_op, %234, %235
    %236 = const i4 1
    %237 = const time 0s 1e
    drv i4$ %opa_select, %236, %237
    %238 = const i4 1
    %239 = const time 0s 1e
    drv i4$ %opb_select, %238, %239
    br %case_exit
233:
    %240 = const i1 0
    %241 = const i32 20531
    %242 = const i32 4261441663
    %243 = and i32 %inst_data_i1, %242
    %244 = and i32 %241, %242
    %245 = eq i32 %243, %244
    %246 = or i1 %240, %245
    br %246, %247, %case_body14
case_body14:
    %248 = const i4 5
    %249 = const time 0s 1e
    drv i4$ %alu_op, %248, %249
    %250 = const i4 1
    %251 = const time 0s 1e
    drv i4$ %opa_select, %250, %251
    %252 = const i4 1
    %253 = const time 0s 1e
    drv i4$ %opb_select, %252, %253
    br %case_exit
247:
    %254 = const i1 0
    %255 = const i32 1073762355
    %256 = const i32 4261441663
    %257 = and i32 %inst_data_i1, %256
    %258 = and i32 %255, %256
    %259 = eq i32 %257, %258
    %260 = or i1 %254, %259
    br %260, %261, %case_body15
case_body15:
    %262 = const i4 6
    %263 = const time 0s 1e
    drv i4$ %alu_op, %262, %263
    %264 = const i4 1
    %265 = const time 0s 1e
    drv i4$ %opa_select, %264, %265
    %266 = const i4 1
    %267 = const time 0s 1e
    drv i4$ %opb_select, %266, %267
    br %case_exit
261:
    %268 = const i1 0
    %269 = const i32 4115
    %270 = const i32 4227887231
    %271 = and i32 %inst_data_i1, %270
    %272 = and i32 %269, %270
    %273 = eq i32 %271, %272
    %274 = or i1 %268, %273
    br %274, %275, %case_body16
case_body16:
    %276 = const i4 4
    %277 = const time 0s 1e
    drv i4$ %alu_op, %276, %277
    %278 = const i4 1
    %279 = const time 0s 1e
    drv i4$ %opa_select, %278, %279
    %280 = const i4 2
    %281 = const time 0s 1e
    drv i4$ %opb_select, %280, %281
    br %case_exit
275:
    %282 = const i1 0
    %283 = const i32 20499
    %284 = const i32 4227887231
    %285 = and i32 %inst_data_i1, %284
    %286 = and i32 %283, %284
    %287 = eq i32 %285, %286
    %288 = or i1 %282, %287
    br %288, %289, %case_body17
case_body17:
    %290 = const i4 5
    %291 = const time 0s 1e
    drv i4$ %alu_op, %290, %291
    %292 = const i4 1
    %293 = const time 0s 1e
    drv i4$ %opa_select, %292, %293
    %294 = const i4 2
    %295 = const time 0s 1e
    drv i4$ %opb_select, %294, %295
    br %case_exit
289:
    %296 = const i1 0
    %297 = const i32 1073762323
    %298 = const i32 4227887231
    %299 = and i32 %inst_data_i1, %298
    %300 = and i32 %297, %298
    %301 = eq i32 %299, %300
    %302 = or i1 %296, %301
    br %302, %303, %case_body18
case_body18:
    %304 = const i4 6
    %305 = const time 0s 1e
    drv i4$ %alu_op, %304, %305
    %306 = const i4 1
    %307 = const time 0s 1e
    drv i4$ %opa_select, %306, %307
    %308 = const i4 2
    %309 = const time 0s 1e
    drv i4$ %opb_select, %308, %309
    br %case_exit
303:
    %310 = const i1 0
    %311 = const i32 55
    %312 = const i32 127
    %313 = and i32 %inst_data_i1, %312
    %314 = and i32 %311, %312
    %315 = eq i32 %313, %314
    %316 = or i1 %310, %315
    br %316, %317, %case_body19
case_body19:
    %318 = const i4 0
    %319 = const time 0s 1e
    drv i4$ %opa_select, %318, %319
    %320 = const i4 0
    %321 = const time 0s 1e
    drv i4$ %opb_select, %320, %321
    %322 = const i2 2
    %323 = const time 0s 1e
    drv i2$ %rd_select, %322, %323
    %uimm1 = prb i32$ %uimm
    %324 = const time 0s 1e
    drv i32$ %rd_bypass, %uimm1, %324
    br %case_exit
317:
    %325 = const i1 0
    %326 = const i32 23
    %327 = const i32 127
    %328 = and i32 %inst_data_i1, %327
    %329 = and i32 %326, %327
    %330 = eq i32 %328, %329
    %331 = or i1 %325, %330
    br %331, %332, %case_body20
case_body20:
    %333 = const i4 3
    %334 = const time 0s 1e
    drv i4$ %opa_select, %333, %334
    %335 = const i4 7
    %336 = const time 0s 1e
    drv i4$ %opb_select, %335, %336
    br %case_exit
332:
    %337 = const i1 0
    %338 = const i32 111
    %339 = const i32 127
    %340 = and i32 %inst_data_i1, %339
    %341 = and i32 %338, %339
    %342 = eq i32 %340, %341
    %343 = or i1 %337, %342
    br %343, %344, %case_body21
case_body21:
    %345 = const i2 1
    %346 = const time 0s 1e
    drv i2$ %rd_select, %345, %346
    %347 = const i4 4
    %348 = const time 0s 1e
    drv i4$ %opa_select, %347, %348
    %349 = const i4 7
    %350 = const time 0s 1e
    drv i4$ %opb_select, %349, %350
    %351 = const i2 1
    %352 = const time 0s 1e
    drv i2$ %next_pc, %351, %352
    br %case_exit
344:
    %353 = const i1 0
    %354 = const i32 103
    %355 = const i32 28799
    %356 = and i32 %inst_data_i1, %355
    %357 = and i32 %354, %355
    %358 = eq i32 %356, %357
    %359 = or i1 %353, %358
    br %359, %360, %case_body22
case_body22:
    %361 = const i2 1
    %362 = const time 0s 1e
    drv i2$ %rd_select, %361, %362
    %363 = const i4 1
    %364 = const time 0s 1e
    drv i4$ %opa_select, %363, %364
    %365 = const i4 2
    %366 = const time 0s 1e
    drv i4$ %opb_select, %365, %366
    %367 = const i2 1
    %368 = const time 0s 1e
    drv i2$ %next_pc, %367, %368
    %369 = const i1 1
    %370 = const time 0s 1e
    drv i1$ %zero_lsb, %369, %370
    br %case_exit
360:
    %371 = const i1 0
    %372 = const i32 99
    %373 = const i32 28799
    %374 = and i32 %inst_data_i1, %373
    %375 = and i32 %372, %373
    %376 = eq i32 %374, %375
    %377 = or i1 %371, %376
    br %377, %378, %case_body23
case_body23:
    %379 = const i1 1
    %380 = const time 0s 1e
    drv i1$ %is_branch, %379, %380
    %381 = const i1 0
    %382 = const time 0s 1e
    drv i1$ %write_rd1, %381, %382
    st i1* %write_rd.shadow, %381
    %383 = const i4 11
    %384 = const time 0s 1e
    drv i4$ %alu_op, %383, %384
    %385 = const i4 1
    %386 = const time 0s 1e
    drv i4$ %opa_select, %385, %386
    %387 = const i4 1
    %388 = const time 0s 1e
    drv i4$ %opb_select, %387, %388
    br %case_exit
378:
    %389 = const i1 0
    %390 = const i32 4195
    %391 = const i32 28799
    %392 = and i32 %inst_data_i1, %391
    %393 = and i32 %390, %391
    %394 = eq i32 %392, %393
    %395 = or i1 %389, %394
    br %395, %396, %case_body24
case_body24:
    %397 = const i1 1
    %398 = const time 0s 1e
    drv i1$ %is_branch, %397, %398
    %399 = const i1 0
    %400 = const time 0s 1e
    drv i1$ %write_rd1, %399, %400
    st i1* %write_rd.shadow, %399
    %401 = const i4 12
    %402 = const time 0s 1e
    drv i4$ %alu_op, %401, %402
    %403 = const i4 1
    %404 = const time 0s 1e
    drv i4$ %opa_select, %403, %404
    %405 = const i4 1
    %406 = const time 0s 1e
    drv i4$ %opb_select, %405, %406
    br %case_exit
396:
    %407 = const i1 0
    %408 = const i32 16483
    %409 = const i32 28799
    %410 = and i32 %inst_data_i1, %409
    %411 = and i32 %408, %409
    %412 = eq i32 %410, %411
    %413 = or i1 %407, %412
    br %413, %414, %case_body25
case_body25:
    %415 = const i1 1
    %416 = const time 0s 1e
    drv i1$ %is_branch, %415, %416
    %417 = const i1 0
    %418 = const time 0s 1e
    drv i1$ %write_rd1, %417, %418
    st i1* %write_rd.shadow, %417
    %419 = const i4 2
    %420 = const time 0s 1e
    drv i4$ %alu_op, %419, %420
    %421 = const i4 1
    %422 = const time 0s 1e
    drv i4$ %opa_select, %421, %422
    %423 = const i4 1
    %424 = const time 0s 1e
    drv i4$ %opb_select, %423, %424
    br %case_exit
414:
    %425 = const i1 0
    %426 = const i32 24675
    %427 = const i32 28799
    %428 = and i32 %inst_data_i1, %427
    %429 = and i32 %426, %427
    %430 = eq i32 %428, %429
    %431 = or i1 %425, %430
    br %431, %432, %case_body26
case_body26:
    %433 = const i1 1
    %434 = const time 0s 1e
    drv i1$ %is_branch, %433, %434
    %435 = const i1 0
    %436 = const time 0s 1e
    drv i1$ %write_rd1, %435, %436
    st i1* %write_rd.shadow, %435
    %437 = const i4 3
    %438 = const time 0s 1e
    drv i4$ %alu_op, %437, %438
    %439 = const i4 1
    %440 = const time 0s 1e
    drv i4$ %opa_select, %439, %440
    %441 = const i4 1
    %442 = const time 0s 1e
    drv i4$ %opb_select, %441, %442
    br %case_exit
432:
    %443 = const i1 0
    %444 = const i32 20579
    %445 = const i32 28799
    %446 = and i32 %inst_data_i1, %445
    %447 = and i32 %444, %445
    %448 = eq i32 %446, %447
    %449 = or i1 %443, %448
    br %449, %450, %case_body27
case_body27:
    %451 = const i1 1
    %452 = const time 0s 1e
    drv i1$ %is_branch, %451, %452
    %453 = const i1 0
    %454 = const time 0s 1e
    drv i1$ %write_rd1, %453, %454
    st i1* %write_rd.shadow, %453
    %455 = const i4 13
    %456 = const time 0s 1e
    drv i4$ %alu_op, %455, %456
    %457 = const i4 1
    %458 = const time 0s 1e
    drv i4$ %opa_select, %457, %458
    %459 = const i4 1
    %460 = const time 0s 1e
    drv i4$ %opb_select, %459, %460
    br %case_exit
450:
    %461 = const i1 0
    %462 = const i32 28771
    %463 = const i32 28799
    %464 = and i32 %inst_data_i1, %463
    %465 = and i32 %462, %463
    %466 = eq i32 %464, %465
    %467 = or i1 %461, %466
    br %467, %468, %case_body28
case_body28:
    %469 = const i1 1
    %470 = const time 0s 1e
    drv i1$ %is_branch, %469, %470
    %471 = const i1 0
    %472 = const time 0s 1e
    drv i1$ %write_rd1, %471, %472
    st i1* %write_rd.shadow, %471
    %473 = const i4 14
    %474 = const time 0s 1e
    drv i4$ %alu_op, %473, %474
    %475 = const i4 1
    %476 = const time 0s 1e
    drv i4$ %opa_select, %475, %476
    %477 = const i4 1
    %478 = const time 0s 1e
    drv i4$ %opb_select, %477, %478
    br %case_exit
468:
    %479 = const i1 0
    %480 = const i32 35
    %481 = const i32 28799
    %482 = and i32 %inst_data_i1, %481
    %483 = and i32 %480, %481
    %484 = eq i32 %482, %483
    %485 = or i1 %479, %484
    br %485, %486, %case_body29
case_body29:
    %487 = const i1 0
    %488 = const time 0s 1e
    drv i1$ %write_rd1, %487, %488
    st i1* %write_rd.shadow, %487
    %489 = const i1 1
    %490 = const time 0s 1e
    drv i1$ %is_store, %489, %490
    %491 = const i4 1
    %492 = const time 0s 1e
    drv i4$ %opa_select, %491, %492
    %493 = const i4 5
    %494 = const time 0s 1e
    drv i4$ %opb_select, %493, %494
    br %case_exit
486:
    %495 = const i1 0
    %496 = const i32 4131
    %497 = const i32 28799
    %498 = and i32 %inst_data_i1, %497
    %499 = and i32 %496, %497
    %500 = eq i32 %498, %499
    %501 = or i1 %495, %500
    br %501, %502, %case_body30
case_body30:
    %503 = const i1 0
    %504 = const time 0s 1e
    drv i1$ %write_rd1, %503, %504
    st i1* %write_rd.shadow, %503
    %505 = const i1 1
    %506 = const time 0s 1e
    drv i1$ %is_store, %505, %506
    %507 = const i2 1
    %508 = const time 0s 1e
    drv i2$ %ls_size, %507, %508
    %509 = const i4 1
    %510 = const time 0s 1e
    drv i4$ %opa_select, %509, %510
    %511 = const i4 5
    %512 = const time 0s 1e
    drv i4$ %opb_select, %511, %512
    br %case_exit
502:
    %513 = const i1 0
    %514 = const i32 8227
    %515 = const i32 28799
    %516 = and i32 %inst_data_i1, %515
    %517 = and i32 %514, %515
    %518 = eq i32 %516, %517
    %519 = or i1 %513, %518
    br %519, %520, %case_body31
case_body31:
    %521 = const i1 0
    %522 = const time 0s 1e
    drv i1$ %write_rd1, %521, %522
    st i1* %write_rd.shadow, %521
    %523 = const i1 1
    %524 = const time 0s 1e
    drv i1$ %is_store, %523, %524
    %525 = const i2 2
    %526 = const time 0s 1e
    drv i2$ %ls_size, %525, %526
    %527 = const i4 1
    %528 = const time 0s 1e
    drv i4$ %opa_select, %527, %528
    %529 = const i4 5
    %530 = const time 0s 1e
    drv i4$ %opb_select, %529, %530
    br %case_exit
520:
    %531 = const i1 0
    %532 = const i32 3
    %533 = const i32 28799
    %534 = and i32 %inst_data_i1, %533
    %535 = and i32 %532, %533
    %536 = eq i32 %534, %535
    %537 = or i1 %531, %536
    br %537, %538, %case_body32
case_body32:
    %539 = const i1 0
    %540 = const time 0s 1e
    drv i1$ %write_rd1, %539, %540
    st i1* %write_rd.shadow, %539
    %541 = const i1 1
    %542 = const time 0s 1e
    drv i1$ %uses_rd, %541, %542
    %543 = const i1 1
    %544 = const time 0s 1e
    drv i1$ %is_load, %543, %544
    %545 = const i1 1
    %546 = const time 0s 1e
    drv i1$ %is_signed, %545, %546
    %547 = const i4 1
    %548 = const time 0s 1e
    drv i4$ %opa_select, %547, %548
    %549 = const i4 2
    %550 = const time 0s 1e
    drv i4$ %opb_select, %549, %550
    br %case_exit
538:
    %551 = const i1 0
    %552 = const i32 4099
    %553 = const i32 28799
    %554 = and i32 %inst_data_i1, %553
    %555 = and i32 %552, %553
    %556 = eq i32 %554, %555
    %557 = or i1 %551, %556
    br %557, %558, %case_body33
case_body33:
    %559 = const i1 0
    %560 = const time 0s 1e
    drv i1$ %write_rd1, %559, %560
    st i1* %write_rd.shadow, %559
    %561 = const i1 1
    %562 = const time 0s 1e
    drv i1$ %uses_rd, %561, %562
    %563 = const i1 1
    %564 = const time 0s 1e
    drv i1$ %is_load, %563, %564
    %565 = const i1 1
    %566 = const time 0s 1e
    drv i1$ %is_signed, %565, %566
    %567 = const i2 1
    %568 = const time 0s 1e
    drv i2$ %ls_size, %567, %568
    %569 = const i4 1
    %570 = const time 0s 1e
    drv i4$ %opa_select, %569, %570
    %571 = const i4 2
    %572 = const time 0s 1e
    drv i4$ %opb_select, %571, %572
    br %case_exit
558:
    %573 = const i1 0
    %574 = const i32 8195
    %575 = const i32 28799
    %576 = and i32 %inst_data_i1, %575
    %577 = and i32 %574, %575
    %578 = eq i32 %576, %577
    %579 = or i1 %573, %578
    br %579, %580, %case_body34
case_body34:
    %581 = const i1 0
    %582 = const time 0s 1e
    drv i1$ %write_rd1, %581, %582
    st i1* %write_rd.shadow, %581
    %583 = const i1 1
    %584 = const time 0s 1e
    drv i1$ %uses_rd, %583, %584
    %585 = const i1 1
    %586 = const time 0s 1e
    drv i1$ %is_load, %585, %586
    %587 = const i1 1
    %588 = const time 0s 1e
    drv i1$ %is_signed, %587, %588
    %589 = const i2 2
    %590 = const time 0s 1e
    drv i2$ %ls_size, %589, %590
    %591 = const i4 1
    %592 = const time 0s 1e
    drv i4$ %opa_select, %591, %592
    %593 = const i4 2
    %594 = const time 0s 1e
    drv i4$ %opb_select, %593, %594
    br %case_exit
580:
    %595 = const i1 0
    %596 = const i32 16387
    %597 = const i32 28799
    %598 = and i32 %inst_data_i1, %597
    %599 = and i32 %596, %597
    %600 = eq i32 %598, %599
    %601 = or i1 %595, %600
    br %601, %602, %case_body35
case_body35:
    %603 = const i1 0
    %604 = const time 0s 1e
    drv i1$ %write_rd1, %603, %604
    st i1* %write_rd.shadow, %603
    %605 = const i1 1
    %606 = const time 0s 1e
    drv i1$ %uses_rd, %605, %606
    %607 = const i1 1
    %608 = const time 0s 1e
    drv i1$ %is_load, %607, %608
    %609 = const i4 1
    %610 = const time 0s 1e
    drv i4$ %opa_select, %609, %610
    %611 = const i4 2
    %612 = const time 0s 1e
    drv i4$ %opb_select, %611, %612
    br %case_exit
602:
    %613 = const i1 0
    %614 = const i32 20483
    %615 = const i32 28799
    %616 = and i32 %inst_data_i1, %615
    %617 = and i32 %614, %615
    %618 = eq i32 %616, %617
    %619 = or i1 %613, %618
    br %619, %620, %case_body36
case_body36:
    %621 = const i1 0
    %622 = const time 0s 1e
    drv i1$ %write_rd1, %621, %622
    st i1* %write_rd.shadow, %621
    %623 = const i1 1
    %624 = const time 0s 1e
    drv i1$ %uses_rd, %623, %624
    %625 = const i1 1
    %626 = const time 0s 1e
    drv i1$ %is_load, %625, %626
    %627 = const i2 1
    %628 = const time 0s 1e
    drv i2$ %ls_size, %627, %628
    %629 = const i4 1
    %630 = const time 0s 1e
    drv i4$ %opa_select, %629, %630
    %631 = const i4 2
    %632 = const time 0s 1e
    drv i4$ %opb_select, %631, %632
    br %case_exit
620:
    %633 = const i1 0
    %634 = const i32 4211
    %635 = const i32 28799
    %636 = and i32 %inst_data_i1, %635
    %637 = and i32 %634, %635
    %638 = eq i32 %636, %637
    %639 = or i1 %633, %638
    br %639, %640, %case_body37
case_body37:
    %641 = const i4 1
    %642 = const time 0s 1e
    drv i4$ %opa_select, %641, %642
    %643 = const i4 0
    %644 = const time 0s 1e
    drv i4$ %opb_select, %643, %644
    %645 = const i2 2
    %646 = const time 0s 1e
    drv i2$ %rd_select, %645, %646
    %csr_rvalue1 = prb i32$ %csr_rvalue
    %647 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue1, %647
    %648 = const i1 1
    %649 = const time 0s 1e
    drv i1$ %csr_en, %648, %649
    br %case_exit
640:
    %650 = const i1 0
    %651 = const i32 20595
    %652 = const i32 28799
    %653 = and i32 %inst_data_i1, %652
    %654 = and i32 %651, %652
    %655 = eq i32 %653, %654
    %656 = or i1 %650, %655
    br %656, %657, %case_body38
case_body38:
    %658 = const i4 9
    %659 = const time 0s 1e
    drv i4$ %opa_select, %658, %659
    %660 = const i4 0
    %661 = const time 0s 1e
    drv i4$ %opb_select, %660, %661
    %662 = const i2 2
    %663 = const time 0s 1e
    drv i2$ %rd_select, %662, %663
    %csr_rvalue2 = prb i32$ %csr_rvalue
    %664 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue2, %664
    %665 = const i1 1
    %666 = const time 0s 1e
    drv i1$ %csr_en, %665, %666
    br %case_exit
657:
    %667 = const i1 0
    %668 = const i32 8307
    %669 = const i32 28799
    %670 = and i32 %inst_data_i1, %669
    %671 = and i32 %668, %669
    %672 = eq i32 %670, %671
    %673 = or i1 %667, %672
    br %673, %674, %case_body39
case_body39:
    %675 = const i4 8
    %676 = const time 0s 1e
    drv i4$ %alu_op, %675, %676
    %677 = const i4 1
    %678 = const time 0s 1e
    drv i4$ %opa_select, %677, %678
    %679 = const i4 8
    %680 = const time 0s 1e
    drv i4$ %opb_select, %679, %680
    %681 = const i2 2
    %682 = const time 0s 1e
    drv i2$ %rd_select, %681, %682
    %csr_rvalue3 = prb i32$ %csr_rvalue
    %683 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue3, %683
    %684 = const i1 1
    %685 = const time 0s 1e
    drv i1$ %csr_en, %684, %685
    br %case_exit
674:
    %686 = const i1 0
    %687 = const i32 24691
    %688 = const i32 28799
    %689 = and i32 %inst_data_i1, %688
    %690 = and i32 %687, %688
    %691 = eq i32 %689, %690
    %692 = or i1 %686, %691
    br %692, %693, %case_body40
case_body40:
    %inst_data_i2 = prb i32$ %inst_data_i
    %694 = const i5 20
    %695 = const i32 0
    %696 = shr i32 %inst_data_i2, i32 %695, i5 %694
    %697 = exts i12, i32 %696, 0, 12
    %698 = const i12 1984
    %699 = neq i12 %697, %698
    br %699, %if_false1, %if_true1
693:
    %700 = const i1 0
    %701 = const i32 12403
    %702 = const i32 28799
    %703 = and i32 %inst_data_i1, %702
    %704 = and i32 %701, %702
    %705 = eq i32 %703, %704
    %706 = or i1 %700, %705
    br %706, %707, %case_body41
if_true1:
    %708 = const i4 8
    %709 = const time 0s 1e
    drv i4$ %alu_op, %708, %709
    %710 = const i4 9
    %711 = const time 0s 1e
    drv i4$ %opa_select, %710, %711
    %712 = const i4 8
    %713 = const time 0s 1e
    drv i4$ %opb_select, %712, %713
    %714 = const i2 2
    %715 = const time 0s 1e
    drv i2$ %rd_select, %714, %715
    %csr_rvalue4 = prb i32$ %csr_rvalue
    %716 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue4, %716
    %717 = const i1 1
    %718 = const time 0s 1e
    drv i1$ %csr_en, %717, %718
    br %if_exit
if_false1:
    %719 = const i1 0
    %720 = const time 0s 1e
    drv i1$ %write_rd1, %719, %720
    st i1* %write_rd.shadow, %719
    %valid_instr1 = prb i1$ %valid_instr
    %721 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr1, %721
    br %if_exit
if_exit:
    br %case_exit
case_body41:
    %722 = const i4 10
    %723 = const time 0s 1e
    drv i4$ %alu_op, %722, %723
    %724 = const i4 1
    %725 = const time 0s 1e
    drv i4$ %opa_select, %724, %725
    %726 = const i4 8
    %727 = const time 0s 1e
    drv i4$ %opb_select, %726, %727
    %728 = const i2 2
    %729 = const time 0s 1e
    drv i2$ %rd_select, %728, %729
    %csr_rvalue5 = prb i32$ %csr_rvalue
    %730 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue5, %730
    %731 = const i1 1
    %732 = const time 0s 1e
    drv i1$ %csr_en, %731, %732
    br %case_exit
707:
    %733 = const i1 0
    %734 = const i32 28787
    %735 = const i32 28799
    %736 = and i32 %inst_data_i1, %735
    %737 = and i32 %734, %735
    %738 = eq i32 %736, %737
    %739 = or i1 %733, %738
    br %739, %740, %case_body42
case_body42:
    %inst_data_i3 = prb i32$ %inst_data_i
    %741 = const i5 20
    %742 = const i32 0
    %743 = shr i32 %inst_data_i3, i32 %742, i5 %741
    %744 = exts i12, i32 %743, 0, 12
    %745 = const i12 1984
    %746 = neq i12 %744, %745
    br %746, %if_false2, %if_true2
740:
    %747 = const i1 0
    %748 = const i32 115
    %749 = const i32 4294967295
    %750 = and i32 %inst_data_i1, %749
    %751 = and i32 %748, %749
    %752 = eq i32 %750, %751
    %753 = or i1 %747, %752
    %754 = const i32 1048691
    %755 = const i32 4294967295
    %756 = and i32 %inst_data_i1, %755
    %757 = and i32 %754, %755
    %758 = eq i32 %756, %757
    %759 = or i1 %753, %758
    br %759, %760, %case_body43
if_true2:
    %761 = const i4 10
    %762 = const time 0s 1e
    drv i4$ %alu_op, %761, %762
    %763 = const i4 9
    %764 = const time 0s 1e
    drv i4$ %opa_select, %763, %764
    %765 = const i4 8
    %766 = const time 0s 1e
    drv i4$ %opb_select, %765, %766
    %767 = const i2 2
    %768 = const time 0s 1e
    drv i2$ %rd_select, %767, %768
    %csr_rvalue6 = prb i32$ %csr_rvalue
    %769 = const time 0s 1e
    drv i32$ %rd_bypass, %csr_rvalue6, %769
    %770 = const i1 1
    %771 = const time 0s 1e
    drv i1$ %csr_en, %770, %771
    br %if_exit1
if_false2:
    %772 = const i1 0
    %773 = const time 0s 1e
    drv i1$ %write_rd1, %772, %773
    st i1* %write_rd.shadow, %772
    %valid_instr2 = prb i1$ %valid_instr
    %774 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr2, %774
    br %if_exit1
if_exit1:
    br %case_exit
case_body43:
    %775 = const i1 0
    %776 = const time 0s 1e
    drv i1$ %write_rd1, %775, %776
    st i1* %write_rd.shadow, %775
    br %case_exit
760:
    %777 = const i1 0
    %778 = const i32 15
    %779 = const i32 28799
    %780 = and i32 %inst_data_i1, %779
    %781 = and i32 %778, %779
    %782 = eq i32 %780, %781
    %783 = or i1 %777, %782
    br %783, %784, %case_body44
case_body44:
    %785 = const i1 0
    %786 = const time 0s 1e
    drv i1$ %write_rd1, %785, %786
    st i1* %write_rd.shadow, %785
    br %case_exit
784:
    %787 = const i1 0
    %788 = const i32 273678451
    %789 = const i32 4294967295
    %790 = and i32 %inst_data_i1, %789
    %791 = and i32 %788, %789
    %792 = eq i32 %790, %791
    %793 = or i1 %787, %792
    br %793, %794, %case_body45
case_body45:
    %795 = const i1 1
    %796 = const time 0s 1e
    drv i1$ %wfi_d, %795, %796
    br %case_exit
794:
    %797 = const i1 0
    %798 = const i32 8239
    %799 = const i32 4160778367
    %800 = and i32 %inst_data_i1, %799
    %801 = and i32 %798, %799
    %802 = eq i32 %800, %801
    %803 = or i1 %797, %802
    br %803, %804, %case_body46
case_body46:
    %805 = const i4 15
    %806 = const time 0s 1e
    drv i4$ %alu_op, %805, %806
    %807 = const i1 0
    %808 = const time 0s 1e
    drv i1$ %write_rd1, %807, %808
    st i1* %write_rd.shadow, %807
    %809 = const i1 1
    %810 = const time 0s 1e
    drv i1$ %uses_rd, %809, %810
    %811 = const i1 1
    %812 = const time 0s 1e
    drv i1$ %is_load, %811, %812
    %813 = const i1 1
    %814 = const time 0s 1e
    drv i1$ %is_signed, %813, %814
    %815 = const i2 2
    %816 = const time 0s 1e
    drv i2$ %ls_size, %815, %816
    %817 = const i4 2
    %818 = const time 0s 1e
    drv i4$ %ls_amo, %817, %818
    %819 = const i4 1
    %820 = const time 0s 1e
    drv i4$ %opa_select, %819, %820
    %821 = const i4 1
    %822 = const time 0s 1e
    drv i4$ %opb_select, %821, %822
    br %case_exit
804:
    %823 = const i1 0
    %824 = const i32 536879151
    %825 = const i32 4160778367
    %826 = and i32 %inst_data_i1, %825
    %827 = and i32 %824, %825
    %828 = eq i32 %826, %827
    %829 = or i1 %823, %828
    br %829, %830, %case_body47
case_body47:
    %831 = const i4 15
    %832 = const time 0s 1e
    drv i4$ %alu_op, %831, %832
    %833 = const i1 0
    %834 = const time 0s 1e
    drv i1$ %write_rd1, %833, %834
    st i1* %write_rd.shadow, %833
    %835 = const i1 1
    %836 = const time 0s 1e
    drv i1$ %uses_rd, %835, %836
    %837 = const i1 1
    %838 = const time 0s 1e
    drv i1$ %is_load, %837, %838
    %839 = const i1 1
    %840 = const time 0s 1e
    drv i1$ %is_signed, %839, %840
    %841 = const i2 2
    %842 = const time 0s 1e
    drv i2$ %ls_size, %841, %842
    %843 = const i4 5
    %844 = const time 0s 1e
    drv i4$ %ls_amo, %843, %844
    %845 = const i4 1
    %846 = const time 0s 1e
    drv i4$ %opa_select, %845, %846
    %847 = const i4 1
    %848 = const time 0s 1e
    drv i4$ %opb_select, %847, %848
    br %case_exit
830:
    %849 = const i1 0
    %850 = const i32 1073750063
    %851 = const i32 4160778367
    %852 = and i32 %inst_data_i1, %851
    %853 = and i32 %850, %851
    %854 = eq i32 %852, %853
    %855 = or i1 %849, %854
    br %855, %856, %case_body48
case_body48:
    %857 = const i4 15
    %858 = const time 0s 1e
    drv i4$ %alu_op, %857, %858
    %859 = const i1 0
    %860 = const time 0s 1e
    drv i1$ %write_rd1, %859, %860
    st i1* %write_rd.shadow, %859
    %861 = const i1 1
    %862 = const time 0s 1e
    drv i1$ %uses_rd, %861, %862
    %863 = const i1 1
    %864 = const time 0s 1e
    drv i1$ %is_load, %863, %864
    %865 = const i1 1
    %866 = const time 0s 1e
    drv i1$ %is_signed, %865, %866
    %867 = const i2 2
    %868 = const time 0s 1e
    drv i2$ %ls_size, %867, %868
    %869 = const i4 4
    %870 = const time 0s 1e
    drv i4$ %ls_amo, %869, %870
    %871 = const i4 1
    %872 = const time 0s 1e
    drv i4$ %opa_select, %871, %872
    %873 = const i4 1
    %874 = const time 0s 1e
    drv i4$ %opb_select, %873, %874
    br %case_exit
856:
    %875 = const i1 0
    %876 = const i32 1610620975
    %877 = const i32 4160778367
    %878 = and i32 %inst_data_i1, %877
    %879 = and i32 %876, %877
    %880 = eq i32 %878, %879
    %881 = or i1 %875, %880
    br %881, %882, %case_body49
case_body49:
    %883 = const i4 15
    %884 = const time 0s 1e
    drv i4$ %alu_op, %883, %884
    %885 = const i1 0
    %886 = const time 0s 1e
    drv i1$ %write_rd1, %885, %886
    st i1* %write_rd.shadow, %885
    %887 = const i1 1
    %888 = const time 0s 1e
    drv i1$ %uses_rd, %887, %888
    %889 = const i1 1
    %890 = const time 0s 1e
    drv i1$ %is_load, %889, %890
    %891 = const i1 1
    %892 = const time 0s 1e
    drv i1$ %is_signed, %891, %892
    %893 = const i2 2
    %894 = const time 0s 1e
    drv i2$ %ls_size, %893, %894
    %895 = const i4 3
    %896 = const time 0s 1e
    drv i4$ %ls_amo, %895, %896
    %897 = const i4 1
    %898 = const time 0s 1e
    drv i4$ %opa_select, %897, %898
    %899 = const i4 1
    %900 = const time 0s 1e
    drv i4$ %opb_select, %899, %900
    br %case_exit
882:
    %901 = const i1 0
    %902 = const i32 2147491887
    %903 = const i32 4160778367
    %904 = and i32 %inst_data_i1, %903
    %905 = and i32 %902, %903
    %906 = eq i32 %904, %905
    %907 = or i1 %901, %906
    br %907, %908, %case_body50
case_body50:
    %909 = const i4 15
    %910 = const time 0s 1e
    drv i4$ %alu_op, %909, %910
    %911 = const i1 0
    %912 = const time 0s 1e
    drv i1$ %write_rd1, %911, %912
    st i1* %write_rd.shadow, %911
    %913 = const i1 1
    %914 = const time 0s 1e
    drv i1$ %uses_rd, %913, %914
    %915 = const i1 1
    %916 = const time 0s 1e
    drv i1$ %is_load, %915, %916
    %917 = const i1 1
    %918 = const time 0s 1e
    drv i1$ %is_signed, %917, %918
    %919 = const i2 2
    %920 = const time 0s 1e
    drv i2$ %ls_size, %919, %920
    %921 = const i4 9
    %922 = const time 0s 1e
    drv i4$ %ls_amo, %921, %922
    %923 = const i4 1
    %924 = const time 0s 1e
    drv i4$ %opa_select, %923, %924
    %925 = const i4 1
    %926 = const time 0s 1e
    drv i4$ %opb_select, %925, %926
    br %case_exit
908:
    %927 = const i1 0
    %928 = const i32 2684362799
    %929 = const i32 4160778367
    %930 = and i32 %inst_data_i1, %929
    %931 = and i32 %928, %929
    %932 = eq i32 %930, %931
    %933 = or i1 %927, %932
    br %933, %934, %case_body51
case_body51:
    %935 = const i4 15
    %936 = const time 0s 1e
    drv i4$ %alu_op, %935, %936
    %937 = const i1 0
    %938 = const time 0s 1e
    drv i1$ %write_rd1, %937, %938
    st i1* %write_rd.shadow, %937
    %939 = const i1 1
    %940 = const time 0s 1e
    drv i1$ %uses_rd, %939, %940
    %941 = const i1 1
    %942 = const time 0s 1e
    drv i1$ %is_load, %941, %942
    %943 = const i1 1
    %944 = const time 0s 1e
    drv i1$ %is_signed, %943, %944
    %945 = const i2 2
    %946 = const time 0s 1e
    drv i2$ %ls_size, %945, %946
    %947 = const i4 6
    %948 = const time 0s 1e
    drv i4$ %ls_amo, %947, %948
    %949 = const i4 1
    %950 = const time 0s 1e
    drv i4$ %opa_select, %949, %950
    %951 = const i4 1
    %952 = const time 0s 1e
    drv i4$ %opb_select, %951, %952
    br %case_exit
934:
    %953 = const i1 0
    %954 = const i32 3221233711
    %955 = const i32 4160778367
    %956 = and i32 %inst_data_i1, %955
    %957 = and i32 %954, %955
    %958 = eq i32 %956, %957
    %959 = or i1 %953, %958
    br %959, %960, %case_body52
case_body52:
    %961 = const i4 15
    %962 = const time 0s 1e
    drv i4$ %alu_op, %961, %962
    %963 = const i1 0
    %964 = const time 0s 1e
    drv i1$ %write_rd1, %963, %964
    st i1* %write_rd.shadow, %963
    %965 = const i1 1
    %966 = const time 0s 1e
    drv i1$ %uses_rd, %965, %966
    %967 = const i1 1
    %968 = const time 0s 1e
    drv i1$ %is_load, %967, %968
    %969 = const i1 1
    %970 = const time 0s 1e
    drv i1$ %is_signed, %969, %970
    %971 = const i2 2
    %972 = const time 0s 1e
    drv i2$ %ls_size, %971, %972
    %973 = const i4 9
    %974 = const time 0s 1e
    drv i4$ %ls_amo, %973, %974
    %975 = const i4 1
    %976 = const time 0s 1e
    drv i4$ %opa_select, %975, %976
    %977 = const i4 1
    %978 = const time 0s 1e
    drv i4$ %opb_select, %977, %978
    br %case_exit
960:
    %979 = const i1 0
    %980 = const i32 3758104623
    %981 = const i32 4160778367
    %982 = and i32 %inst_data_i1, %981
    %983 = and i32 %980, %981
    %984 = eq i32 %982, %983
    %985 = or i1 %979, %984
    br %985, %986, %case_body53
case_body53:
    %987 = const i4 15
    %988 = const time 0s 1e
    drv i4$ %alu_op, %987, %988
    %989 = const i1 0
    %990 = const time 0s 1e
    drv i1$ %write_rd1, %989, %990
    st i1* %write_rd.shadow, %989
    %991 = const i1 1
    %992 = const time 0s 1e
    drv i1$ %uses_rd, %991, %992
    %993 = const i1 1
    %994 = const time 0s 1e
    drv i1$ %is_load, %993, %994
    %995 = const i1 1
    %996 = const time 0s 1e
    drv i1$ %is_signed, %995, %996
    %997 = const i2 2
    %998 = const time 0s 1e
    drv i2$ %ls_size, %997, %998
    %999 = const i4 7
    %1000 = const time 0s 1e
    drv i4$ %ls_amo, %999, %1000
    %1001 = const i4 1
    %1002 = const time 0s 1e
    drv i4$ %opa_select, %1001, %1002
    %1003 = const i4 1
    %1004 = const time 0s 1e
    drv i4$ %opb_select, %1003, %1004
    br %case_exit
986:
    %1005 = const i1 0
    %1006 = const i32 134225967
    %1007 = const i32 4160778367
    %1008 = and i32 %inst_data_i1, %1007
    %1009 = and i32 %1006, %1007
    %1010 = eq i32 %1008, %1009
    %1011 = or i1 %1005, %1010
    br %1011, %1012, %case_body54
case_body54:
    %1013 = const i4 15
    %1014 = const time 0s 1e
    drv i4$ %alu_op, %1013, %1014
    %1015 = const i1 0
    %1016 = const time 0s 1e
    drv i1$ %write_rd1, %1015, %1016
    st i1* %write_rd.shadow, %1015
    %1017 = const i1 1
    %1018 = const time 0s 1e
    drv i1$ %uses_rd, %1017, %1018
    %1019 = const i1 1
    %1020 = const time 0s 1e
    drv i1$ %is_load, %1019, %1020
    %1021 = const i1 1
    %1022 = const time 0s 1e
    drv i1$ %is_signed, %1021, %1022
    %1023 = const i2 2
    %1024 = const time 0s 1e
    drv i2$ %ls_size, %1023, %1024
    %1025 = const i4 1
    %1026 = const time 0s 1e
    drv i4$ %ls_amo, %1025, %1026
    %1027 = const i4 1
    %1028 = const time 0s 1e
    drv i4$ %opa_select, %1027, %1028
    %1029 = const i4 1
    %1030 = const time 0s 1e
    drv i4$ %opb_select, %1029, %1030
    br %case_exit
1012:
    %1031 = const i1 0
    %1032 = const i32 268443695
    %1033 = const i32 4193284223
    %1034 = and i32 %inst_data_i1, %1033
    %1035 = and i32 %1032, %1033
    %1036 = eq i32 %1034, %1035
    %1037 = or i1 %1031, %1036
    br %1037, %1038, %case_body55
case_body55:
    %1039 = const i4 15
    %1040 = const time 0s 1e
    drv i4$ %alu_op, %1039, %1040
    %1041 = const i1 0
    %1042 = const time 0s 1e
    drv i1$ %write_rd1, %1041, %1042
    st i1* %write_rd.shadow, %1041
    %1043 = const i1 1
    %1044 = const time 0s 1e
    drv i1$ %uses_rd, %1043, %1044
    %1045 = const i1 1
    %1046 = const time 0s 1e
    drv i1$ %is_load, %1045, %1046
    %1047 = const i1 1
    %1048 = const time 0s 1e
    drv i1$ %is_signed, %1047, %1048
    %1049 = const i2 2
    %1050 = const time 0s 1e
    drv i2$ %ls_size, %1049, %1050
    %1051 = const i4 10
    %1052 = const time 0s 1e
    drv i4$ %ls_amo, %1051, %1052
    %1053 = const i4 1
    %1054 = const time 0s 1e
    drv i4$ %opa_select, %1053, %1054
    %1055 = const i4 1
    %1056 = const time 0s 1e
    drv i4$ %opb_select, %1055, %1056
    br %case_exit
1038:
    %1057 = const i1 0
    %1058 = const i32 402661423
    %1059 = const i32 4160778367
    %1060 = and i32 %inst_data_i1, %1059
    %1061 = and i32 %1058, %1059
    %1062 = eq i32 %1060, %1061
    %1063 = or i1 %1057, %1062
    br %1063, %1064, %case_body56
case_body56:
    %1065 = const i4 15
    %1066 = const time 0s 1e
    drv i4$ %alu_op, %1065, %1066
    %1067 = const i1 0
    %1068 = const time 0s 1e
    drv i1$ %write_rd1, %1067, %1068
    st i1* %write_rd.shadow, %1067
    %1069 = const i1 1
    %1070 = const time 0s 1e
    drv i1$ %uses_rd, %1069, %1070
    %1071 = const i1 1
    %1072 = const time 0s 1e
    drv i1$ %is_load, %1071, %1072
    %1073 = const i1 1
    %1074 = const time 0s 1e
    drv i1$ %is_signed, %1073, %1074
    %1075 = const i2 2
    %1076 = const time 0s 1e
    drv i2$ %ls_size, %1075, %1076
    %1077 = const i4 11
    %1078 = const time 0s 1e
    drv i4$ %ls_amo, %1077, %1078
    %1079 = const i4 1
    %1080 = const time 0s 1e
    drv i4$ %opa_select, %1079, %1080
    %1081 = const i4 1
    %1082 = const time 0s 1e
    drv i4$ %opb_select, %1081, %1082
    br %case_exit
1064:
    %1083 = const i1 0
    %1084 = const i32 33554483
    %1085 = const i32 4261441663
    %1086 = and i32 %inst_data_i1, %1085
    %1087 = and i32 %1084, %1085
    %1088 = eq i32 %1086, %1087
    %1089 = or i1 %1083, %1088
    %1090 = const i32 33558579
    %1091 = const i32 4261441663
    %1092 = and i32 %inst_data_i1, %1091
    %1093 = and i32 %1090, %1091
    %1094 = eq i32 %1092, %1093
    %1095 = or i1 %1089, %1094
    %1096 = const i32 33562675
    %1097 = const i32 4261441663
    %1098 = and i32 %inst_data_i1, %1097
    %1099 = and i32 %1096, %1097
    %1100 = eq i32 %1098, %1099
    %1101 = or i1 %1095, %1100
    %1102 = const i32 33566771
    %1103 = const i32 4261441663
    %1104 = and i32 %inst_data_i1, %1103
    %1105 = and i32 %1102, %1103
    %1106 = eq i32 %1104, %1105
    %1107 = or i1 %1101, %1106
    %1108 = const i32 33570867
    %1109 = const i32 4261441663
    %1110 = and i32 %inst_data_i1, %1109
    %1111 = and i32 %1108, %1109
    %1112 = eq i32 %1110, %1111
    %1113 = or i1 %1107, %1112
    %1114 = const i32 33574963
    %1115 = const i32 4261441663
    %1116 = and i32 %inst_data_i1, %1115
    %1117 = and i32 %1114, %1115
    %1118 = eq i32 %1116, %1117
    %1119 = or i1 %1113, %1118
    %1120 = const i32 33579059
    %1121 = const i32 4261441663
    %1122 = and i32 %inst_data_i1, %1121
    %1123 = and i32 %1120, %1121
    %1124 = eq i32 %1122, %1123
    %1125 = or i1 %1119, %1124
    %1126 = const i32 33583155
    %1127 = const i32 4261441663
    %1128 = and i32 %inst_data_i1, %1127
    %1129 = and i32 %1126, %1127
    %1130 = eq i32 %1128, %1129
    %1131 = or i1 %1125, %1130
    %1132 = const i32 33554491
    %1133 = const i32 4261441663
    %1134 = and i32 %inst_data_i1, %1133
    %1135 = and i32 %1132, %1133
    %1136 = eq i32 %1134, %1135
    %1137 = or i1 %1131, %1136
    %1138 = const i32 33570875
    %1139 = const i32 4261441663
    %1140 = and i32 %inst_data_i1, %1139
    %1141 = and i32 %1138, %1139
    %1142 = eq i32 %1140, %1141
    %1143 = or i1 %1137, %1142
    %1144 = const i32 33574971
    %1145 = const i32 4261441663
    %1146 = and i32 %inst_data_i1, %1145
    %1147 = and i32 %1144, %1145
    %1148 = eq i32 %1146, %1147
    %1149 = or i1 %1143, %1148
    %1150 = const i32 33579067
    %1151 = const i32 4261441663
    %1152 = and i32 %inst_data_i1, %1151
    %1153 = and i32 %1150, %1151
    %1154 = eq i32 %1152, %1153
    %1155 = or i1 %1149, %1154
    %1156 = const i32 33583163
    %1157 = const i32 4261441663
    %1158 = and i32 %inst_data_i1, %1157
    %1159 = and i32 %1156, %1157
    %1160 = eq i32 %1158, %1159
    %1161 = or i1 %1155, %1160
    br %1161, %1162, %case_body57
case_body57:
    %1163 = const i1 0
    %1164 = const time 0s 1e
    drv i1$ %write_rd1, %1163, %1164
    st i1* %write_rd.shadow, %1163
    %1165 = const i1 1
    %1166 = const time 0s 1e
    drv i1$ %uses_rd, %1165, %1166
    %valid_instr3 = prb i1$ %valid_instr
    %1167 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr3, %1167
    %1168 = const i4 1
    %1169 = const time 0s 1e
    drv i4$ %opa_select, %1168, %1169
    %1170 = const i4 1
    %1171 = const time 0s 1e
    drv i4$ %opb_select, %1170, %1171
    %1172 = const i1 1
    %1173 = const time 0s 1e
    drv i1$ %acc_register_rd, %1172, %1173
    br %case_exit
1162:
    %1174 = const i1 0
    %1175 = const i32 83
    %1176 = const i32 4261412991
    %1177 = and i32 %inst_data_i1, %1176
    %1178 = and i32 %1175, %1176
    %1179 = eq i32 %1177, %1178
    %1180 = or i1 %1174, %1179
    %1181 = const i32 134217811
    %1182 = const i32 4261412991
    %1183 = and i32 %inst_data_i1, %1182
    %1184 = and i32 %1181, %1182
    %1185 = eq i32 %1183, %1184
    %1186 = or i1 %1180, %1185
    %1187 = const i32 268435539
    %1188 = const i32 4261412991
    %1189 = and i32 %inst_data_i1, %1188
    %1190 = and i32 %1187, %1188
    %1191 = eq i32 %1189, %1190
    %1192 = or i1 %1186, %1191
    %1193 = const i32 402653267
    %1194 = const i32 4261412991
    %1195 = and i32 %inst_data_i1, %1194
    %1196 = and i32 %1193, %1194
    %1197 = eq i32 %1195, %1196
    %1198 = or i1 %1192, %1197
    %1199 = const i32 536870995
    %1200 = const i32 4261441663
    %1201 = and i32 %inst_data_i1, %1200
    %1202 = and i32 %1199, %1200
    %1203 = eq i32 %1201, %1202
    %1204 = or i1 %1198, %1203
    %1205 = const i32 536875091
    %1206 = const i32 4261441663
    %1207 = and i32 %inst_data_i1, %1206
    %1208 = and i32 %1205, %1206
    %1209 = eq i32 %1207, %1208
    %1210 = or i1 %1204, %1209
    %1211 = const i32 536879187
    %1212 = const i32 4261441663
    %1213 = and i32 %inst_data_i1, %1212
    %1214 = and i32 %1211, %1212
    %1215 = eq i32 %1213, %1214
    %1216 = or i1 %1210, %1215
    %1217 = const i32 671088723
    %1218 = const i32 4261441663
    %1219 = and i32 %inst_data_i1, %1218
    %1220 = and i32 %1217, %1218
    %1221 = eq i32 %1219, %1220
    %1222 = or i1 %1216, %1221
    %1223 = const i32 671092819
    %1224 = const i32 4261441663
    %1225 = and i32 %inst_data_i1, %1224
    %1226 = and i32 %1223, %1224
    %1227 = eq i32 %1225, %1226
    %1228 = or i1 %1222, %1227
    %1229 = const i32 1476395091
    %1230 = const i32 4293918847
    %1231 = and i32 %inst_data_i1, %1230
    %1232 = and i32 %1229, %1230
    %1233 = eq i32 %1231, %1232
    %1234 = or i1 %1228, %1233
    %1235 = const i32 67
    %1236 = const i32 100663423
    %1237 = and i32 %inst_data_i1, %1236
    %1238 = and i32 %1235, %1236
    %1239 = eq i32 %1237, %1238
    %1240 = or i1 %1234, %1239
    %1241 = const i32 71
    %1242 = const i32 100663423
    %1243 = and i32 %inst_data_i1, %1242
    %1244 = and i32 %1241, %1242
    %1245 = eq i32 %1243, %1244
    %1246 = or i1 %1240, %1245
    %1247 = const i32 75
    %1248 = const i32 100663423
    %1249 = and i32 %inst_data_i1, %1248
    %1250 = and i32 %1247, %1248
    %1251 = eq i32 %1249, %1250
    %1252 = or i1 %1246, %1251
    %1253 = const i32 79
    %1254 = const i32 100663423
    %1255 = and i32 %inst_data_i1, %1254
    %1256 = and i32 %1253, %1254
    %1257 = eq i32 %1255, %1256
    %1258 = or i1 %1252, %1257
    br %1258, %1259, %case_body58
case_body58:
    %1260 = const i1 1
    br %1260, %if_false3, %if_true3
1259:
    %1261 = const i1 0
    %1262 = const i32 2181038131
    %1263 = const i32 4261441663
    %1264 = and i32 %inst_data_i1, %1263
    %1265 = and i32 %1262, %1263
    %1266 = eq i32 %1264, %1265
    %1267 = or i1 %1261, %1266
    %1268 = const i32 2181054515
    %1269 = const i32 4261441663
    %1270 = and i32 %inst_data_i1, %1269
    %1271 = and i32 %1268, %1269
    %1272 = eq i32 %1270, %1271
    %1273 = or i1 %1267, %1272
    %1274 = const i32 2214592563
    %1275 = const i32 4261441663
    %1276 = and i32 %inst_data_i1, %1275
    %1277 = and i32 %1274, %1275
    %1278 = eq i32 %1276, %1277
    %1279 = or i1 %1273, %1278
    %1280 = const i32 2214608947
    %1281 = const i32 4261441663
    %1282 = and i32 %inst_data_i1, %1281
    %1283 = and i32 %1280, %1281
    %1284 = eq i32 %1282, %1283
    %1285 = or i1 %1279, %1284
    %1286 = const i32 2248146995
    %1287 = const i32 4261441663
    %1288 = and i32 %inst_data_i1, %1287
    %1289 = and i32 %1286, %1287
    %1290 = eq i32 %1288, %1289
    %1291 = or i1 %1285, %1290
    %1292 = const i32 2248163379
    %1293 = const i32 4261441663
    %1294 = and i32 %inst_data_i1, %1293
    %1295 = and i32 %1292, %1293
    %1296 = eq i32 %1294, %1295
    %1297 = or i1 %1291, %1296
    %1298 = const i32 2281701427
    %1299 = const i32 4261441663
    %1300 = and i32 %inst_data_i1, %1299
    %1301 = and i32 %1298, %1299
    %1302 = eq i32 %1300, %1301
    %1303 = or i1 %1297, %1302
    %1304 = const i32 2281717811
    %1305 = const i32 4261441663
    %1306 = and i32 %inst_data_i1, %1305
    %1307 = and i32 %1304, %1305
    %1308 = eq i32 %1306, %1307
    %1309 = or i1 %1303, %1308
    %1310 = const i32 2315255859
    %1311 = const i32 4261441663
    %1312 = and i32 %inst_data_i1, %1311
    %1313 = and i32 %1310, %1311
    %1314 = eq i32 %1312, %1313
    %1315 = or i1 %1309, %1314
    %1316 = const i32 2315272243
    %1317 = const i32 4261441663
    %1318 = and i32 %inst_data_i1, %1317
    %1319 = and i32 %1316, %1317
    %1320 = eq i32 %1318, %1319
    %1321 = or i1 %1315, %1320
    %1322 = const i32 2348810291
    %1323 = const i32 4261441663
    %1324 = and i32 %inst_data_i1, %1323
    %1325 = and i32 %1322, %1323
    %1326 = eq i32 %1324, %1325
    %1327 = or i1 %1321, %1326
    %1328 = const i32 2348826675
    %1329 = const i32 4261441663
    %1330 = and i32 %inst_data_i1, %1329
    %1331 = and i32 %1328, %1329
    %1332 = eq i32 %1330, %1331
    %1333 = or i1 %1327, %1332
    %1334 = const i32 2382364723
    %1335 = const i32 4293947519
    %1336 = and i32 %inst_data_i1, %1335
    %1337 = and i32 %1334, %1335
    %1338 = eq i32 %1336, %1337
    %1339 = or i1 %1333, %1338
    %1340 = const i32 2415919155
    %1341 = const i32 4261441663
    %1342 = and i32 %inst_data_i1, %1341
    %1343 = and i32 %1340, %1341
    %1344 = eq i32 %1342, %1343
    %1345 = or i1 %1339, %1344
    %1346 = const i32 2415935539
    %1347 = const i32 4261441663
    %1348 = and i32 %inst_data_i1, %1347
    %1349 = and i32 %1346, %1347
    %1350 = eq i32 %1348, %1349
    %1351 = or i1 %1345, %1350
    %1352 = const i32 2449473587
    %1353 = const i32 4261441663
    %1354 = and i32 %inst_data_i1, %1353
    %1355 = and i32 %1352, %1353
    %1356 = eq i32 %1354, %1355
    %1357 = or i1 %1351, %1356
    %1358 = const i32 2449489971
    %1359 = const i32 4261441663
    %1360 = and i32 %inst_data_i1, %1359
    %1361 = and i32 %1358, %1359
    %1362 = eq i32 %1360, %1361
    %1363 = or i1 %1357, %1362
    %1364 = const i32 2583691315
    %1365 = const i32 4261441663
    %1366 = and i32 %inst_data_i1, %1365
    %1367 = and i32 %1364, %1365
    %1368 = eq i32 %1366, %1367
    %1369 = or i1 %1363, %1368
    %1370 = const i32 2583707699
    %1371 = const i32 4261441663
    %1372 = and i32 %inst_data_i1, %1371
    %1373 = and i32 %1370, %1371
    %1374 = eq i32 %1372, %1373
    %1375 = or i1 %1369, %1374
    %1376 = const i32 2617245747
    %1377 = const i32 4261441663
    %1378 = and i32 %inst_data_i1, %1377
    %1379 = and i32 %1376, %1377
    %1380 = eq i32 %1378, %1379
    %1381 = or i1 %1375, %1380
    %1382 = const i32 2617262131
    %1383 = const i32 4261441663
    %1384 = and i32 %inst_data_i1, %1383
    %1385 = and i32 %1382, %1383
    %1386 = eq i32 %1384, %1385
    %1387 = or i1 %1381, %1386
    %1388 = const i32 2650800179
    %1389 = const i32 4261441663
    %1390 = and i32 %inst_data_i1, %1389
    %1391 = and i32 %1388, %1389
    %1392 = eq i32 %1390, %1391
    %1393 = or i1 %1387, %1392
    %1394 = const i32 2650816563
    %1395 = const i32 4261441663
    %1396 = and i32 %inst_data_i1, %1395
    %1397 = and i32 %1394, %1395
    %1398 = eq i32 %1396, %1397
    %1399 = or i1 %1393, %1398
    %1400 = const i32 2952790067
    %1401 = const i32 4261441663
    %1402 = and i32 %inst_data_i1, %1401
    %1403 = and i32 %1400, %1401
    %1404 = eq i32 %1402, %1403
    %1405 = or i1 %1399, %1404
    %1406 = const i32 3019898931
    %1407 = const i32 4261441663
    %1408 = and i32 %inst_data_i1, %1407
    %1409 = and i32 %1406, %1407
    %1410 = eq i32 %1408, %1409
    %1411 = or i1 %1405, %1410
    br %1411, %1412, %case_body59
if_true3:
    %1413 = const i1 0
    %1414 = const time 0s 1e
    drv i1$ %write_rd1, %1413, %1414
    st i1* %write_rd.shadow, %1413
    %valid_instr4 = prb i1$ %valid_instr
    %1415 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr4, %1415
    br %if_exit2
if_false3:
    %1416 = const i1 1
    %1417 = const time 0s 1e
    drv i1$ %illegal_inst1, %1416, %1417
    st i1* %illegal_inst.shadow, %1416
    br %if_exit2
if_exit2:
    br %case_exit
case_body59:
    %1418 = const i1 1
    %1419 = const i1 1
    %1420 = and i1 %1418, %1419
    %1421 = const i1 1
    %1422 = and i1 %1420, %1421
    br %1422, %if_false4, %if_true4
1412:
    %1423 = const i1 0
    %1424 = const i32 33554515
    %1425 = const i32 4261412991
    %1426 = and i32 %inst_data_i1, %1425
    %1427 = and i32 %1424, %1425
    %1428 = eq i32 %1426, %1427
    %1429 = or i1 %1423, %1428
    %1430 = const i32 167772243
    %1431 = const i32 4261412991
    %1432 = and i32 %inst_data_i1, %1431
    %1433 = and i32 %1430, %1431
    %1434 = eq i32 %1432, %1433
    %1435 = or i1 %1429, %1434
    %1436 = const i32 301989971
    %1437 = const i32 4261412991
    %1438 = and i32 %inst_data_i1, %1437
    %1439 = and i32 %1436, %1437
    %1440 = eq i32 %1438, %1439
    %1441 = or i1 %1435, %1440
    %1442 = const i32 436207699
    %1443 = const i32 4261412991
    %1444 = and i32 %inst_data_i1, %1443
    %1445 = and i32 %1442, %1443
    %1446 = eq i32 %1444, %1445
    %1447 = or i1 %1441, %1446
    %1448 = const i32 570425427
    %1449 = const i32 4261441663
    %1450 = and i32 %inst_data_i1, %1449
    %1451 = and i32 %1448, %1449
    %1452 = eq i32 %1450, %1451
    %1453 = or i1 %1447, %1452
    %1454 = const i32 570429523
    %1455 = const i32 4261441663
    %1456 = and i32 %inst_data_i1, %1455
    %1457 = and i32 %1454, %1455
    %1458 = eq i32 %1456, %1457
    %1459 = or i1 %1453, %1458
    %1460 = const i32 570433619
    %1461 = const i32 4261441663
    %1462 = and i32 %inst_data_i1, %1461
    %1463 = and i32 %1460, %1461
    %1464 = eq i32 %1462, %1463
    %1465 = or i1 %1459, %1464
    %1466 = const i32 704643155
    %1467 = const i32 4261441663
    %1468 = and i32 %inst_data_i1, %1467
    %1469 = and i32 %1466, %1467
    %1470 = eq i32 %1468, %1469
    %1471 = or i1 %1465, %1470
    %1472 = const i32 704647251
    %1473 = const i32 4261441663
    %1474 = and i32 %inst_data_i1, %1473
    %1475 = and i32 %1472, %1473
    %1476 = eq i32 %1474, %1475
    %1477 = or i1 %1471, %1476
    %1478 = const i32 1509949523
    %1479 = const i32 4293918847
    %1480 = and i32 %inst_data_i1, %1479
    %1481 = and i32 %1478, %1479
    %1482 = eq i32 %1480, %1481
    %1483 = or i1 %1477, %1482
    %1484 = const i32 33554499
    %1485 = const i32 100663423
    %1486 = and i32 %inst_data_i1, %1485
    %1487 = and i32 %1484, %1485
    %1488 = eq i32 %1486, %1487
    %1489 = or i1 %1483, %1488
    %1490 = const i32 33554503
    %1491 = const i32 100663423
    %1492 = and i32 %inst_data_i1, %1491
    %1493 = and i32 %1490, %1491
    %1494 = eq i32 %1492, %1493
    %1495 = or i1 %1489, %1494
    %1496 = const i32 33554507
    %1497 = const i32 100663423
    %1498 = and i32 %inst_data_i1, %1497
    %1499 = and i32 %1496, %1497
    %1500 = eq i32 %1498, %1499
    %1501 = or i1 %1495, %1500
    %1502 = const i32 33554511
    %1503 = const i32 100663423
    %1504 = and i32 %inst_data_i1, %1503
    %1505 = and i32 %1502, %1503
    %1506 = eq i32 %1504, %1505
    %1507 = or i1 %1501, %1506
    br %1507, %1508, %case_body60
if_true4:
    %1509 = const i1 0
    %1510 = const time 0s 1e
    drv i1$ %write_rd1, %1509, %1510
    st i1* %write_rd.shadow, %1509
    %valid_instr5 = prb i1$ %valid_instr
    %1511 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr5, %1511
    br %if_exit3
if_false4:
    %1512 = const i1 1
    %1513 = const time 0s 1e
    drv i1$ %illegal_inst1, %1512, %1513
    st i1* %illegal_inst.shadow, %1512
    br %if_exit3
if_exit3:
    br %case_exit
case_body60:
    %1514 = const i1 1
    br %1514, %if_false5, %if_true5
1508:
    %1515 = const i1 0
    %1516 = const i32 1074790483
    %1517 = const i32 4293918847
    %1518 = and i32 %inst_data_i1, %1517
    %1519 = and i32 %1516, %1517
    %1520 = eq i32 %1518, %1519
    %1521 = or i1 %1515, %1520
    %1522 = const i32 1107296339
    %1523 = const i32 4293918847
    %1524 = and i32 %inst_data_i1, %1523
    %1525 = and i32 %1522, %1523
    %1526 = eq i32 %1524, %1525
    %1527 = or i1 %1521, %1526
    br %1527, %1528, %case_body61
if_true5:
    %1529 = const i1 0
    %1530 = const time 0s 1e
    drv i1$ %write_rd1, %1529, %1530
    st i1* %write_rd.shadow, %1529
    %valid_instr6 = prb i1$ %valid_instr
    %1531 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr6, %1531
    br %if_exit4
if_false5:
    %1532 = const i1 1
    %1533 = const time 0s 1e
    drv i1$ %illegal_inst1, %1532, %1533
    st i1* %illegal_inst.shadow, %1532
    br %if_exit4
if_exit4:
    br %case_exit
case_body61:
    %1534 = const i1 1
    %1535 = const i1 1
    %1536 = and i1 %1534, %1535
    br %1536, %if_false6, %if_true6
1528:
    %1537 = const i1 0
    %1538 = const i32 67108947
    %1539 = const i32 4261412991
    %1540 = and i32 %inst_data_i1, %1539
    %1541 = and i32 %1538, %1539
    %1542 = eq i32 %1540, %1541
    %1543 = or i1 %1537, %1542
    %1544 = const i32 201326675
    %1545 = const i32 4261412991
    %1546 = and i32 %inst_data_i1, %1545
    %1547 = and i32 %1544, %1545
    %1548 = eq i32 %1546, %1547
    %1549 = or i1 %1543, %1548
    %1550 = const i32 335544403
    %1551 = const i32 4261412991
    %1552 = and i32 %inst_data_i1, %1551
    %1553 = and i32 %1550, %1551
    %1554 = eq i32 %1552, %1553
    %1555 = or i1 %1549, %1554
    %1556 = const i32 469762131
    %1557 = const i32 4261412991
    %1558 = and i32 %inst_data_i1, %1557
    %1559 = and i32 %1556, %1557
    %1560 = eq i32 %1558, %1559
    %1561 = or i1 %1555, %1560
    %1562 = const i32 1543503955
    %1563 = const i32 4293918847
    %1564 = and i32 %inst_data_i1, %1563
    %1565 = and i32 %1562, %1563
    %1566 = eq i32 %1564, %1565
    %1567 = or i1 %1561, %1566
    %1568 = const i32 67108931
    %1569 = const i32 100663423
    %1570 = and i32 %inst_data_i1, %1569
    %1571 = and i32 %1568, %1569
    %1572 = eq i32 %1570, %1571
    %1573 = or i1 %1567, %1572
    %1574 = const i32 67108935
    %1575 = const i32 100663423
    %1576 = and i32 %inst_data_i1, %1575
    %1577 = and i32 %1574, %1575
    %1578 = eq i32 %1576, %1577
    %1579 = or i1 %1573, %1578
    %1580 = const i32 67108939
    %1581 = const i32 100663423
    %1582 = and i32 %inst_data_i1, %1581
    %1583 = and i32 %1580, %1581
    %1584 = eq i32 %1582, %1583
    %1585 = or i1 %1579, %1584
    %1586 = const i32 67108943
    %1587 = const i32 100663423
    %1588 = and i32 %inst_data_i1, %1587
    %1589 = and i32 %1586, %1587
    %1590 = eq i32 %1588, %1589
    %1591 = or i1 %1585, %1590
    br %1591, %1592, %case_body62
if_true6:
    %1593 = const i1 0
    %1594 = const time 0s 1e
    drv i1$ %write_rd1, %1593, %1594
    st i1* %write_rd.shadow, %1593
    %valid_instr7 = prb i1$ %valid_instr
    %1595 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr7, %1595
    br %if_exit5
if_false6:
    %1596 = const i1 1
    %1597 = const time 0s 1e
    drv i1$ %illegal_inst1, %1596, %1597
    st i1* %illegal_inst.shadow, %1596
    br %if_exit5
if_exit5:
    br %case_exit
case_body62:
    %1598 = const i1 0
    %1599 = const i1 0
    %inst_data_i4 = prb i32$ %inst_data_i
    %1600 = const i4 12
    %1601 = const i32 0
    %1602 = shr i32 %inst_data_i4, i32 %1601, i4 %1600
    %1603 = exts i3, i32 %1602, 0, 3
    %1604 = const i3 0
    %1605 = uge i3 %1603, %1604
    %inst_data_i5 = prb i32$ %inst_data_i
    %1606 = const i4 12
    %1607 = const i32 0
    %1608 = shr i32 %inst_data_i5, i32 %1607, i4 %1606
    %1609 = exts i3, i32 %1608, 0, 3
    %1610 = const i3 4
    %1611 = ule i3 %1609, %1610
    %1612 = and i1 %1605, %1611
    %1613 = or i1 %1599, %1612
    %inst_data_i6 = prb i32$ %inst_data_i
    %1614 = const i4 12
    %1615 = const i32 0
    %1616 = shr i32 %inst_data_i6, i32 %1615, i4 %1614
    %1617 = exts i3, i32 %1616, 0, 3
    %1618 = const i3 7
    %1619 = eq i3 %1617, %1618
    %1620 = or i1 %1613, %1619
    %1621 = and i1 %1598, %1620
    %1622 = const i1 0
    %inst_data_i7 = prb i32$ %inst_data_i
    %1623 = const i4 12
    %1624 = const i32 0
    %1625 = shr i32 %inst_data_i7, i32 %1624, i4 %1623
    %1626 = exts i3, i32 %1625, 0, 3
    %1627 = const i3 5
    %1628 = eq i3 %1626, %1627
    %1629 = and i1 %1622, %1628
    %1630 = or i1 %1621, %1629
    br %1630, %if_false7, %if_true7
1592:
    %1631 = const i1 0
    %1632 = const i32 603979859
    %1633 = const i32 4261441663
    %1634 = and i32 %inst_data_i1, %1633
    %1635 = and i32 %1632, %1633
    %1636 = eq i32 %1634, %1635
    %1637 = or i1 %1631, %1636
    %1638 = const i32 603983955
    %1639 = const i32 4261441663
    %1640 = and i32 %inst_data_i1, %1639
    %1641 = and i32 %1638, %1639
    %1642 = eq i32 %1640, %1641
    %1643 = or i1 %1637, %1642
    %1644 = const i32 603988051
    %1645 = const i32 4261441663
    %1646 = and i32 %inst_data_i1, %1645
    %1647 = and i32 %1644, %1645
    %1648 = eq i32 %1646, %1647
    %1649 = or i1 %1643, %1648
    %1650 = const i32 738197587
    %1651 = const i32 4261441663
    %1652 = and i32 %inst_data_i1, %1651
    %1653 = and i32 %1650, %1651
    %1654 = eq i32 %1652, %1653
    %1655 = or i1 %1649, %1654
    %1656 = const i32 738201683
    %1657 = const i32 4261441663
    %1658 = and i32 %inst_data_i1, %1657
    %1659 = and i32 %1656, %1657
    %1660 = eq i32 %1658, %1659
    %1661 = or i1 %1655, %1660
    br %1661, %1662, %case_body63
if_true7:
    %1663 = const i1 0
    %1664 = const time 0s 1e
    drv i1$ %write_rd1, %1663, %1664
    st i1* %write_rd.shadow, %1663
    %valid_instr8 = prb i1$ %valid_instr
    %1665 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr8, %1665
    br %if_exit6
if_false7:
    %1666 = const i1 1
    %1667 = const time 0s 1e
    drv i1$ %illegal_inst1, %1666, %1667
    st i1* %illegal_inst.shadow, %1666
    br %if_exit6
if_exit6:
    br %case_exit
case_body63:
    %1668 = const i1 0
    br %1668, %if_false8, %if_true8
1662:
    %1669 = const i1 0
    %1670 = const i32 1075839059
    %1671 = const i32 4293947519
    %1672 = and i32 %inst_data_i1, %1671
    %1673 = and i32 %1670, %1671
    %1674 = eq i32 %1672, %1673
    %1675 = or i1 %1669, %1674
    %1676 = const i32 1140850771
    %1677 = const i32 4293918847
    %1678 = and i32 %inst_data_i1, %1677
    %1679 = and i32 %1676, %1677
    %1680 = eq i32 %1678, %1679
    %1681 = or i1 %1675, %1680
    br %1681, %1682, %case_body64
if_true8:
    %1683 = const i1 0
    %1684 = const time 0s 1e
    drv i1$ %write_rd1, %1683, %1684
    st i1* %write_rd.shadow, %1683
    %valid_instr9 = prb i1$ %valid_instr
    %1685 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr9, %1685
    br %if_exit7
if_false8:
    %1686 = const i1 1
    %1687 = const time 0s 1e
    drv i1$ %illegal_inst1, %1686, %1687
    st i1* %illegal_inst.shadow, %1686
    br %if_exit7
if_exit7:
    br %case_exit
case_body64:
    %1688 = const i1 1
    br %1688, %if_false9, %if_true9
1682:
    %1689 = const i1 0
    %1690 = const i32 1109393491
    %1691 = const i32 4293947519
    %1692 = and i32 %inst_data_i1, %1691
    %1693 = and i32 %1690, %1691
    %1694 = eq i32 %1692, %1693
    %1695 = or i1 %1689, %1694
    %1696 = const i32 1141899347
    %1697 = const i32 4293918847
    %1698 = and i32 %inst_data_i1, %1697
    %1699 = and i32 %1696, %1697
    %1700 = eq i32 %1698, %1699
    %1701 = or i1 %1695, %1700
    br %1701, %1702, %case_body65
if_true9:
    %1703 = const i1 0
    %1704 = const i1 0
    %inst_data_i8 = prb i32$ %inst_data_i
    %1705 = const i4 12
    %1706 = const i32 0
    %1707 = shr i32 %inst_data_i8, i32 %1706, i4 %1705
    %1708 = exts i3, i32 %1707, 0, 3
    %1709 = const i3 0
    %1710 = uge i3 %1708, %1709
    %inst_data_i9 = prb i32$ %inst_data_i
    %1711 = const i4 12
    %1712 = const i32 0
    %1713 = shr i32 %inst_data_i9, i32 %1712, i4 %1711
    %1714 = exts i3, i32 %1713, 0, 3
    %1715 = const i3 4
    %1716 = ule i3 %1714, %1715
    %1717 = and i1 %1710, %1716
    %1718 = or i1 %1704, %1717
    %inst_data_i10 = prb i32$ %inst_data_i
    %1719 = const i4 12
    %1720 = const i32 0
    %1721 = shr i32 %inst_data_i10, i32 %1720, i4 %1719
    %1722 = exts i3, i32 %1721, 0, 3
    %1723 = const i3 7
    %1724 = eq i3 %1722, %1723
    %1725 = or i1 %1718, %1724
    %1726 = and i1 %1703, %1725
    %1727 = const i1 0
    %inst_data_i11 = prb i32$ %inst_data_i
    %1728 = const i4 12
    %1729 = const i32 0
    %1730 = shr i32 %inst_data_i11, i32 %1729, i4 %1728
    %1731 = exts i3, i32 %1730, 0, 3
    %1732 = const i3 5
    %1733 = eq i3 %1731, %1732
    %1734 = and i1 %1727, %1733
    %1735 = or i1 %1726, %1734
    br %1735, %if_false10, %if_true10
if_false9:
    %1736 = const i1 1
    %1737 = const time 0s 1e
    drv i1$ %illegal_inst1, %1736, %1737
    st i1* %illegal_inst.shadow, %1736
    br %if_exit8
if_exit8:
    br %case_exit
if_true10:
    %1738 = const i1 0
    %1739 = const time 0s 1e
    drv i1$ %write_rd1, %1738, %1739
    st i1* %write_rd.shadow, %1738
    %valid_instr10 = prb i1$ %valid_instr
    %1740 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr10, %1740
    br %if_exit9
if_false10:
    %1741 = const i1 1
    %1742 = const time 0s 1e
    drv i1$ %illegal_inst1, %1741, %1742
    st i1* %illegal_inst.shadow, %1741
    br %if_exit9
if_exit9:
    br %if_exit8
case_body65:
    %1743 = const i1 1
    br %1743, %if_false11, %if_true11
1702:
    %1744 = const i1 0
    %1745 = const i32 2181046323
    %1746 = const i32 4261441663
    %1747 = and i32 %inst_data_i1, %1746
    %1748 = and i32 %1745, %1746
    %1749 = eq i32 %1747, %1748
    %1750 = or i1 %1744, %1749
    %1751 = const i32 2181062707
    %1752 = const i32 4261441663
    %1753 = and i32 %inst_data_i1, %1752
    %1754 = and i32 %1751, %1752
    %1755 = eq i32 %1753, %1754
    %1756 = or i1 %1750, %1755
    %1757 = const i32 2214600755
    %1758 = const i32 4261441663
    %1759 = and i32 %inst_data_i1, %1758
    %1760 = and i32 %1757, %1758
    %1761 = eq i32 %1759, %1760
    %1762 = or i1 %1756, %1761
    %1763 = const i32 2214617139
    %1764 = const i32 4261441663
    %1765 = and i32 %inst_data_i1, %1764
    %1766 = and i32 %1763, %1764
    %1767 = eq i32 %1765, %1766
    %1768 = or i1 %1762, %1767
    %1769 = const i32 2248155187
    %1770 = const i32 4261441663
    %1771 = and i32 %inst_data_i1, %1770
    %1772 = and i32 %1769, %1770
    %1773 = eq i32 %1771, %1772
    %1774 = or i1 %1768, %1773
    %1775 = const i32 2248171571
    %1776 = const i32 4261441663
    %1777 = and i32 %inst_data_i1, %1776
    %1778 = and i32 %1775, %1776
    %1779 = eq i32 %1777, %1778
    %1780 = or i1 %1774, %1779
    %1781 = const i32 2281709619
    %1782 = const i32 4261441663
    %1783 = and i32 %inst_data_i1, %1782
    %1784 = and i32 %1781, %1782
    %1785 = eq i32 %1783, %1784
    %1786 = or i1 %1780, %1785
    %1787 = const i32 2281726003
    %1788 = const i32 4261441663
    %1789 = and i32 %inst_data_i1, %1788
    %1790 = and i32 %1787, %1788
    %1791 = eq i32 %1789, %1790
    %1792 = or i1 %1786, %1791
    %1793 = const i32 2315264051
    %1794 = const i32 4261441663
    %1795 = and i32 %inst_data_i1, %1794
    %1796 = and i32 %1793, %1794
    %1797 = eq i32 %1795, %1796
    %1798 = or i1 %1792, %1797
    %1799 = const i32 2315280435
    %1800 = const i32 4261441663
    %1801 = and i32 %inst_data_i1, %1800
    %1802 = and i32 %1799, %1800
    %1803 = eq i32 %1801, %1802
    %1804 = or i1 %1798, %1803
    %1805 = const i32 2348818483
    %1806 = const i32 4261441663
    %1807 = and i32 %inst_data_i1, %1806
    %1808 = and i32 %1805, %1806
    %1809 = eq i32 %1807, %1808
    %1810 = or i1 %1804, %1809
    %1811 = const i32 2348834867
    %1812 = const i32 4261441663
    %1813 = and i32 %inst_data_i1, %1812
    %1814 = and i32 %1811, %1812
    %1815 = eq i32 %1813, %1814
    %1816 = or i1 %1810, %1815
    %1817 = const i32 2382372915
    %1818 = const i32 4293947519
    %1819 = and i32 %inst_data_i1, %1818
    %1820 = and i32 %1817, %1818
    %1821 = eq i32 %1819, %1820
    %1822 = or i1 %1816, %1821
    %1823 = const i32 2415927347
    %1824 = const i32 4261441663
    %1825 = and i32 %inst_data_i1, %1824
    %1826 = and i32 %1823, %1824
    %1827 = eq i32 %1825, %1826
    %1828 = or i1 %1822, %1827
    %1829 = const i32 2415943731
    %1830 = const i32 4261441663
    %1831 = and i32 %inst_data_i1, %1830
    %1832 = and i32 %1829, %1830
    %1833 = eq i32 %1831, %1832
    %1834 = or i1 %1828, %1833
    %1835 = const i32 2449481779
    %1836 = const i32 4261441663
    %1837 = and i32 %inst_data_i1, %1836
    %1838 = and i32 %1835, %1836
    %1839 = eq i32 %1837, %1838
    %1840 = or i1 %1834, %1839
    %1841 = const i32 2449498163
    %1842 = const i32 4261441663
    %1843 = and i32 %inst_data_i1, %1842
    %1844 = and i32 %1841, %1842
    %1845 = eq i32 %1843, %1844
    %1846 = or i1 %1840, %1845
    %1847 = const i32 2583699507
    %1848 = const i32 4261441663
    %1849 = and i32 %inst_data_i1, %1848
    %1850 = and i32 %1847, %1848
    %1851 = eq i32 %1849, %1850
    %1852 = or i1 %1846, %1851
    %1853 = const i32 2583715891
    %1854 = const i32 4261441663
    %1855 = and i32 %inst_data_i1, %1854
    %1856 = and i32 %1853, %1854
    %1857 = eq i32 %1855, %1856
    %1858 = or i1 %1852, %1857
    %1859 = const i32 2617253939
    %1860 = const i32 4261441663
    %1861 = and i32 %inst_data_i1, %1860
    %1862 = and i32 %1859, %1860
    %1863 = eq i32 %1861, %1862
    %1864 = or i1 %1858, %1863
    %1865 = const i32 2617270323
    %1866 = const i32 4261441663
    %1867 = and i32 %inst_data_i1, %1866
    %1868 = and i32 %1865, %1866
    %1869 = eq i32 %1867, %1868
    %1870 = or i1 %1864, %1869
    %1871 = const i32 2650808371
    %1872 = const i32 4261441663
    %1873 = and i32 %inst_data_i1, %1872
    %1874 = and i32 %1871, %1872
    %1875 = eq i32 %1873, %1874
    %1876 = or i1 %1870, %1875
    %1877 = const i32 2650824755
    %1878 = const i32 4261441663
    %1879 = and i32 %inst_data_i1, %1878
    %1880 = and i32 %1877, %1878
    %1881 = eq i32 %1879, %1880
    %1882 = or i1 %1876, %1881
    %1883 = const i32 2952798259
    %1884 = const i32 4261441663
    %1885 = and i32 %inst_data_i1, %1884
    %1886 = and i32 %1883, %1884
    %1887 = eq i32 %1885, %1886
    %1888 = or i1 %1882, %1887
    br %1888, %1889, %case_body66
if_true11:
    %1890 = const i1 0
    %1891 = const i1 0
    %inst_data_i12 = prb i32$ %inst_data_i
    %1892 = const i4 12
    %1893 = const i32 0
    %1894 = shr i32 %inst_data_i12, i32 %1893, i4 %1892
    %1895 = exts i3, i32 %1894, 0, 3
    %1896 = const i3 0
    %1897 = uge i3 %1895, %1896
    %inst_data_i13 = prb i32$ %inst_data_i
    %1898 = const i4 12
    %1899 = const i32 0
    %1900 = shr i32 %inst_data_i13, i32 %1899, i4 %1898
    %1901 = exts i3, i32 %1900, 0, 3
    %1902 = const i3 4
    %1903 = ule i3 %1901, %1902
    %1904 = and i1 %1897, %1903
    %1905 = or i1 %1891, %1904
    %inst_data_i14 = prb i32$ %inst_data_i
    %1906 = const i4 12
    %1907 = const i32 0
    %1908 = shr i32 %inst_data_i14, i32 %1907, i4 %1906
    %1909 = exts i3, i32 %1908, 0, 3
    %1910 = const i3 7
    %1911 = eq i3 %1909, %1910
    %1912 = or i1 %1905, %1911
    %1913 = and i1 %1890, %1912
    %1914 = const i1 0
    %inst_data_i15 = prb i32$ %inst_data_i
    %1915 = const i4 12
    %1916 = const i32 0
    %1917 = shr i32 %inst_data_i15, i32 %1916, i4 %1915
    %1918 = exts i3, i32 %1917, 0, 3
    %1919 = const i3 5
    %1920 = eq i3 %1918, %1919
    %1921 = and i1 %1914, %1920
    %1922 = or i1 %1913, %1921
    br %1922, %if_false12, %if_true12
if_false11:
    %1923 = const i1 1
    %1924 = const time 0s 1e
    drv i1$ %illegal_inst1, %1923, %1924
    st i1* %illegal_inst.shadow, %1923
    br %if_exit10
if_exit10:
    br %case_exit
if_true12:
    %1925 = const i1 0
    %1926 = const time 0s 1e
    drv i1$ %write_rd1, %1925, %1926
    st i1* %write_rd.shadow, %1925
    %valid_instr11 = prb i1$ %valid_instr
    %1927 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr11, %1927
    br %if_exit11
if_false12:
    %1928 = const i1 1
    %1929 = const time 0s 1e
    drv i1$ %illegal_inst1, %1928, %1929
    st i1* %illegal_inst.shadow, %1928
    br %if_exit11
if_exit11:
    br %if_exit10
case_body66:
    %1930 = const i1 1
    %1931 = const i1 0
    %1932 = and i1 %1930, %1931
    %1933 = const i1 1
    %1934 = and i1 %1932, %1933
    br %1934, %if_false13, %if_true13
1889:
    %1935 = const i1 0
    %1936 = const i32 2556428339
    %1937 = const i32 4293947519
    %1938 = and i32 %inst_data_i1, %1937
    %1939 = and i32 %1936, %1937
    %1940 = eq i32 %1938, %1939
    %1941 = or i1 %1935, %1940
    %1942 = const i32 2556444723
    %1943 = const i32 4293947519
    %1944 = and i32 %inst_data_i1, %1943
    %1945 = and i32 %1942, %1943
    %1946 = eq i32 %1944, %1945
    %1947 = or i1 %1941, %1946
    %1948 = const i32 2554339379
    %1949 = const i32 4293947519
    %1950 = and i32 %inst_data_i1, %1949
    %1951 = and i32 %1948, %1949
    %1952 = eq i32 %1950, %1951
    %1953 = or i1 %1947, %1952
    %1954 = const i32 2554355763
    %1955 = const i32 4293947519
    %1956 = and i32 %inst_data_i1, %1955
    %1957 = and i32 %1954, %1955
    %1958 = eq i32 %1956, %1957
    %1959 = or i1 %1953, %1958
    %1960 = const i32 2952814643
    %1961 = const i32 4261441663
    %1962 = and i32 %inst_data_i1, %1961
    %1963 = and i32 %1960, %1961
    %1964 = eq i32 %1962, %1963
    %1965 = or i1 %1959, %1964
    %1966 = const i32 3019907123
    %1967 = const i32 4261441663
    %1968 = and i32 %inst_data_i1, %1967
    %1969 = and i32 %1966, %1967
    %1970 = eq i32 %1968, %1969
    %1971 = or i1 %1965, %1970
    %1972 = const i32 3019923507
    %1973 = const i32 4261441663
    %1974 = and i32 %inst_data_i1, %1973
    %1975 = and i32 %1972, %1973
    %1976 = eq i32 %1974, %1975
    %1977 = or i1 %1971, %1976
    br %1977, %1978, %case_body67
if_true13:
    %1979 = const i1 0
    %1980 = const time 0s 1e
    drv i1$ %write_rd1, %1979, %1980
    st i1* %write_rd.shadow, %1979
    %valid_instr12 = prb i1$ %valid_instr
    %1981 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr12, %1981
    br %if_exit12
if_false13:
    %1982 = const i1 1
    %1983 = const time 0s 1e
    drv i1$ %illegal_inst1, %1982, %1983
    st i1* %illegal_inst.shadow, %1982
    br %if_exit12
if_exit12:
    br %case_exit
case_body67:
    %1984 = const i1 1
    %1985 = const i1 0
    %1986 = and i1 %1984, %1985
    %1987 = const i1 1
    %1988 = and i1 %1986, %1987
    %1989 = const i1 1
    %1990 = and i1 %1988, %1989
    br %1990, %if_false14, %if_true14
1978:
    %1991 = const i1 0
    %1992 = const i32 603996243
    %1993 = const i32 4261441663
    %1994 = and i32 %inst_data_i1, %1993
    %1995 = and i32 %1992, %1993
    %1996 = eq i32 %1994, %1995
    %1997 = or i1 %1991, %1996
    %1998 = const i32 604000339
    %1999 = const i32 4261441663
    %2000 = and i32 %inst_data_i1, %1999
    %2001 = and i32 %1998, %1999
    %2002 = eq i32 %2000, %2001
    %2003 = or i1 %1997, %2002
    %2004 = const i32 604004435
    %2005 = const i32 4261441663
    %2006 = and i32 %inst_data_i1, %2005
    %2007 = and i32 %2004, %2005
    %2008 = eq i32 %2006, %2007
    %2009 = or i1 %2003, %2008
    %2010 = const i32 738213971
    %2011 = const i32 4261441663
    %2012 = and i32 %inst_data_i1, %2011
    %2013 = and i32 %2010, %2011
    %2014 = eq i32 %2012, %2013
    %2015 = or i1 %2009, %2014
    %2016 = const i32 738218067
    %2017 = const i32 4261441663
    %2018 = and i32 %inst_data_i1, %2017
    %2019 = and i32 %2016, %2017
    %2020 = eq i32 %2018, %2019
    %2021 = or i1 %2015, %2020
    br %2021, %2022, %case_body68
if_true14:
    %2023 = const i1 0
    %2024 = const time 0s 1e
    drv i1$ %write_rd1, %2023, %2024
    st i1* %write_rd.shadow, %2023
    %valid_instr13 = prb i1$ %valid_instr
    %2025 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr13, %2025
    br %if_exit13
if_false14:
    %2026 = const i1 1
    %2027 = const time 0s 1e
    drv i1$ %illegal_inst1, %2026, %2027
    st i1* %illegal_inst.shadow, %2026
    br %if_exit13
if_exit13:
    br %case_exit
case_body68:
    %2028 = const i1 0
    br %2028, %if_false15, %if_true15
2022:
    %2029 = const i1 0
    %2030 = const i32 1080033363
    %2031 = const i32 4293947519
    %2032 = and i32 %inst_data_i1, %2031
    %2033 = and i32 %2030, %2031
    %2034 = eq i32 %2032, %2033
    %2035 = or i1 %2029, %2034
    br %2035, %2036, %case_body69
if_true15:
    %2037 = const i1 0
    %2038 = const time 0s 1e
    drv i1$ %write_rd1, %2037, %2038
    st i1* %write_rd.shadow, %2037
    %valid_instr14 = prb i1$ %valid_instr
    %2039 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr14, %2039
    br %if_exit14
if_false15:
    %2040 = const i1 1
    %2041 = const time 0s 1e
    drv i1$ %illegal_inst1, %2040, %2041
    st i1* %illegal_inst.shadow, %2040
    br %if_exit14
if_exit14:
    br %case_exit
case_body69:
    %2042 = const i1 1
    %2043 = const i1 0
    %2044 = and i1 %2042, %2043
    br %2044, %if_false16, %if_true16
2036:
    %2045 = const i1 0
    %2046 = const i32 1113587795
    %2047 = const i32 4293947519
    %2048 = and i32 %inst_data_i1, %2047
    %2049 = and i32 %2046, %2047
    %2050 = eq i32 %2048, %2049
    %2051 = or i1 %2045, %2050
    br %2051, %2052, %case_body70
if_true16:
    %2053 = const i1 0
    %2054 = const time 0s 1e
    drv i1$ %write_rd1, %2053, %2054
    st i1* %write_rd.shadow, %2053
    %valid_instr15 = prb i1$ %valid_instr
    %2055 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr15, %2055
    br %if_exit15
if_false16:
    %2056 = const i1 1
    %2057 = const time 0s 1e
    drv i1$ %illegal_inst1, %2056, %2057
    st i1* %illegal_inst.shadow, %2056
    br %if_exit15
if_exit15:
    br %case_exit
case_body70:
    %2058 = const i1 1
    %2059 = const i1 0
    %2060 = and i1 %2058, %2059
    br %2060, %if_false17, %if_true17
2052:
    %2061 = const i1 0
    %2062 = const i32 1147142227
    %2063 = const i32 4293918847
    %2064 = and i32 %inst_data_i1, %2063
    %2065 = and i32 %2062, %2063
    %2066 = eq i32 %2064, %2065
    %2067 = or i1 %2061, %2066
    %2068 = const i32 1142968403
    %2069 = const i32 4293947519
    %2070 = and i32 %inst_data_i1, %2069
    %2071 = and i32 %2068, %2069
    %2072 = eq i32 %2070, %2071
    %2073 = or i1 %2067, %2072
    br %2073, %2074, %case_body71
if_true17:
    %2075 = const i1 0
    %2076 = const time 0s 1e
    drv i1$ %write_rd1, %2075, %2076
    st i1* %write_rd.shadow, %2075
    %valid_instr16 = prb i1$ %valid_instr
    %2077 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr16, %2077
    br %if_exit16
if_false17:
    %2078 = const i1 1
    %2079 = const time 0s 1e
    drv i1$ %illegal_inst1, %2078, %2079
    st i1* %illegal_inst.shadow, %2078
    br %if_exit16
if_exit16:
    br %case_exit
case_body71:
    %2080 = const i1 0
    %2081 = const i1 0
    %2082 = and i1 %2080, %2081
    br %2082, %if_false18, %if_true18
2074:
    %2083 = const i1 0
    %2084 = const i32 2181042227
    %2085 = const i32 4261441663
    %2086 = and i32 %inst_data_i1, %2085
    %2087 = and i32 %2084, %2085
    %2088 = eq i32 %2086, %2087
    %2089 = or i1 %2083, %2088
    %2090 = const i32 2181058611
    %2091 = const i32 4261441663
    %2092 = and i32 %inst_data_i1, %2091
    %2093 = and i32 %2090, %2091
    %2094 = eq i32 %2092, %2093
    %2095 = or i1 %2089, %2094
    %2096 = const i32 2214596659
    %2097 = const i32 4261441663
    %2098 = and i32 %inst_data_i1, %2097
    %2099 = and i32 %2096, %2097
    %2100 = eq i32 %2098, %2099
    %2101 = or i1 %2095, %2100
    %2102 = const i32 2214613043
    %2103 = const i32 4261441663
    %2104 = and i32 %inst_data_i1, %2103
    %2105 = and i32 %2102, %2103
    %2106 = eq i32 %2104, %2105
    %2107 = or i1 %2101, %2106
    %2108 = const i32 2248151091
    %2109 = const i32 4261441663
    %2110 = and i32 %inst_data_i1, %2109
    %2111 = and i32 %2108, %2109
    %2112 = eq i32 %2110, %2111
    %2113 = or i1 %2107, %2112
    %2114 = const i32 2248167475
    %2115 = const i32 4261441663
    %2116 = and i32 %inst_data_i1, %2115
    %2117 = and i32 %2114, %2115
    %2118 = eq i32 %2116, %2117
    %2119 = or i1 %2113, %2118
    %2120 = const i32 2281705523
    %2121 = const i32 4261441663
    %2122 = and i32 %inst_data_i1, %2121
    %2123 = and i32 %2120, %2121
    %2124 = eq i32 %2122, %2123
    %2125 = or i1 %2119, %2124
    %2126 = const i32 2281721907
    %2127 = const i32 4261441663
    %2128 = and i32 %inst_data_i1, %2127
    %2129 = and i32 %2126, %2127
    %2130 = eq i32 %2128, %2129
    %2131 = or i1 %2125, %2130
    %2132 = const i32 2315259955
    %2133 = const i32 4261441663
    %2134 = and i32 %inst_data_i1, %2133
    %2135 = and i32 %2132, %2133
    %2136 = eq i32 %2134, %2135
    %2137 = or i1 %2131, %2136
    %2138 = const i32 2315276339
    %2139 = const i32 4261441663
    %2140 = and i32 %inst_data_i1, %2139
    %2141 = and i32 %2138, %2139
    %2142 = eq i32 %2140, %2141
    %2143 = or i1 %2137, %2142
    %2144 = const i32 2348814387
    %2145 = const i32 4261441663
    %2146 = and i32 %inst_data_i1, %2145
    %2147 = and i32 %2144, %2145
    %2148 = eq i32 %2146, %2147
    %2149 = or i1 %2143, %2148
    %2150 = const i32 2348830771
    %2151 = const i32 4261441663
    %2152 = and i32 %inst_data_i1, %2151
    %2153 = and i32 %2150, %2151
    %2154 = eq i32 %2152, %2153
    %2155 = or i1 %2149, %2154
    %2156 = const i32 2382368819
    %2157 = const i32 4293947519
    %2158 = and i32 %inst_data_i1, %2157
    %2159 = and i32 %2156, %2157
    %2160 = eq i32 %2158, %2159
    %2161 = or i1 %2155, %2160
    %2162 = const i32 2415923251
    %2163 = const i32 4261441663
    %2164 = and i32 %inst_data_i1, %2163
    %2165 = and i32 %2162, %2163
    %2166 = eq i32 %2164, %2165
    %2167 = or i1 %2161, %2166
    %2168 = const i32 2415939635
    %2169 = const i32 4261441663
    %2170 = and i32 %inst_data_i1, %2169
    %2171 = and i32 %2168, %2169
    %2172 = eq i32 %2170, %2171
    %2173 = or i1 %2167, %2172
    %2174 = const i32 2449477683
    %2175 = const i32 4261441663
    %2176 = and i32 %inst_data_i1, %2175
    %2177 = and i32 %2174, %2175
    %2178 = eq i32 %2176, %2177
    %2179 = or i1 %2173, %2178
    %2180 = const i32 2449494067
    %2181 = const i32 4261441663
    %2182 = and i32 %inst_data_i1, %2181
    %2183 = and i32 %2180, %2181
    %2184 = eq i32 %2182, %2183
    %2185 = or i1 %2179, %2184
    %2186 = const i32 2583695411
    %2187 = const i32 4261441663
    %2188 = and i32 %inst_data_i1, %2187
    %2189 = and i32 %2186, %2187
    %2190 = eq i32 %2188, %2189
    %2191 = or i1 %2185, %2190
    %2192 = const i32 2583711795
    %2193 = const i32 4261441663
    %2194 = and i32 %inst_data_i1, %2193
    %2195 = and i32 %2192, %2193
    %2196 = eq i32 %2194, %2195
    %2197 = or i1 %2191, %2196
    %2198 = const i32 2617249843
    %2199 = const i32 4261441663
    %2200 = and i32 %inst_data_i1, %2199
    %2201 = and i32 %2198, %2199
    %2202 = eq i32 %2200, %2201
    %2203 = or i1 %2197, %2202
    %2204 = const i32 2617266227
    %2205 = const i32 4261441663
    %2206 = and i32 %inst_data_i1, %2205
    %2207 = and i32 %2204, %2205
    %2208 = eq i32 %2206, %2207
    %2209 = or i1 %2203, %2208
    %2210 = const i32 2650804275
    %2211 = const i32 4261441663
    %2212 = and i32 %inst_data_i1, %2211
    %2213 = and i32 %2210, %2211
    %2214 = eq i32 %2212, %2213
    %2215 = or i1 %2209, %2214
    %2216 = const i32 2650820659
    %2217 = const i32 4261441663
    %2218 = and i32 %inst_data_i1, %2217
    %2219 = and i32 %2216, %2217
    %2220 = eq i32 %2218, %2219
    %2221 = or i1 %2215, %2220
    %2222 = const i32 2952794163
    %2223 = const i32 4261441663
    %2224 = and i32 %inst_data_i1, %2223
    %2225 = and i32 %2222, %2223
    %2226 = eq i32 %2224, %2225
    %2227 = or i1 %2221, %2226
    br %2227, %2228, %case_body72
if_true18:
    %2229 = const i1 0
    %2230 = const time 0s 1e
    drv i1$ %write_rd1, %2229, %2230
    st i1* %write_rd.shadow, %2229
    %valid_instr17 = prb i1$ %valid_instr
    %2231 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr17, %2231
    br %if_exit17
if_false18:
    %2232 = const i1 1
    %2233 = const time 0s 1e
    drv i1$ %illegal_inst1, %2232, %2233
    st i1* %illegal_inst.shadow, %2232
    br %if_exit17
if_exit17:
    br %case_exit
case_body72:
    %2234 = const i1 1
    %2235 = const i1 0
    %2236 = and i1 %2234, %2235
    %2237 = const i1 1
    %2238 = and i1 %2236, %2237
    br %2238, %if_false19, %if_true19
2228:
    %2239 = const i1 0
    %2240 = const i32 2555379763
    %2241 = const i32 4293947519
    %2242 = and i32 %inst_data_i1, %2241
    %2243 = and i32 %2240, %2241
    %2244 = eq i32 %2242, %2243
    %2245 = or i1 %2239, %2244
    %2246 = const i32 2555396147
    %2247 = const i32 4293947519
    %2248 = and i32 %inst_data_i1, %2247
    %2249 = and i32 %2246, %2247
    %2250 = eq i32 %2248, %2249
    %2251 = or i1 %2245, %2250
    %2252 = const i32 2554335283
    %2253 = const i32 4293947519
    %2254 = and i32 %inst_data_i1, %2253
    %2255 = and i32 %2252, %2253
    %2256 = eq i32 %2254, %2255
    %2257 = or i1 %2251, %2256
    %2258 = const i32 2554351667
    %2259 = const i32 4293947519
    %2260 = and i32 %inst_data_i1, %2259
    %2261 = and i32 %2258, %2259
    %2262 = eq i32 %2260, %2261
    %2263 = or i1 %2257, %2262
    %2264 = const i32 2952810547
    %2265 = const i32 4261441663
    %2266 = and i32 %inst_data_i1, %2265
    %2267 = and i32 %2264, %2265
    %2268 = eq i32 %2266, %2267
    %2269 = or i1 %2263, %2268
    %2270 = const i32 3019903027
    %2271 = const i32 4261441663
    %2272 = and i32 %inst_data_i1, %2271
    %2273 = and i32 %2270, %2271
    %2274 = eq i32 %2272, %2273
    %2275 = or i1 %2269, %2274
    %2276 = const i32 3019919411
    %2277 = const i32 4261441663
    %2278 = and i32 %inst_data_i1, %2277
    %2279 = and i32 %2276, %2277
    %2280 = eq i32 %2278, %2279
    %2281 = or i1 %2275, %2280
    br %2281, %2282, %case_body73
if_true19:
    %2283 = const i1 0
    %2284 = const time 0s 1e
    drv i1$ %write_rd1, %2283, %2284
    st i1* %write_rd.shadow, %2283
    %valid_instr18 = prb i1$ %valid_instr
    %2285 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr18, %2285
    br %if_exit18
if_false19:
    %2286 = const i1 1
    %2287 = const time 0s 1e
    drv i1$ %illegal_inst1, %2286, %2287
    st i1* %illegal_inst.shadow, %2286
    br %if_exit18
if_exit18:
    br %case_exit
case_body73:
    %2288 = const i1 1
    %2289 = const i1 0
    %2290 = and i1 %2288, %2289
    %2291 = const i1 1
    %2292 = and i1 %2290, %2291
    %2293 = const i1 1
    %2294 = and i1 %2292, %2293
    br %2294, %if_false20, %if_true20
2282:
    %2295 = const i1 0
    %2296 = const i32 2555387955
    %2297 = const i32 4293947519
    %2298 = and i32 %inst_data_i1, %2297
    %2299 = and i32 %2296, %2297
    %2300 = eq i32 %2298, %2299
    %2301 = or i1 %2295, %2300
    %2302 = const i32 2555404339
    %2303 = const i32 4293947519
    %2304 = and i32 %inst_data_i1, %2303
    %2305 = and i32 %2302, %2303
    %2306 = eq i32 %2304, %2305
    %2307 = or i1 %2301, %2306
    %2308 = const i32 2556432435
    %2309 = const i32 4293947519
    %2310 = and i32 %inst_data_i1, %2309
    %2311 = and i32 %2308, %2309
    %2312 = eq i32 %2310, %2311
    %2313 = or i1 %2307, %2312
    %2314 = const i32 2556448819
    %2315 = const i32 4293947519
    %2316 = and i32 %inst_data_i1, %2315
    %2317 = and i32 %2314, %2315
    %2318 = eq i32 %2316, %2317
    %2319 = or i1 %2313, %2318
    br %2319, %2320, %case_body74
if_true20:
    %2321 = const i1 0
    %2322 = const time 0s 1e
    drv i1$ %write_rd1, %2321, %2322
    st i1* %write_rd.shadow, %2321
    %valid_instr19 = prb i1$ %valid_instr
    %2323 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr19, %2323
    br %if_exit19
if_false20:
    %2324 = const i1 1
    %2325 = const time 0s 1e
    drv i1$ %illegal_inst1, %2324, %2325
    st i1* %illegal_inst.shadow, %2324
    br %if_exit19
if_exit19:
    br %case_exit
case_body74:
    %2326 = const i1 1
    %2327 = const i1 0
    %2328 = and i1 %2326, %2327
    %2329 = const i1 0
    %2330 = and i1 %2328, %2329
    %2331 = const i1 1
    %2332 = and i1 %2330, %2331
    br %2332, %if_false21, %if_true21
2320:
    %2333 = const i1 0
    %2334 = const i32 100663379
    %2335 = const i32 4261412991
    %2336 = and i32 %inst_data_i1, %2335
    %2337 = and i32 %2334, %2335
    %2338 = eq i32 %2336, %2337
    %2339 = or i1 %2333, %2338
    %2340 = const i32 234881107
    %2341 = const i32 4261412991
    %2342 = and i32 %inst_data_i1, %2341
    %2343 = and i32 %2340, %2341
    %2344 = eq i32 %2342, %2343
    %2345 = or i1 %2339, %2344
    %2346 = const i32 369098835
    %2347 = const i32 4261412991
    %2348 = and i32 %inst_data_i1, %2347
    %2349 = and i32 %2346, %2347
    %2350 = eq i32 %2348, %2349
    %2351 = or i1 %2345, %2350
    %2352 = const i32 503316563
    %2353 = const i32 4261412991
    %2354 = and i32 %inst_data_i1, %2353
    %2355 = and i32 %2352, %2353
    %2356 = eq i32 %2354, %2355
    %2357 = or i1 %2351, %2356
    %2358 = const i32 637534291
    %2359 = const i32 4261441663
    %2360 = and i32 %inst_data_i1, %2359
    %2361 = and i32 %2358, %2359
    %2362 = eq i32 %2360, %2361
    %2363 = or i1 %2357, %2362
    %2364 = const i32 637538387
    %2365 = const i32 4261441663
    %2366 = and i32 %inst_data_i1, %2365
    %2367 = and i32 %2364, %2365
    %2368 = eq i32 %2366, %2367
    %2369 = or i1 %2363, %2368
    %2370 = const i32 637542483
    %2371 = const i32 4261441663
    %2372 = and i32 %inst_data_i1, %2371
    %2373 = and i32 %2370, %2371
    %2374 = eq i32 %2372, %2373
    %2375 = or i1 %2369, %2374
    %2376 = const i32 771752019
    %2377 = const i32 4261441663
    %2378 = and i32 %inst_data_i1, %2377
    %2379 = and i32 %2376, %2377
    %2380 = eq i32 %2378, %2379
    %2381 = or i1 %2375, %2380
    %2382 = const i32 771756115
    %2383 = const i32 4261441663
    %2384 = and i32 %inst_data_i1, %2383
    %2385 = and i32 %2382, %2383
    %2386 = eq i32 %2384, %2385
    %2387 = or i1 %2381, %2386
    %2388 = const i32 1577058387
    %2389 = const i32 4293918847
    %2390 = and i32 %inst_data_i1, %2389
    %2391 = and i32 %2388, %2389
    %2392 = eq i32 %2390, %2391
    %2393 = or i1 %2387, %2392
    %2394 = const i32 100663363
    %2395 = const i32 100663423
    %2396 = and i32 %inst_data_i1, %2395
    %2397 = and i32 %2394, %2395
    %2398 = eq i32 %2396, %2397
    %2399 = or i1 %2393, %2398
    %2400 = const i32 100663367
    %2401 = const i32 100663423
    %2402 = and i32 %inst_data_i1, %2401
    %2403 = and i32 %2400, %2401
    %2404 = eq i32 %2402, %2403
    %2405 = or i1 %2399, %2404
    %2406 = const i32 100663371
    %2407 = const i32 100663423
    %2408 = and i32 %inst_data_i1, %2407
    %2409 = and i32 %2406, %2407
    %2410 = eq i32 %2408, %2409
    %2411 = or i1 %2405, %2410
    %2412 = const i32 100663375
    %2413 = const i32 100663423
    %2414 = and i32 %inst_data_i1, %2413
    %2415 = and i32 %2412, %2413
    %2416 = eq i32 %2414, %2415
    %2417 = or i1 %2411, %2416
    br %2417, %2418, %case_body75
if_true21:
    %2419 = const i1 0
    %2420 = const time 0s 1e
    drv i1$ %write_rd1, %2419, %2420
    st i1* %write_rd.shadow, %2419
    %valid_instr20 = prb i1$ %valid_instr
    %2421 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr20, %2421
    br %if_exit20
if_false21:
    %2422 = const i1 1
    %2423 = const time 0s 1e
    drv i1$ %illegal_inst1, %2422, %2423
    st i1* %illegal_inst.shadow, %2422
    br %if_exit20
if_exit20:
    br %case_exit
case_body75:
    %2424 = const i1 0
    br %2424, %if_false22, %if_true22
2418:
    %2425 = const i1 0
    %2426 = const i32 1076887635
    %2427 = const i32 4293947519
    %2428 = and i32 %inst_data_i1, %2427
    %2429 = and i32 %2426, %2427
    %2430 = eq i32 %2428, %2429
    %2431 = or i1 %2425, %2430
    %2432 = const i32 1174405203
    %2433 = const i32 4293918847
    %2434 = and i32 %inst_data_i1, %2433
    %2435 = and i32 %2432, %2433
    %2436 = eq i32 %2434, %2435
    %2437 = or i1 %2431, %2436
    br %2437, %2438, %case_body76
if_true22:
    %2439 = const i1 0
    %2440 = const time 0s 1e
    drv i1$ %write_rd1, %2439, %2440
    st i1* %write_rd.shadow, %2439
    %valid_instr21 = prb i1$ %valid_instr
    %2441 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr21, %2441
    br %if_exit21
if_false22:
    %2442 = const i1 1
    %2443 = const time 0s 1e
    drv i1$ %illegal_inst1, %2442, %2443
    st i1* %illegal_inst.shadow, %2442
    br %if_exit21
if_exit21:
    br %case_exit
case_body76:
    %2444 = const i1 1
    %2445 = const i1 0
    %2446 = and i1 %2444, %2445
    br %2446, %if_false23, %if_true23
2438:
    %2447 = const i1 0
    %2448 = const i32 1110442067
    %2449 = const i32 4293947519
    %2450 = and i32 %inst_data_i1, %2449
    %2451 = and i32 %2448, %2449
    %2452 = eq i32 %2450, %2451
    %2453 = or i1 %2447, %2452
    %2454 = const i32 1175453779
    %2455 = const i32 4293918847
    %2456 = and i32 %inst_data_i1, %2455
    %2457 = and i32 %2454, %2455
    %2458 = eq i32 %2456, %2457
    %2459 = or i1 %2453, %2458
    br %2459, %2460, %case_body77
if_true23:
    %2461 = const i1 0
    %2462 = const time 0s 1e
    drv i1$ %write_rd1, %2461, %2462
    st i1* %write_rd.shadow, %2461
    %valid_instr22 = prb i1$ %valid_instr
    %2463 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr22, %2463
    br %if_exit22
if_false23:
    %2464 = const i1 1
    %2465 = const time 0s 1e
    drv i1$ %illegal_inst1, %2464, %2465
    st i1* %illegal_inst.shadow, %2464
    br %if_exit22
if_exit22:
    br %case_exit
case_body77:
    %2466 = const i1 1
    %2467 = const i1 0
    %2468 = and i1 %2466, %2467
    br %2468, %if_false24, %if_true24
2460:
    %2469 = const i1 0
    %2470 = const i32 1143996499
    %2471 = const i32 4293947519
    %2472 = and i32 %inst_data_i1, %2471
    %2473 = and i32 %2470, %2471
    %2474 = eq i32 %2472, %2473
    %2475 = or i1 %2469, %2474
    %2476 = const i32 1176502355
    %2477 = const i32 4293918847
    %2478 = and i32 %inst_data_i1, %2477
    %2479 = and i32 %2476, %2477
    %2480 = eq i32 %2478, %2479
    %2481 = or i1 %2475, %2480
    br %2481, %2482, %case_body78
if_true24:
    %2483 = const i1 0
    %2484 = const time 0s 1e
    drv i1$ %write_rd1, %2483, %2484
    st i1* %write_rd.shadow, %2483
    %valid_instr23 = prb i1$ %valid_instr
    %2485 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr23, %2485
    br %if_exit23
if_false24:
    %2486 = const i1 1
    %2487 = const time 0s 1e
    drv i1$ %illegal_inst1, %2486, %2487
    st i1* %illegal_inst.shadow, %2486
    br %if_exit23
if_exit23:
    br %case_exit
case_body78:
    %2488 = const i1 0
    %2489 = const i1 0
    %2490 = and i1 %2488, %2489
    br %2490, %if_false25, %if_true25
2482:
    %2491 = const i1 0
    %2492 = const i32 1144016979
    %2493 = const i32 4293947519
    %2494 = and i32 %inst_data_i1, %2493
    %2495 = and i32 %2492, %2493
    %2496 = eq i32 %2494, %2495
    %2497 = or i1 %2491, %2496
    %2498 = const i32 1180696659
    %2499 = const i32 4293918847
    %2500 = and i32 %inst_data_i1, %2499
    %2501 = and i32 %2498, %2499
    %2502 = eq i32 %2500, %2501
    %2503 = or i1 %2497, %2502
    br %2503, %2504, %case_body79
if_true25:
    %2505 = const i1 0
    %2506 = const time 0s 1e
    drv i1$ %write_rd1, %2505, %2506
    st i1* %write_rd.shadow, %2505
    %valid_instr24 = prb i1$ %valid_instr
    %2507 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr24, %2507
    br %if_exit24
if_false25:
    %2508 = const i1 1
    %2509 = const time 0s 1e
    drv i1$ %illegal_inst1, %2508, %2509
    st i1* %illegal_inst.shadow, %2508
    br %if_exit24
if_exit24:
    br %case_exit
case_body79:
    %2510 = const i1 1
    %2511 = const i1 1
    %2512 = and i1 %2510, %2511
    br %2512, %if_false26, %if_true26
2504:
    %2513 = const i1 0
    %2514 = const i32 2181050419
    %2515 = const i32 4261441663
    %2516 = and i32 %inst_data_i1, %2515
    %2517 = and i32 %2514, %2515
    %2518 = eq i32 %2516, %2517
    %2519 = or i1 %2513, %2518
    %2520 = const i32 2181066803
    %2521 = const i32 4261441663
    %2522 = and i32 %inst_data_i1, %2521
    %2523 = and i32 %2520, %2521
    %2524 = eq i32 %2522, %2523
    %2525 = or i1 %2519, %2524
    %2526 = const i32 2214604851
    %2527 = const i32 4261441663
    %2528 = and i32 %inst_data_i1, %2527
    %2529 = and i32 %2526, %2527
    %2530 = eq i32 %2528, %2529
    %2531 = or i1 %2525, %2530
    %2532 = const i32 2214621235
    %2533 = const i32 4261441663
    %2534 = and i32 %inst_data_i1, %2533
    %2535 = and i32 %2532, %2533
    %2536 = eq i32 %2534, %2535
    %2537 = or i1 %2531, %2536
    %2538 = const i32 2248159283
    %2539 = const i32 4261441663
    %2540 = and i32 %inst_data_i1, %2539
    %2541 = and i32 %2538, %2539
    %2542 = eq i32 %2540, %2541
    %2543 = or i1 %2537, %2542
    %2544 = const i32 2248175667
    %2545 = const i32 4261441663
    %2546 = and i32 %inst_data_i1, %2545
    %2547 = and i32 %2544, %2545
    %2548 = eq i32 %2546, %2547
    %2549 = or i1 %2543, %2548
    %2550 = const i32 2281713715
    %2551 = const i32 4261441663
    %2552 = and i32 %inst_data_i1, %2551
    %2553 = and i32 %2550, %2551
    %2554 = eq i32 %2552, %2553
    %2555 = or i1 %2549, %2554
    %2556 = const i32 2281730099
    %2557 = const i32 4261441663
    %2558 = and i32 %inst_data_i1, %2557
    %2559 = and i32 %2556, %2557
    %2560 = eq i32 %2558, %2559
    %2561 = or i1 %2555, %2560
    %2562 = const i32 2315268147
    %2563 = const i32 4261441663
    %2564 = and i32 %inst_data_i1, %2563
    %2565 = and i32 %2562, %2563
    %2566 = eq i32 %2564, %2565
    %2567 = or i1 %2561, %2566
    %2568 = const i32 2315284531
    %2569 = const i32 4261441663
    %2570 = and i32 %inst_data_i1, %2569
    %2571 = and i32 %2568, %2569
    %2572 = eq i32 %2570, %2571
    %2573 = or i1 %2567, %2572
    %2574 = const i32 2348822579
    %2575 = const i32 4261441663
    %2576 = and i32 %inst_data_i1, %2575
    %2577 = and i32 %2574, %2575
    %2578 = eq i32 %2576, %2577
    %2579 = or i1 %2573, %2578
    %2580 = const i32 2348838963
    %2581 = const i32 4261441663
    %2582 = and i32 %inst_data_i1, %2581
    %2583 = and i32 %2580, %2581
    %2584 = eq i32 %2582, %2583
    %2585 = or i1 %2579, %2584
    %2586 = const i32 2382377011
    %2587 = const i32 4293947519
    %2588 = and i32 %inst_data_i1, %2587
    %2589 = and i32 %2586, %2587
    %2590 = eq i32 %2588, %2589
    %2591 = or i1 %2585, %2590
    %2592 = const i32 2415931443
    %2593 = const i32 4261441663
    %2594 = and i32 %inst_data_i1, %2593
    %2595 = and i32 %2592, %2593
    %2596 = eq i32 %2594, %2595
    %2597 = or i1 %2591, %2596
    %2598 = const i32 2415947827
    %2599 = const i32 4261441663
    %2600 = and i32 %inst_data_i1, %2599
    %2601 = and i32 %2598, %2599
    %2602 = eq i32 %2600, %2601
    %2603 = or i1 %2597, %2602
    %2604 = const i32 2449485875
    %2605 = const i32 4261441663
    %2606 = and i32 %inst_data_i1, %2605
    %2607 = and i32 %2604, %2605
    %2608 = eq i32 %2606, %2607
    %2609 = or i1 %2603, %2608
    %2610 = const i32 2449502259
    %2611 = const i32 4261441663
    %2612 = and i32 %inst_data_i1, %2611
    %2613 = and i32 %2610, %2611
    %2614 = eq i32 %2612, %2613
    %2615 = or i1 %2609, %2614
    %2616 = const i32 2583703603
    %2617 = const i32 4261441663
    %2618 = and i32 %inst_data_i1, %2617
    %2619 = and i32 %2616, %2617
    %2620 = eq i32 %2618, %2619
    %2621 = or i1 %2615, %2620
    %2622 = const i32 2583719987
    %2623 = const i32 4261441663
    %2624 = and i32 %inst_data_i1, %2623
    %2625 = and i32 %2622, %2623
    %2626 = eq i32 %2624, %2625
    %2627 = or i1 %2621, %2626
    %2628 = const i32 2617258035
    %2629 = const i32 4261441663
    %2630 = and i32 %inst_data_i1, %2629
    %2631 = and i32 %2628, %2629
    %2632 = eq i32 %2630, %2631
    %2633 = or i1 %2627, %2632
    %2634 = const i32 2617274419
    %2635 = const i32 4261441663
    %2636 = and i32 %inst_data_i1, %2635
    %2637 = and i32 %2634, %2635
    %2638 = eq i32 %2636, %2637
    %2639 = or i1 %2633, %2638
    %2640 = const i32 2650812467
    %2641 = const i32 4261441663
    %2642 = and i32 %inst_data_i1, %2641
    %2643 = and i32 %2640, %2641
    %2644 = eq i32 %2642, %2643
    %2645 = or i1 %2639, %2644
    %2646 = const i32 2650828851
    %2647 = const i32 4261441663
    %2648 = and i32 %inst_data_i1, %2647
    %2649 = and i32 %2646, %2647
    %2650 = eq i32 %2648, %2649
    %2651 = or i1 %2645, %2650
    br %2651, %2652, %case_body80
if_true26:
    %2653 = const i1 0
    %2654 = const time 0s 1e
    drv i1$ %write_rd1, %2653, %2654
    st i1* %write_rd.shadow, %2653
    %valid_instr25 = prb i1$ %valid_instr
    %2655 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr25, %2655
    br %if_exit25
if_false26:
    %2656 = const i1 1
    %2657 = const time 0s 1e
    drv i1$ %illegal_inst1, %2656, %2657
    st i1* %illegal_inst.shadow, %2656
    br %if_exit25
if_exit25:
    br %case_exit
case_body80:
    %2658 = const i1 1
    %2659 = const i1 0
    %2660 = and i1 %2658, %2659
    %2661 = const i32 8
    %2662 = const i32 16
    %2663 = sge i32 %2661, %2662
    %2664 = and i1 %2660, %2663
    br %2664, %if_false27, %if_true27
2652:
    %2665 = const i1 0
    %2666 = const i32 2952802355
    %2667 = const i32 4261441663
    %2668 = and i32 %inst_data_i1, %2667
    %2669 = and i32 %2666, %2667
    %2670 = eq i32 %2668, %2669
    %2671 = or i1 %2665, %2670
    %2672 = const i32 2952818739
    %2673 = const i32 4261441663
    %2674 = and i32 %inst_data_i1, %2673
    %2675 = and i32 %2672, %2673
    %2676 = eq i32 %2674, %2675
    %2677 = or i1 %2671, %2676
    br %2677, %2678, %case_body81
if_true27:
    %2679 = const i1 0
    %2680 = const time 0s 1e
    drv i1$ %write_rd1, %2679, %2680
    st i1* %write_rd.shadow, %2679
    %valid_instr26 = prb i1$ %valid_instr
    %2681 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr26, %2681
    br %if_exit26
if_false27:
    %2682 = const i1 1
    %2683 = const time 0s 1e
    drv i1$ %illegal_inst1, %2682, %2683
    st i1* %illegal_inst.shadow, %2682
    br %if_exit26
if_exit26:
    br %case_exit
case_body81:
    %2684 = const i1 1
    %2685 = const i1 0
    %2686 = and i1 %2684, %2685
    %2687 = const i1 1
    %2688 = and i1 %2686, %2687
    br %2688, %if_false28, %if_true28
2678:
    %2689 = const i1 0
    %2690 = const i32 2557476915
    %2691 = const i32 4293947519
    %2692 = and i32 %inst_data_i1, %2691
    %2693 = and i32 %2690, %2691
    %2694 = eq i32 %2692, %2693
    %2695 = or i1 %2689, %2694
    %2696 = const i32 2557493299
    %2697 = const i32 4293947519
    %2698 = and i32 %inst_data_i1, %2697
    %2699 = and i32 %2696, %2697
    %2700 = eq i32 %2698, %2699
    %2701 = or i1 %2695, %2700
    %2702 = const i32 2554343475
    %2703 = const i32 4293947519
    %2704 = and i32 %inst_data_i1, %2703
    %2705 = and i32 %2702, %2703
    %2706 = eq i32 %2704, %2705
    %2707 = or i1 %2701, %2706
    %2708 = const i32 2554359859
    %2709 = const i32 4293947519
    %2710 = and i32 %inst_data_i1, %2709
    %2711 = and i32 %2708, %2709
    %2712 = eq i32 %2710, %2711
    %2713 = or i1 %2707, %2712
    br %2713, %2714, %case_body82
if_true28:
    %2715 = const i1 0
    %2716 = const time 0s 1e
    drv i1$ %write_rd1, %2715, %2716
    st i1* %write_rd.shadow, %2715
    %valid_instr27 = prb i1$ %valid_instr
    %2717 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr27, %2717
    br %if_exit27
if_false28:
    %2718 = const i1 1
    %2719 = const time 0s 1e
    drv i1$ %illegal_inst1, %2718, %2719
    st i1* %illegal_inst.shadow, %2718
    br %if_exit27
if_exit27:
    br %case_exit
case_body82:
    %2720 = const i1 1
    %2721 = const i1 0
    %2722 = and i1 %2720, %2721
    %2723 = const i1 1
    %2724 = and i1 %2722, %2723
    %2725 = const i32 8
    %2726 = const i32 64
    %2727 = sge i32 %2725, %2726
    %2728 = and i1 %2724, %2727
    br %2728, %if_false29, %if_true29
2714:
    %2729 = const i1 0
    %2730 = const i32 2986356787
    %2731 = const i32 4261441663
    %2732 = and i32 %inst_data_i1, %2731
    %2733 = and i32 %2730, %2731
    %2734 = eq i32 %2732, %2733
    %2735 = or i1 %2729, %2734
    %2736 = const i32 2986373171
    %2737 = const i32 4261441663
    %2738 = and i32 %inst_data_i1, %2737
    %2739 = and i32 %2736, %2737
    %2740 = eq i32 %2738, %2739
    %2741 = or i1 %2735, %2740
    %2742 = const i32 3019911219
    %2743 = const i32 4261441663
    %2744 = and i32 %inst_data_i1, %2743
    %2745 = and i32 %2742, %2743
    %2746 = eq i32 %2744, %2745
    %2747 = or i1 %2741, %2746
    %2748 = const i32 3019927603
    %2749 = const i32 4261441663
    %2750 = and i32 %inst_data_i1, %2749
    %2751 = and i32 %2748, %2749
    %2752 = eq i32 %2750, %2751
    %2753 = or i1 %2747, %2752
    %2754 = const i32 3053465651
    %2755 = const i32 4261441663
    %2756 = and i32 %inst_data_i1, %2755
    %2757 = and i32 %2754, %2755
    %2758 = eq i32 %2756, %2757
    %2759 = or i1 %2753, %2758
    %2760 = const i32 3053482035
    %2761 = const i32 4261441663
    %2762 = and i32 %inst_data_i1, %2761
    %2763 = and i32 %2760, %2761
    %2764 = eq i32 %2762, %2763
    %2765 = or i1 %2759, %2764
    br %2765, %2766, %case_body83
if_true29:
    %2767 = const i1 0
    %2768 = const time 0s 1e
    drv i1$ %write_rd1, %2767, %2768
    st i1* %write_rd.shadow, %2767
    %valid_instr28 = prb i1$ %valid_instr
    %2769 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr28, %2769
    br %if_exit28
if_false29:
    %2770 = const i1 1
    %2771 = const time 0s 1e
    drv i1$ %illegal_inst1, %2770, %2771
    st i1* %illegal_inst.shadow, %2770
    br %if_exit28
if_exit28:
    br %case_exit
case_body83:
    %2772 = const i1 1
    %2773 = const i1 0
    %2774 = and i1 %2772, %2773
    %2775 = const i1 1
    %2776 = and i1 %2774, %2775
    br %2776, %if_false30, %if_true30
2766:
    %2777 = const i1 0
    %2778 = const i32 2557485107
    %2779 = const i32 4293947519
    %2780 = and i32 %inst_data_i1, %2779
    %2781 = and i32 %2778, %2779
    %2782 = eq i32 %2780, %2781
    %2783 = or i1 %2777, %2782
    %2784 = const i32 2557501491
    %2785 = const i32 4293947519
    %2786 = and i32 %inst_data_i1, %2785
    %2787 = and i32 %2784, %2785
    %2788 = eq i32 %2786, %2787
    %2789 = or i1 %2783, %2788
    %2790 = const i32 2556440627
    %2791 = const i32 4293947519
    %2792 = and i32 %inst_data_i1, %2791
    %2793 = and i32 %2790, %2791
    %2794 = eq i32 %2792, %2793
    %2795 = or i1 %2789, %2794
    %2796 = const i32 2556457011
    %2797 = const i32 4293947519
    %2798 = and i32 %inst_data_i1, %2797
    %2799 = and i32 %2796, %2797
    %2800 = eq i32 %2798, %2799
    %2801 = or i1 %2795, %2800
    br %2801, %2802, %case_body84
if_true30:
    %2803 = const i1 0
    %2804 = const time 0s 1e
    drv i1$ %write_rd1, %2803, %2804
    st i1* %write_rd.shadow, %2803
    %valid_instr29 = prb i1$ %valid_instr
    %2805 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr29, %2805
    br %if_exit29
if_false30:
    %2806 = const i1 1
    %2807 = const time 0s 1e
    drv i1$ %illegal_inst1, %2806, %2807
    st i1* %illegal_inst.shadow, %2806
    br %if_exit29
if_exit29:
    br %case_exit
case_body84:
    %2808 = const i1 1
    %2809 = const i1 0
    %2810 = and i1 %2808, %2809
    %2811 = const i1 0
    %2812 = and i1 %2810, %2811
    %2813 = const i32 8
    %2814 = const i32 32
    %2815 = sge i32 %2813, %2814
    %2816 = and i1 %2812, %2815
    br %2816, %if_false31, %if_true31
2802:
    %2817 = const i1 0
    %2818 = const i32 2557481011
    %2819 = const i32 4293947519
    %2820 = and i32 %inst_data_i1, %2819
    %2821 = and i32 %2818, %2819
    %2822 = eq i32 %2820, %2821
    %2823 = or i1 %2817, %2822
    %2824 = const i32 2557497395
    %2825 = const i32 4293947519
    %2826 = and i32 %inst_data_i1, %2825
    %2827 = and i32 %2824, %2825
    %2828 = eq i32 %2826, %2827
    %2829 = or i1 %2823, %2828
    %2830 = const i32 2555392051
    %2831 = const i32 4293947519
    %2832 = and i32 %inst_data_i1, %2831
    %2833 = and i32 %2830, %2831
    %2834 = eq i32 %2832, %2833
    %2835 = or i1 %2829, %2834
    %2836 = const i32 2555408435
    %2837 = const i32 4293947519
    %2838 = and i32 %inst_data_i1, %2837
    %2839 = and i32 %2836, %2837
    %2840 = eq i32 %2838, %2839
    %2841 = or i1 %2835, %2840
    br %2841, %2842, %case_body85
if_true31:
    %2843 = const i1 0
    %2844 = const time 0s 1e
    drv i1$ %write_rd1, %2843, %2844
    st i1* %write_rd.shadow, %2843
    %valid_instr30 = prb i1$ %valid_instr
    %2845 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr30, %2845
    br %if_exit30
if_false31:
    %2846 = const i1 1
    %2847 = const time 0s 1e
    drv i1$ %illegal_inst1, %2846, %2847
    st i1* %illegal_inst.shadow, %2846
    br %if_exit30
if_exit30:
    br %case_exit
case_body85:
    %2848 = const i1 1
    %2849 = const i1 0
    %2850 = and i1 %2848, %2849
    %2851 = const i1 0
    %2852 = and i1 %2850, %2851
    %2853 = const i32 8
    %2854 = const i32 32
    %2855 = sge i32 %2853, %2854
    %2856 = and i1 %2852, %2855
    br %2856, %if_false32, %if_true32
2842:
    %2857 = const i1 0
    %2858 = const i32 2684354643
    %2859 = const i32 4261441663
    %2860 = and i32 %inst_data_i1, %2859
    %2861 = and i32 %2858, %2859
    %2862 = eq i32 %2860, %2861
    %2863 = or i1 %2857, %2862
    %2864 = const i32 2684358739
    %2865 = const i32 4261441663
    %2866 = and i32 %inst_data_i1, %2865
    %2867 = and i32 %2864, %2865
    %2868 = eq i32 %2866, %2867
    %2869 = or i1 %2863, %2868
    %2870 = const i32 2684362835
    %2871 = const i32 4261441663
    %2872 = and i32 %inst_data_i1, %2871
    %2873 = and i32 %2870, %2871
    %2874 = eq i32 %2872, %2873
    %2875 = or i1 %2869, %2874
    %2876 = const i32 3758100563
    %2877 = const i32 4293947519
    %2878 = and i32 %inst_data_i1, %2877
    %2879 = and i32 %2876, %2877
    %2880 = eq i32 %2878, %2879
    %2881 = or i1 %2875, %2880
    %2882 = const i32 3221225555
    %2883 = const i32 4293918847
    %2884 = and i32 %inst_data_i1, %2883
    %2885 = and i32 %2882, %2883
    %2886 = eq i32 %2884, %2885
    %2887 = or i1 %2881, %2886
    %2888 = const i32 3222274131
    %2889 = const i32 4293918847
    %2890 = and i32 %inst_data_i1, %2889
    %2891 = and i32 %2888, %2889
    %2892 = eq i32 %2890, %2891
    %2893 = or i1 %2887, %2892
    %2894 = const i32 3758096467
    %2895 = const i32 4293947519
    %2896 = and i32 %inst_data_i1, %2895
    %2897 = and i32 %2894, %2895
    %2898 = eq i32 %2896, %2897
    %2899 = or i1 %2893, %2898
    br %2899, %2900, %case_body86
if_true32:
    %2901 = const i1 0
    %2902 = const time 0s 1e
    drv i1$ %write_rd1, %2901, %2902
    st i1* %write_rd.shadow, %2901
    %valid_instr31 = prb i1$ %valid_instr
    %2903 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr31, %2903
    br %if_exit31
if_false32:
    %2904 = const i1 1
    %2905 = const time 0s 1e
    drv i1$ %illegal_inst1, %2904, %2905
    st i1* %illegal_inst.shadow, %2904
    br %if_exit31
if_exit31:
    br %case_exit
case_body86:
    %2906 = const i1 1
    br %2906, %if_false33, %if_true33
2900:
    %2907 = const i1 0
    %2908 = const i32 2684354611
    %2909 = const i32 4261441663
    %2910 = and i32 %inst_data_i1, %2909
    %2911 = and i32 %2908, %2909
    %2912 = eq i32 %2910, %2911
    %2913 = or i1 %2907, %2912
    %2914 = const i32 2684370995
    %2915 = const i32 4261441663
    %2916 = and i32 %inst_data_i1, %2915
    %2917 = and i32 %2914, %2915
    %2918 = eq i32 %2916, %2917
    %2919 = or i1 %2913, %2918
    %2920 = const i32 2717909043
    %2921 = const i32 4261441663
    %2922 = and i32 %inst_data_i1, %2921
    %2923 = and i32 %2920, %2921
    %2924 = eq i32 %2922, %2923
    %2925 = or i1 %2919, %2924
    %2926 = const i32 2717925427
    %2927 = const i32 4261441663
    %2928 = and i32 %inst_data_i1, %2927
    %2929 = and i32 %2926, %2927
    %2930 = eq i32 %2928, %2929
    %2931 = or i1 %2925, %2930
    %2932 = const i32 2751463475
    %2933 = const i32 4261441663
    %2934 = and i32 %inst_data_i1, %2933
    %2935 = and i32 %2932, %2933
    %2936 = eq i32 %2934, %2935
    %2937 = or i1 %2931, %2936
    %2938 = const i32 2751479859
    %2939 = const i32 4261441663
    %2940 = and i32 %inst_data_i1, %2939
    %2941 = and i32 %2938, %2939
    %2942 = eq i32 %2940, %2941
    %2943 = or i1 %2937, %2942
    %2944 = const i32 2785017907
    %2945 = const i32 4261441663
    %2946 = and i32 %inst_data_i1, %2945
    %2947 = and i32 %2944, %2945
    %2948 = eq i32 %2946, %2947
    %2949 = or i1 %2943, %2948
    %2950 = const i32 2785034291
    %2951 = const i32 4261441663
    %2952 = and i32 %inst_data_i1, %2951
    %2953 = and i32 %2950, %2951
    %2954 = eq i32 %2952, %2953
    %2955 = or i1 %2949, %2954
    %2956 = const i32 2818572339
    %2957 = const i32 4261441663
    %2958 = and i32 %inst_data_i1, %2957
    %2959 = and i32 %2956, %2957
    %2960 = eq i32 %2958, %2959
    %2961 = or i1 %2955, %2960
    %2962 = const i32 2818588723
    %2963 = const i32 4261441663
    %2964 = and i32 %inst_data_i1, %2963
    %2965 = and i32 %2962, %2963
    %2966 = eq i32 %2964, %2965
    %2967 = or i1 %2961, %2966
    %2968 = const i32 2852126771
    %2969 = const i32 4261441663
    %2970 = and i32 %inst_data_i1, %2969
    %2971 = and i32 %2968, %2969
    %2972 = eq i32 %2970, %2971
    %2973 = or i1 %2967, %2972
    %2974 = const i32 2852143155
    %2975 = const i32 4261441663
    %2976 = and i32 %inst_data_i1, %2975
    %2977 = and i32 %2974, %2975
    %2978 = eq i32 %2976, %2977
    %2979 = or i1 %2973, %2978
    %2980 = const i32 2551185459
    %2981 = const i32 4293947519
    %2982 = and i32 %inst_data_i1, %2981
    %2983 = and i32 %2980, %2981
    %2984 = eq i32 %2982, %2983
    %2985 = or i1 %2979, %2984
    br %2985, %2986, %case_body87
if_true33:
    %2987 = const i1 0
    %2988 = const time 0s 1e
    drv i1$ %write_rd1, %2987, %2988
    st i1* %write_rd.shadow, %2987
    %2989 = const i1 1
    %2990 = const time 0s 1e
    drv i1$ %uses_rd, %2989, %2990
    %valid_instr32 = prb i1$ %valid_instr
    %2991 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr32, %2991
    %2992 = const i1 1
    %2993 = const time 0s 1e
    drv i1$ %acc_register_rd, %2992, %2993
    br %if_exit32
if_false33:
    %2994 = const i1 1
    %2995 = const time 0s 1e
    drv i1$ %illegal_inst1, %2994, %2995
    st i1* %illegal_inst.shadow, %2994
    br %if_exit32
if_exit32:
    br %case_exit
case_body87:
    %2996 = const i1 1
    %2997 = const i1 1
    %2998 = and i1 %2996, %2997
    %2999 = const i32 8
    %3000 = const i32 64
    %3001 = sge i32 %2999, %3000
    %3002 = and i1 %2998, %3001
    br %3002, %if_false34, %if_true34
2986:
    %3003 = const i1 0
    %3004 = const i32 2717909075
    %3005 = const i32 4261441663
    %3006 = and i32 %inst_data_i1, %3005
    %3007 = and i32 %3004, %3005
    %3008 = eq i32 %3006, %3007
    %3009 = or i1 %3003, %3008
    %3010 = const i32 2717913171
    %3011 = const i32 4261441663
    %3012 = and i32 %inst_data_i1, %3011
    %3013 = and i32 %3010, %3011
    %3014 = eq i32 %3012, %3013
    %3015 = or i1 %3009, %3014
    %3016 = const i32 2717917267
    %3017 = const i32 4261441663
    %3018 = and i32 %inst_data_i1, %3017
    %3019 = and i32 %3016, %3017
    %3020 = eq i32 %3018, %3019
    %3021 = or i1 %3015, %3020
    %3022 = const i32 3791654995
    %3023 = const i32 4293947519
    %3024 = and i32 %inst_data_i1, %3023
    %3025 = and i32 %3022, %3023
    %3026 = eq i32 %3024, %3025
    %3027 = or i1 %3021, %3026
    %3028 = const i32 3254779987
    %3029 = const i32 4293918847
    %3030 = and i32 %inst_data_i1, %3029
    %3031 = and i32 %3028, %3029
    %3032 = eq i32 %3030, %3031
    %3033 = or i1 %3027, %3032
    %3034 = const i32 3255828563
    %3035 = const i32 4293918847
    %3036 = and i32 %inst_data_i1, %3035
    %3037 = and i32 %3034, %3035
    %3038 = eq i32 %3036, %3037
    %3039 = or i1 %3033, %3038
    br %3039, %3040, %case_body88
if_true34:
    %3041 = const i1 0
    %3042 = const time 0s 1e
    drv i1$ %write_rd1, %3041, %3042
    st i1* %write_rd.shadow, %3041
    %valid_instr33 = prb i1$ %valid_instr
    %3043 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr33, %3043
    br %if_exit33
if_false34:
    %3044 = const i1 1
    %3045 = const time 0s 1e
    drv i1$ %illegal_inst1, %3044, %3045
    st i1* %illegal_inst.shadow, %3044
    br %if_exit33
if_exit33:
    br %case_exit
case_body88:
    %3046 = const i1 1
    br %3046, %if_false35, %if_true35
3040:
    %3047 = const i1 0
    %3048 = const i32 2751463507
    %3049 = const i32 4261441663
    %3050 = and i32 %inst_data_i1, %3049
    %3051 = and i32 %3048, %3049
    %3052 = eq i32 %3050, %3051
    %3053 = or i1 %3047, %3052
    %3054 = const i32 2751467603
    %3055 = const i32 4261441663
    %3056 = and i32 %inst_data_i1, %3055
    %3057 = and i32 %3054, %3055
    %3058 = eq i32 %3056, %3057
    %3059 = or i1 %3053, %3058
    %3060 = const i32 2751471699
    %3061 = const i32 4261441663
    %3062 = and i32 %inst_data_i1, %3061
    %3063 = and i32 %3060, %3061
    %3064 = eq i32 %3062, %3063
    %3065 = or i1 %3059, %3064
    %3066 = const i32 3825209427
    %3067 = const i32 4293947519
    %3068 = and i32 %inst_data_i1, %3067
    %3069 = and i32 %3066, %3067
    %3070 = eq i32 %3068, %3069
    %3071 = or i1 %3065, %3070
    %3072 = const i32 3288334419
    %3073 = const i32 4293918847
    %3074 = and i32 %inst_data_i1, %3073
    %3075 = and i32 %3072, %3073
    %3076 = eq i32 %3074, %3075
    %3077 = or i1 %3071, %3076
    %3078 = const i32 3289382995
    %3079 = const i32 4293918847
    %3080 = and i32 %inst_data_i1, %3079
    %3081 = and i32 %3078, %3079
    %3082 = eq i32 %3080, %3081
    %3083 = or i1 %3077, %3082
    %3084 = const i32 3825205331
    %3085 = const i32 4293947519
    %3086 = and i32 %inst_data_i1, %3085
    %3087 = and i32 %3084, %3085
    %3088 = eq i32 %3086, %3087
    %3089 = or i1 %3083, %3088
    br %3089, %3090, %case_body89
if_true35:
    %3091 = const i1 0
    %3092 = const time 0s 1e
    drv i1$ %write_rd1, %3091, %3092
    st i1* %write_rd.shadow, %3091
    %3093 = const i1 1
    %3094 = const time 0s 1e
    drv i1$ %uses_rd, %3093, %3094
    %valid_instr34 = prb i1$ %valid_instr
    %3095 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr34, %3095
    %3096 = const i1 1
    %3097 = const time 0s 1e
    drv i1$ %acc_register_rd, %3096, %3097
    br %if_exit34
if_false35:
    %3098 = const i1 1
    %3099 = const time 0s 1e
    drv i1$ %illegal_inst1, %3098, %3099
    st i1* %illegal_inst.shadow, %3098
    br %if_exit34
if_exit34:
    br %case_exit
case_body89:
    %3100 = const i1 0
    %3101 = const i1 0
    %inst_data_i16 = prb i32$ %inst_data_i
    %3102 = const i4 12
    %3103 = const i32 0
    %3104 = shr i32 %inst_data_i16, i32 %3103, i4 %3102
    %3105 = exts i3, i32 %3104, 0, 3
    %3106 = const i3 0
    %3107 = uge i3 %3105, %3106
    %inst_data_i17 = prb i32$ %inst_data_i
    %3108 = const i4 12
    %3109 = const i32 0
    %3110 = shr i32 %inst_data_i17, i32 %3109, i4 %3108
    %3111 = exts i3, i32 %3110, 0, 3
    %3112 = const i3 4
    %3113 = ule i3 %3111, %3112
    %3114 = and i1 %3107, %3113
    %3115 = or i1 %3101, %3114
    %inst_data_i18 = prb i32$ %inst_data_i
    %3116 = const i4 12
    %3117 = const i32 0
    %3118 = shr i32 %inst_data_i18, i32 %3117, i4 %3116
    %3119 = exts i3, i32 %3118, 0, 3
    %3120 = const i3 7
    %3121 = eq i3 %3119, %3120
    %3122 = or i1 %3115, %3121
    %3123 = and i1 %3100, %3122
    %3124 = const i1 0
    %inst_data_i19 = prb i32$ %inst_data_i
    %3125 = const i4 12
    %3126 = const i32 0
    %3127 = shr i32 %inst_data_i19, i32 %3126, i4 %3125
    %3128 = exts i3, i32 %3127, 0, 3
    %3129 = const i3 5
    %3130 = eq i3 %3128, %3129
    %3131 = and i1 %3124, %3130
    %3132 = or i1 %3123, %3131
    br %3132, %if_false36, %if_true36
3090:
    %3133 = const i1 0
    %3134 = const i32 2684362803
    %3135 = const i32 4261441663
    %3136 = and i32 %inst_data_i1, %3135
    %3137 = and i32 %3134, %3135
    %3138 = eq i32 %3136, %3137
    %3139 = or i1 %3133, %3138
    %3140 = const i32 2684379187
    %3141 = const i32 4261441663
    %3142 = and i32 %inst_data_i1, %3141
    %3143 = and i32 %3140, %3141
    %3144 = eq i32 %3142, %3143
    %3145 = or i1 %3139, %3144
    %3146 = const i32 2717917235
    %3147 = const i32 4261441663
    %3148 = and i32 %inst_data_i1, %3147
    %3149 = and i32 %3146, %3147
    %3150 = eq i32 %3148, %3149
    %3151 = or i1 %3145, %3150
    %3152 = const i32 2717933619
    %3153 = const i32 4261441663
    %3154 = and i32 %inst_data_i1, %3153
    %3155 = and i32 %3152, %3153
    %3156 = eq i32 %3154, %3155
    %3157 = or i1 %3151, %3156
    %3158 = const i32 2751471667
    %3159 = const i32 4261441663
    %3160 = and i32 %inst_data_i1, %3159
    %3161 = and i32 %3158, %3159
    %3162 = eq i32 %3160, %3161
    %3163 = or i1 %3157, %3162
    %3164 = const i32 2751488051
    %3165 = const i32 4261441663
    %3166 = and i32 %inst_data_i1, %3165
    %3167 = and i32 %3164, %3165
    %3168 = eq i32 %3166, %3167
    %3169 = or i1 %3163, %3168
    %3170 = const i32 2785026099
    %3171 = const i32 4261441663
    %3172 = and i32 %inst_data_i1, %3171
    %3173 = and i32 %3170, %3171
    %3174 = eq i32 %3172, %3173
    %3175 = or i1 %3169, %3174
    %3176 = const i32 2785042483
    %3177 = const i32 4261441663
    %3178 = and i32 %inst_data_i1, %3177
    %3179 = and i32 %3176, %3177
    %3180 = eq i32 %3178, %3179
    %3181 = or i1 %3175, %3180
    %3182 = const i32 2818580531
    %3183 = const i32 4261441663
    %3184 = and i32 %inst_data_i1, %3183
    %3185 = and i32 %3182, %3183
    %3186 = eq i32 %3184, %3185
    %3187 = or i1 %3181, %3186
    %3188 = const i32 2818596915
    %3189 = const i32 4261441663
    %3190 = and i32 %inst_data_i1, %3189
    %3191 = and i32 %3188, %3189
    %3192 = eq i32 %3190, %3191
    %3193 = or i1 %3187, %3192
    %3194 = const i32 2852134963
    %3195 = const i32 4261441663
    %3196 = and i32 %inst_data_i1, %3195
    %3197 = and i32 %3194, %3195
    %3198 = eq i32 %3196, %3197
    %3199 = or i1 %3193, %3198
    %3200 = const i32 2852151347
    %3201 = const i32 4261441663
    %3202 = and i32 %inst_data_i1, %3201
    %3203 = and i32 %3200, %3201
    %3204 = eq i32 %3202, %3203
    %3205 = or i1 %3199, %3204
    %3206 = const i32 2551193651
    %3207 = const i32 4293947519
    %3208 = and i32 %inst_data_i1, %3207
    %3209 = and i32 %3206, %3207
    %3210 = eq i32 %3208, %3209
    %3211 = or i1 %3205, %3210
    br %3211, %3212, %case_body90
if_true36:
    %3213 = const i1 0
    %3214 = const time 0s 1e
    drv i1$ %write_rd1, %3213, %3214
    st i1* %write_rd.shadow, %3213
    %3215 = const i1 1
    %3216 = const time 0s 1e
    drv i1$ %uses_rd, %3215, %3216
    %valid_instr35 = prb i1$ %valid_instr
    %3217 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr35, %3217
    %3218 = const i1 1
    %3219 = const time 0s 1e
    drv i1$ %acc_register_rd, %3218, %3219
    br %if_exit35
if_false36:
    %3220 = const i1 1
    %3221 = const time 0s 1e
    drv i1$ %illegal_inst1, %3220, %3221
    st i1* %illegal_inst.shadow, %3220
    br %if_exit35
if_exit35:
    br %case_exit
case_body90:
    %3222 = const i1 1
    %3223 = const i1 0
    %3224 = and i1 %3222, %3223
    %3225 = const i32 8
    %3226 = const i32 32
    %3227 = sge i32 %3225, %3226
    %3228 = and i1 %3224, %3227
    br %3228, %if_false37, %if_true37
3212:
    %3229 = const i1 0
    %3230 = const i32 2550145075
    %3231 = const i32 4293947519
    %3232 = and i32 %inst_data_i1, %3231
    %3233 = and i32 %3230, %3231
    %3234 = eq i32 %3232, %3233
    %3235 = or i1 %3229, %3234
    %3236 = const i32 2552242227
    %3237 = const i32 4293947519
    %3238 = and i32 %inst_data_i1, %3237
    %3239 = and i32 %3236, %3237
    %3240 = eq i32 %3238, %3239
    %3241 = or i1 %3235, %3240
    %3242 = const i32 2552258611
    %3243 = const i32 4293947519
    %3244 = and i32 %inst_data_i1, %3243
    %3245 = and i32 %3242, %3243
    %3246 = eq i32 %3244, %3245
    %3247 = or i1 %3241, %3246
    br %3247, %3248, %case_body91
if_true37:
    %3249 = const i1 0
    %3250 = const time 0s 1e
    drv i1$ %write_rd1, %3249, %3250
    st i1* %write_rd.shadow, %3249
    %valid_instr36 = prb i1$ %valid_instr
    %3251 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr36, %3251
    br %if_exit36
if_false37:
    %3252 = const i1 1
    %3253 = const time 0s 1e
    drv i1$ %illegal_inst1, %3252, %3253
    st i1* %illegal_inst.shadow, %3252
    br %if_exit36
if_exit36:
    br %case_exit
case_body91:
    %3254 = const i1 1
    %3255 = const i1 0
    %3256 = and i1 %3254, %3255
    %3257 = const i32 8
    %3258 = const i32 32
    %3259 = sge i32 %3257, %3258
    %3260 = and i1 %3256, %3259
    %3261 = const i1 1
    %3262 = not i1 %3261
    %3263 = and i1 %3260, %3262
    br %3263, %if_false38, %if_true38
3248:
    %3264 = const i1 0
    %3265 = const i32 2751479891
    %3266 = const i32 4261441663
    %3267 = and i32 %inst_data_i1, %3266
    %3268 = and i32 %3265, %3266
    %3269 = eq i32 %3267, %3268
    %3270 = or i1 %3264, %3269
    %3271 = const i32 2751483987
    %3272 = const i32 4261441663
    %3273 = and i32 %inst_data_i1, %3272
    %3274 = and i32 %3271, %3272
    %3275 = eq i32 %3273, %3274
    %3276 = or i1 %3270, %3275
    %3277 = const i32 2751488083
    %3278 = const i32 4261441663
    %3279 = and i32 %inst_data_i1, %3278
    %3280 = and i32 %3277, %3278
    %3281 = eq i32 %3279, %3280
    %3282 = or i1 %3276, %3281
    %3283 = const i32 3825225811
    %3284 = const i32 4293947519
    %3285 = and i32 %inst_data_i1, %3284
    %3286 = and i32 %3283, %3284
    %3287 = eq i32 %3285, %3286
    %3288 = or i1 %3282, %3287
    %3289 = const i32 3825221715
    %3290 = const i32 4293947519
    %3291 = and i32 %inst_data_i1, %3290
    %3292 = and i32 %3289, %3290
    %3293 = eq i32 %3291, %3292
    %3294 = or i1 %3288, %3293
    br %3294, %3295, %case_body92
if_true38:
    %3296 = const i1 0
    %3297 = const time 0s 1e
    drv i1$ %write_rd1, %3296, %3297
    st i1* %write_rd.shadow, %3296
    %valid_instr37 = prb i1$ %valid_instr
    %3298 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr37, %3298
    br %if_exit37
if_false38:
    %3299 = const i1 1
    %3300 = const time 0s 1e
    drv i1$ %illegal_inst1, %3299, %3300
    st i1* %illegal_inst.shadow, %3299
    br %if_exit37
if_exit37:
    br %case_exit
case_body92:
    %3301 = const i1 0
    br %3301, %if_false39, %if_true39
3295:
    %3302 = const i1 0
    %3303 = const i32 2684358707
    %3304 = const i32 4261441663
    %3305 = and i32 %inst_data_i1, %3304
    %3306 = and i32 %3303, %3304
    %3307 = eq i32 %3305, %3306
    %3308 = or i1 %3302, %3307
    %3309 = const i32 2684375091
    %3310 = const i32 4261441663
    %3311 = and i32 %inst_data_i1, %3310
    %3312 = and i32 %3309, %3310
    %3313 = eq i32 %3311, %3312
    %3314 = or i1 %3308, %3313
    %3315 = const i32 2717913139
    %3316 = const i32 4261441663
    %3317 = and i32 %inst_data_i1, %3316
    %3318 = and i32 %3315, %3316
    %3319 = eq i32 %3317, %3318
    %3320 = or i1 %3314, %3319
    %3321 = const i32 2717929523
    %3322 = const i32 4261441663
    %3323 = and i32 %inst_data_i1, %3322
    %3324 = and i32 %3321, %3322
    %3325 = eq i32 %3323, %3324
    %3326 = or i1 %3320, %3325
    %3327 = const i32 2751467571
    %3328 = const i32 4261441663
    %3329 = and i32 %inst_data_i1, %3328
    %3330 = and i32 %3327, %3328
    %3331 = eq i32 %3329, %3330
    %3332 = or i1 %3326, %3331
    %3333 = const i32 2751483955
    %3334 = const i32 4261441663
    %3335 = and i32 %inst_data_i1, %3334
    %3336 = and i32 %3333, %3334
    %3337 = eq i32 %3335, %3336
    %3338 = or i1 %3332, %3337
    %3339 = const i32 2785022003
    %3340 = const i32 4261441663
    %3341 = and i32 %inst_data_i1, %3340
    %3342 = and i32 %3339, %3340
    %3343 = eq i32 %3341, %3342
    %3344 = or i1 %3338, %3343
    %3345 = const i32 2785038387
    %3346 = const i32 4261441663
    %3347 = and i32 %inst_data_i1, %3346
    %3348 = and i32 %3345, %3346
    %3349 = eq i32 %3347, %3348
    %3350 = or i1 %3344, %3349
    %3351 = const i32 2818576435
    %3352 = const i32 4261441663
    %3353 = and i32 %inst_data_i1, %3352
    %3354 = and i32 %3351, %3352
    %3355 = eq i32 %3353, %3354
    %3356 = or i1 %3350, %3355
    %3357 = const i32 2818592819
    %3358 = const i32 4261441663
    %3359 = and i32 %inst_data_i1, %3358
    %3360 = and i32 %3357, %3358
    %3361 = eq i32 %3359, %3360
    %3362 = or i1 %3356, %3361
    %3363 = const i32 2852130867
    %3364 = const i32 4261441663
    %3365 = and i32 %inst_data_i1, %3364
    %3366 = and i32 %3363, %3364
    %3367 = eq i32 %3365, %3366
    %3368 = or i1 %3362, %3367
    %3369 = const i32 2852147251
    %3370 = const i32 4261441663
    %3371 = and i32 %inst_data_i1, %3370
    %3372 = and i32 %3369, %3370
    %3373 = eq i32 %3371, %3372
    %3374 = or i1 %3368, %3373
    %3375 = const i32 2551189555
    %3376 = const i32 4293947519
    %3377 = and i32 %inst_data_i1, %3376
    %3378 = and i32 %3375, %3376
    %3379 = eq i32 %3377, %3378
    %3380 = or i1 %3374, %3379
    br %3380, %3381, %case_body93
if_true39:
    %3382 = const i1 0
    %3383 = const time 0s 1e
    drv i1$ %write_rd1, %3382, %3383
    st i1* %write_rd.shadow, %3382
    %3384 = const i1 1
    %3385 = const time 0s 1e
    drv i1$ %uses_rd, %3384, %3385
    %valid_instr38 = prb i1$ %valid_instr
    %3386 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr38, %3386
    %3387 = const i1 1
    %3388 = const time 0s 1e
    drv i1$ %acc_register_rd, %3387, %3388
    br %if_exit38
if_false39:
    %3389 = const i1 1
    %3390 = const time 0s 1e
    drv i1$ %illegal_inst1, %3389, %3390
    st i1* %illegal_inst.shadow, %3389
    br %if_exit38
if_exit38:
    br %case_exit
case_body93:
    %3391 = const i1 1
    %3392 = const i1 0
    %3393 = and i1 %3391, %3392
    %3394 = const i32 8
    %3395 = const i32 32
    %3396 = sge i32 %3394, %3395
    %3397 = and i1 %3393, %3396
    br %3397, %if_false40, %if_true40
3381:
    %3398 = const i1 0
    %3399 = const i32 2550140979
    %3400 = const i32 4293947519
    %3401 = and i32 %inst_data_i1, %3400
    %3402 = and i32 %3399, %3400
    %3403 = eq i32 %3401, %3402
    %3404 = or i1 %3398, %3403
    %3405 = const i32 2552238131
    %3406 = const i32 4293947519
    %3407 = and i32 %inst_data_i1, %3406
    %3408 = and i32 %3405, %3406
    %3409 = eq i32 %3407, %3408
    %3410 = or i1 %3404, %3409
    %3411 = const i32 2552254515
    %3412 = const i32 4293947519
    %3413 = and i32 %inst_data_i1, %3412
    %3414 = and i32 %3411, %3412
    %3415 = eq i32 %3413, %3414
    %3416 = or i1 %3410, %3415
    br %3416, %3417, %case_body94
if_true40:
    %3418 = const i1 0
    %3419 = const time 0s 1e
    drv i1$ %write_rd1, %3418, %3419
    st i1* %write_rd.shadow, %3418
    %valid_instr39 = prb i1$ %valid_instr
    %3420 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr39, %3420
    br %if_exit39
if_false40:
    %3421 = const i1 1
    %3422 = const time 0s 1e
    drv i1$ %illegal_inst1, %3421, %3422
    st i1* %illegal_inst.shadow, %3421
    br %if_exit39
if_exit39:
    br %case_exit
case_body94:
    %3423 = const i1 1
    %3424 = const i1 0
    %3425 = and i1 %3423, %3424
    %3426 = const i32 8
    %3427 = const i32 32
    %3428 = sge i32 %3426, %3427
    %3429 = and i1 %3425, %3428
    %3430 = const i1 1
    %3431 = not i1 %3430
    %3432 = and i1 %3429, %3431
    br %3432, %if_false41, %if_true41
3417:
    %3433 = const i1 0
    %3434 = const i32 2785017939
    %3435 = const i32 4261441663
    %3436 = and i32 %inst_data_i1, %3435
    %3437 = and i32 %3434, %3435
    %3438 = eq i32 %3436, %3437
    %3439 = or i1 %3433, %3438
    %3440 = const i32 2785022035
    %3441 = const i32 4261441663
    %3442 = and i32 %inst_data_i1, %3441
    %3443 = and i32 %3440, %3441
    %3444 = eq i32 %3442, %3443
    %3445 = or i1 %3439, %3444
    %3446 = const i32 2785026131
    %3447 = const i32 4261441663
    %3448 = and i32 %inst_data_i1, %3447
    %3449 = and i32 %3446, %3447
    %3450 = eq i32 %3448, %3449
    %3451 = or i1 %3445, %3450
    %3452 = const i32 3858763859
    %3453 = const i32 4293947519
    %3454 = and i32 %inst_data_i1, %3453
    %3455 = and i32 %3452, %3453
    %3456 = eq i32 %3454, %3455
    %3457 = or i1 %3451, %3456
    %3458 = const i32 3321888851
    %3459 = const i32 4293918847
    %3460 = and i32 %inst_data_i1, %3459
    %3461 = and i32 %3458, %3459
    %3462 = eq i32 %3460, %3461
    %3463 = or i1 %3457, %3462
    %3464 = const i32 3322937427
    %3465 = const i32 4293918847
    %3466 = and i32 %inst_data_i1, %3465
    %3467 = and i32 %3464, %3465
    %3468 = eq i32 %3466, %3467
    %3469 = or i1 %3463, %3468
    %3470 = const i32 3858759763
    %3471 = const i32 4293947519
    %3472 = and i32 %inst_data_i1, %3471
    %3473 = and i32 %3470, %3471
    %3474 = eq i32 %3472, %3473
    %3475 = or i1 %3469, %3474
    br %3475, %3476, %case_body95
if_true41:
    %3477 = const i1 0
    %3478 = const time 0s 1e
    drv i1$ %write_rd1, %3477, %3478
    st i1* %write_rd.shadow, %3477
    %valid_instr40 = prb i1$ %valid_instr
    %3479 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr40, %3479
    br %if_exit40
if_false41:
    %3480 = const i1 1
    %3481 = const time 0s 1e
    drv i1$ %illegal_inst1, %3480, %3481
    st i1* %illegal_inst.shadow, %3480
    br %if_exit40
if_exit40:
    br %case_exit
case_body95:
    %3482 = const i1 0
    br %3482, %if_false42, %if_true42
3476:
    %3483 = const i1 0
    %3484 = const i32 2684366899
    %3485 = const i32 4261441663
    %3486 = and i32 %inst_data_i1, %3485
    %3487 = and i32 %3484, %3485
    %3488 = eq i32 %3486, %3487
    %3489 = or i1 %3483, %3488
    %3490 = const i32 2684383283
    %3491 = const i32 4261441663
    %3492 = and i32 %inst_data_i1, %3491
    %3493 = and i32 %3490, %3491
    %3494 = eq i32 %3492, %3493
    %3495 = or i1 %3489, %3494
    %3496 = const i32 2717921331
    %3497 = const i32 4261441663
    %3498 = and i32 %inst_data_i1, %3497
    %3499 = and i32 %3496, %3497
    %3500 = eq i32 %3498, %3499
    %3501 = or i1 %3495, %3500
    %3502 = const i32 2717937715
    %3503 = const i32 4261441663
    %3504 = and i32 %inst_data_i1, %3503
    %3505 = and i32 %3502, %3503
    %3506 = eq i32 %3504, %3505
    %3507 = or i1 %3501, %3506
    %3508 = const i32 2751475763
    %3509 = const i32 4261441663
    %3510 = and i32 %inst_data_i1, %3509
    %3511 = and i32 %3508, %3509
    %3512 = eq i32 %3510, %3511
    %3513 = or i1 %3507, %3512
    %3514 = const i32 2751492147
    %3515 = const i32 4261441663
    %3516 = and i32 %inst_data_i1, %3515
    %3517 = and i32 %3514, %3515
    %3518 = eq i32 %3516, %3517
    %3519 = or i1 %3513, %3518
    %3520 = const i32 2785030195
    %3521 = const i32 4261441663
    %3522 = and i32 %inst_data_i1, %3521
    %3523 = and i32 %3520, %3521
    %3524 = eq i32 %3522, %3523
    %3525 = or i1 %3519, %3524
    %3526 = const i32 2785046579
    %3527 = const i32 4261441663
    %3528 = and i32 %inst_data_i1, %3527
    %3529 = and i32 %3526, %3527
    %3530 = eq i32 %3528, %3529
    %3531 = or i1 %3525, %3530
    %3532 = const i32 2818584627
    %3533 = const i32 4261441663
    %3534 = and i32 %inst_data_i1, %3533
    %3535 = and i32 %3532, %3533
    %3536 = eq i32 %3534, %3535
    %3537 = or i1 %3531, %3536
    %3538 = const i32 2818601011
    %3539 = const i32 4261441663
    %3540 = and i32 %inst_data_i1, %3539
    %3541 = and i32 %3538, %3539
    %3542 = eq i32 %3540, %3541
    %3543 = or i1 %3537, %3542
    %3544 = const i32 2852139059
    %3545 = const i32 4261441663
    %3546 = and i32 %inst_data_i1, %3545
    %3547 = and i32 %3544, %3545
    %3548 = eq i32 %3546, %3547
    %3549 = or i1 %3543, %3548
    %3550 = const i32 2852155443
    %3551 = const i32 4261441663
    %3552 = and i32 %inst_data_i1, %3551
    %3553 = and i32 %3550, %3551
    %3554 = eq i32 %3552, %3553
    %3555 = or i1 %3549, %3554
    br %3555, %3556, %case_body96
if_true42:
    %3557 = const i1 0
    %3558 = const time 0s 1e
    drv i1$ %write_rd1, %3557, %3558
    st i1* %write_rd.shadow, %3557
    %3559 = const i1 1
    %3560 = const time 0s 1e
    drv i1$ %uses_rd, %3559, %3560
    %valid_instr41 = prb i1$ %valid_instr
    %3561 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr41, %3561
    %3562 = const i1 1
    %3563 = const time 0s 1e
    drv i1$ %acc_register_rd, %3562, %3563
    br %if_exit41
if_false42:
    %3564 = const i1 1
    %3565 = const time 0s 1e
    drv i1$ %illegal_inst1, %3564, %3565
    st i1* %illegal_inst.shadow, %3564
    br %if_exit41
if_exit41:
    br %case_exit
case_body96:
    %3566 = const i1 1
    %3567 = const i1 0
    %3568 = and i1 %3566, %3567
    %3569 = const i32 8
    %3570 = const i32 16
    %3571 = sge i32 %3569, %3570
    %3572 = and i1 %3568, %3571
    br %3572, %if_false43, %if_true43
3556:
    %3573 = const i1 0
    %3574 = const i32 2550149171
    %3575 = const i32 4293947519
    %3576 = and i32 %inst_data_i1, %3575
    %3577 = and i32 %3574, %3575
    %3578 = eq i32 %3576, %3577
    %3579 = or i1 %3573, %3578
    %3580 = const i32 2551197747
    %3581 = const i32 4293947519
    %3582 = and i32 %inst_data_i1, %3581
    %3583 = and i32 %3580, %3581
    %3584 = eq i32 %3582, %3583
    %3585 = or i1 %3579, %3584
    %3586 = const i32 2552246323
    %3587 = const i32 4293947519
    %3588 = and i32 %inst_data_i1, %3587
    %3589 = and i32 %3586, %3587
    %3590 = eq i32 %3588, %3589
    %3591 = or i1 %3585, %3590
    %3592 = const i32 2552262707
    %3593 = const i32 4293947519
    %3594 = and i32 %inst_data_i1, %3593
    %3595 = and i32 %3592, %3593
    %3596 = eq i32 %3594, %3595
    %3597 = or i1 %3591, %3596
    br %3597, %3598, %case_body97
if_true43:
    %3599 = const i1 0
    %3600 = const time 0s 1e
    drv i1$ %write_rd1, %3599, %3600
    st i1* %write_rd.shadow, %3599
    %valid_instr42 = prb i1$ %valid_instr
    %3601 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr42, %3601
    br %if_exit42
if_false43:
    %3602 = const i1 1
    %3603 = const time 0s 1e
    drv i1$ %illegal_inst1, %3602, %3603
    st i1* %illegal_inst.shadow, %3602
    br %if_exit42
if_exit42:
    br %case_exit
case_body97:
    %3604 = const i1 1
    %3605 = const i1 0
    %3606 = and i1 %3604, %3605
    %3607 = const i32 8
    %3608 = const i32 16
    %3609 = sge i32 %3607, %3608
    %3610 = and i1 %3606, %3609
    %3611 = const i1 1
    %3612 = not i1 %3611
    %3613 = and i1 %3610, %3612
    br %3613, %if_false44, %if_true44
3598:
    %3614 = const i1 0
    %3615 = const i32 4026531923
    %3616 = const i32 4293947519
    %3617 = and i32 %inst_data_i1, %3616
    %3618 = and i32 %3615, %3616
    %3619 = eq i32 %3617, %3618
    %3620 = or i1 %3614, %3619
    %3621 = const i32 3489661011
    %3622 = const i32 4293918847
    %3623 = and i32 %inst_data_i1, %3622
    %3624 = and i32 %3621, %3622
    %3625 = eq i32 %3623, %3624
    %3626 = or i1 %3620, %3625
    %3627 = const i32 3490709587
    %3628 = const i32 4293918847
    %3629 = and i32 %inst_data_i1, %3628
    %3630 = and i32 %3627, %3628
    %3631 = eq i32 %3629, %3630
    %3632 = or i1 %3626, %3631
    br %3632, %3633, %case_body98
if_true44:
    %3634 = const i1 0
    %3635 = const time 0s 1e
    drv i1$ %write_rd1, %3634, %3635
    st i1* %write_rd.shadow, %3634
    %valid_instr43 = prb i1$ %valid_instr
    %3636 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr43, %3636
    br %if_exit43
if_false44:
    %3637 = const i1 1
    %3638 = const time 0s 1e
    drv i1$ %illegal_inst1, %3637, %3638
    st i1* %illegal_inst.shadow, %3637
    br %if_exit43
if_exit43:
    br %case_exit
case_body98:
    %3639 = const i1 1
    br %3639, %if_false45, %if_true45
3633:
    %3640 = const i1 0
    %3641 = const i32 3523215443
    %3642 = const i32 4293918847
    %3643 = and i32 %inst_data_i1, %3642
    %3644 = and i32 %3641, %3642
    %3645 = eq i32 %3643, %3644
    %3646 = or i1 %3640, %3645
    %3647 = const i32 3524264019
    %3648 = const i32 4293918847
    %3649 = and i32 %inst_data_i1, %3648
    %3650 = and i32 %3647, %3648
    %3651 = eq i32 %3649, %3650
    %3652 = or i1 %3646, %3651
    br %3652, %3653, %case_body99
if_true45:
    %3654 = const i4 1
    %3655 = const time 0s 1e
    drv i4$ %opa_select, %3654, %3655
    %3656 = const i1 0
    %3657 = const time 0s 1e
    drv i1$ %write_rd1, %3656, %3657
    st i1* %write_rd.shadow, %3656
    %valid_instr44 = prb i1$ %valid_instr
    %3658 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr44, %3658
    br %if_exit44
if_false45:
    %3659 = const i1 1
    %3660 = const time 0s 1e
    drv i1$ %illegal_inst1, %3659, %3660
    st i1* %illegal_inst.shadow, %3659
    br %if_exit44
if_exit44:
    br %case_exit
case_body99:
    %3661 = const i1 1
    br %3661, %if_false46, %if_true46
3653:
    %3662 = const i1 0
    %3663 = const i32 4093640787
    %3664 = const i32 4293947519
    %3665 = and i32 %inst_data_i1, %3664
    %3666 = and i32 %3663, %3664
    %3667 = eq i32 %3665, %3666
    %3668 = or i1 %3662, %3667
    %3669 = const i32 3556769875
    %3670 = const i32 4293918847
    %3671 = and i32 %inst_data_i1, %3670
    %3672 = and i32 %3669, %3670
    %3673 = eq i32 %3671, %3672
    %3674 = or i1 %3668, %3673
    %3675 = const i32 3557818451
    %3676 = const i32 4293918847
    %3677 = and i32 %inst_data_i1, %3676
    %3678 = and i32 %3675, %3676
    %3679 = eq i32 %3677, %3678
    %3680 = or i1 %3674, %3679
    br %3680, %3681, %case_body100
if_true46:
    %3682 = const i4 1
    %3683 = const time 0s 1e
    drv i4$ %opa_select, %3682, %3683
    %3684 = const i1 0
    %3685 = const time 0s 1e
    drv i1$ %write_rd1, %3684, %3685
    st i1* %write_rd.shadow, %3684
    %valid_instr45 = prb i1$ %valid_instr
    %3686 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr45, %3686
    br %if_exit45
if_false46:
    %3687 = const i1 1
    %3688 = const time 0s 1e
    drv i1$ %illegal_inst1, %3687, %3688
    st i1* %illegal_inst.shadow, %3687
    br %if_exit45
if_exit45:
    br %case_exit
case_body100:
    %3689 = const i1 0
    br %3689, %if_false47, %if_true47
3681:
    %3690 = const i1 0
    %3691 = const i32 2550161459
    %3692 = const i32 4293947519
    %3693 = and i32 %inst_data_i1, %3692
    %3694 = and i32 %3691, %3692
    %3695 = eq i32 %3693, %3694
    %3696 = or i1 %3690, %3695
    %3697 = const i32 2553290803
    %3698 = const i32 4293947519
    %3699 = and i32 %inst_data_i1, %3698
    %3700 = and i32 %3697, %3698
    %3701 = eq i32 %3699, %3700
    %3702 = or i1 %3696, %3701
    %3703 = const i32 2553307187
    %3704 = const i32 4293947519
    %3705 = and i32 %inst_data_i1, %3704
    %3706 = and i32 %3703, %3704
    %3707 = eq i32 %3705, %3706
    %3708 = or i1 %3702, %3707
    br %3708, %3709, %case_body101
if_true47:
    %3710 = const i4 1
    %3711 = const time 0s 1e
    drv i4$ %opa_select, %3710, %3711
    %3712 = const i1 0
    %3713 = const time 0s 1e
    drv i1$ %write_rd1, %3712, %3713
    st i1* %write_rd.shadow, %3712
    %valid_instr46 = prb i1$ %valid_instr
    %3714 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr46, %3714
    br %if_exit46
if_false47:
    %3715 = const i1 1
    %3716 = const time 0s 1e
    drv i1$ %illegal_inst1, %3715, %3716
    st i1* %illegal_inst.shadow, %3715
    br %if_exit46
if_exit46:
    br %case_exit
case_body101:
    %3717 = const i1 1
    %3718 = const i1 0
    %3719 = and i1 %3717, %3718
    %3720 = const i32 8
    %3721 = const i32 32
    %3722 = sge i32 %3720, %3721
    %3723 = and i1 %3719, %3722
    %3724 = const i1 1
    %3725 = not i1 %3724
    %3726 = and i1 %3723, %3725
    br %3726, %if_false48, %if_true48
3709:
    %3727 = const i1 0
    %3728 = const i32 4093657171
    %3729 = const i32 4293947519
    %3730 = and i32 %inst_data_i1, %3729
    %3731 = and i32 %3728, %3729
    %3732 = eq i32 %3730, %3731
    %3733 = or i1 %3727, %3732
    br %3733, %3734, %case_body102
if_true48:
    %3735 = const i1 0
    %3736 = const time 0s 1e
    drv i1$ %write_rd1, %3735, %3736
    st i1* %write_rd.shadow, %3735
    %valid_instr47 = prb i1$ %valid_instr
    %3737 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr47, %3737
    br %if_exit47
if_false48:
    %3738 = const i1 1
    %3739 = const time 0s 1e
    drv i1$ %illegal_inst1, %3738, %3739
    st i1* %illegal_inst.shadow, %3738
    br %if_exit47
if_exit47:
    br %case_exit
case_body102:
    %3740 = const i1 0
    br %3740, %if_false49, %if_true49
3734:
    %3741 = const i1 0
    %3742 = const i32 2550157363
    %3743 = const i32 4293947519
    %3744 = and i32 %inst_data_i1, %3743
    %3745 = and i32 %3742, %3743
    %3746 = eq i32 %3744, %3745
    %3747 = or i1 %3741, %3746
    %3748 = const i32 2553286707
    %3749 = const i32 4293947519
    %3750 = and i32 %inst_data_i1, %3749
    %3751 = and i32 %3748, %3749
    %3752 = eq i32 %3750, %3751
    %3753 = or i1 %3747, %3752
    %3754 = const i32 2553303091
    %3755 = const i32 4293947519
    %3756 = and i32 %inst_data_i1, %3755
    %3757 = and i32 %3754, %3755
    %3758 = eq i32 %3756, %3757
    %3759 = or i1 %3753, %3758
    br %3759, %3760, %case_body103
if_true49:
    %3761 = const i4 1
    %3762 = const time 0s 1e
    drv i4$ %opa_select, %3761, %3762
    %3763 = const i1 0
    %3764 = const time 0s 1e
    drv i1$ %write_rd1, %3763, %3764
    st i1* %write_rd.shadow, %3763
    %valid_instr48 = prb i1$ %valid_instr
    %3765 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr48, %3765
    br %if_exit48
if_false49:
    %3766 = const i1 1
    %3767 = const time 0s 1e
    drv i1$ %illegal_inst1, %3766, %3767
    st i1* %illegal_inst.shadow, %3766
    br %if_exit48
if_exit48:
    br %case_exit
case_body103:
    %3768 = const i1 1
    %3769 = const i1 0
    %3770 = and i1 %3768, %3769
    %3771 = const i32 8
    %3772 = const i32 32
    %3773 = sge i32 %3771, %3772
    %3774 = and i1 %3770, %3773
    %3775 = const i1 1
    %3776 = not i1 %3775
    %3777 = and i1 %3774, %3776
    br %3777, %if_false50, %if_true50
3760:
    %3778 = const i1 0
    %3779 = const i32 4127195219
    %3780 = const i32 4293947519
    %3781 = and i32 %inst_data_i1, %3780
    %3782 = and i32 %3779, %3780
    %3783 = eq i32 %3781, %3782
    %3784 = or i1 %3778, %3783
    %3785 = const i32 3590324307
    %3786 = const i32 4293918847
    %3787 = and i32 %inst_data_i1, %3786
    %3788 = and i32 %3785, %3786
    %3789 = eq i32 %3787, %3788
    %3790 = or i1 %3784, %3789
    %3791 = const i32 3591372883
    %3792 = const i32 4293918847
    %3793 = and i32 %inst_data_i1, %3792
    %3794 = and i32 %3791, %3792
    %3795 = eq i32 %3793, %3794
    %3796 = or i1 %3790, %3795
    br %3796, %3797, %case_body104
if_true50:
    %3798 = const i1 0
    %3799 = const time 0s 1e
    drv i1$ %write_rd1, %3798, %3799
    st i1* %write_rd.shadow, %3798
    %valid_instr49 = prb i1$ %valid_instr
    %3800 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr49, %3800
    br %if_exit49
if_false50:
    %3801 = const i1 1
    %3802 = const time 0s 1e
    drv i1$ %illegal_inst1, %3801, %3802
    st i1* %illegal_inst.shadow, %3801
    br %if_exit49
if_exit49:
    br %case_exit
case_body104:
    %3803 = const i1 0
    br %3803, %if_false51, %if_true51
3797:
    %3804 = const i1 0
    %3805 = const i32 2550165555
    %3806 = const i32 4293947519
    %3807 = and i32 %inst_data_i1, %3806
    %3808 = and i32 %3805, %3806
    %3809 = eq i32 %3807, %3808
    %3810 = or i1 %3804, %3809
    %3811 = const i32 2553294899
    %3812 = const i32 4293947519
    %3813 = and i32 %inst_data_i1, %3812
    %3814 = and i32 %3811, %3812
    %3815 = eq i32 %3813, %3814
    %3816 = or i1 %3810, %3815
    %3817 = const i32 2553311283
    %3818 = const i32 4293947519
    %3819 = and i32 %inst_data_i1, %3818
    %3820 = and i32 %3817, %3818
    %3821 = eq i32 %3819, %3820
    %3822 = or i1 %3816, %3821
    br %3822, %3823, %case_body105
if_true51:
    %3824 = const i4 1
    %3825 = const time 0s 1e
    drv i4$ %opa_select, %3824, %3825
    %3826 = const i1 0
    %3827 = const time 0s 1e
    drv i1$ %write_rd1, %3826, %3827
    st i1* %write_rd.shadow, %3826
    %valid_instr50 = prb i1$ %valid_instr
    %3828 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr50, %3828
    br %if_exit50
if_false51:
    %3829 = const i1 1
    %3830 = const time 0s 1e
    drv i1$ %illegal_inst1, %3829, %3830
    st i1* %illegal_inst.shadow, %3829
    br %if_exit50
if_exit50:
    br %case_exit
case_body105:
    %3831 = const i1 1
    %3832 = const i1 0
    %3833 = and i1 %3831, %3832
    %3834 = const i32 8
    %3835 = const i32 16
    %3836 = sge i32 %3834, %3835
    %3837 = and i1 %3833, %3836
    %3838 = const i1 1
    %3839 = not i1 %3838
    %3840 = and i1 %3837, %3839
    br %3840, %if_false52, %if_true52
3823:
    %3841 = const i1 0
    %3842 = const i32 11
    %3843 = const i32 127
    %3844 = and i32 %inst_data_i1, %3843
    %3845 = and i32 %3842, %3843
    %3846 = eq i32 %3844, %3845
    %3847 = or i1 %3841, %3846
    br %3847, %3848, %case_body106
if_true52:
    %3849 = const i1 0
    %3850 = const time 0s 1e
    drv i1$ %write_rd1, %3849, %3850
    st i1* %write_rd.shadow, %3849
    %valid_instr51 = prb i1$ %valid_instr
    %3851 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr51, %3851
    br %if_exit51
if_false52:
    %3852 = const i1 1
    %3853 = const time 0s 1e
    drv i1$ %illegal_inst1, %3852, %3853
    st i1* %illegal_inst.shadow, %3852
    br %if_exit51
if_exit51:
    br %case_exit
case_body106:
    %3854 = const i1 1
    br %3854, %if_false53, %if_true53
3848:
    %3855 = const i1 0
    %3856 = const i32 8199
    %3857 = const i32 28799
    %3858 = and i32 %inst_data_i1, %3857
    %3859 = and i32 %3856, %3857
    %3860 = eq i32 %3858, %3859
    %3861 = or i1 %3855, %3860
    br %3861, %3862, %case_body107
if_true53:
    %3863 = const i4 1
    %3864 = const time 0s 1e
    drv i4$ %opa_select, %3863, %3864
    br %if_exit52
if_false53:
    br %if_exit52
if_exit52:
    %3865 = const i1 0
    %3866 = const time 0s 1e
    drv i1$ %write_rd1, %3865, %3866
    st i1* %write_rd.shadow, %3865
    %valid_instr52 = prb i1$ %valid_instr
    %3867 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr52, %3867
    br %case_exit
case_body107:
    %3868 = const i1 1
    br %3868, %if_false54, %if_true54
3862:
    %3869 = const i1 0
    %3870 = const i32 8231
    %3871 = const i32 28799
    %3872 = and i32 %inst_data_i1, %3871
    %3873 = and i32 %3870, %3871
    %3874 = eq i32 %3872, %3873
    %3875 = or i1 %3869, %3874
    br %3875, %3876, %case_body108
if_true54:
    %3877 = const i4 1
    %3878 = const time 0s 1e
    drv i4$ %opa_select, %3877, %3878
    %3879 = const i4 2
    %3880 = const time 0s 1e
    drv i4$ %opb_select, %3879, %3880
    %3881 = const i1 0
    %3882 = const time 0s 1e
    drv i1$ %write_rd1, %3881, %3882
    st i1* %write_rd.shadow, %3881
    %valid_instr53 = prb i1$ %valid_instr
    %3883 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr53, %3883
    br %if_exit53
if_false54:
    %3884 = const i1 1
    %3885 = const time 0s 1e
    drv i1$ %illegal_inst1, %3884, %3885
    st i1* %illegal_inst.shadow, %3884
    br %if_exit53
if_exit53:
    br %case_exit
case_body108:
    %3886 = const i1 1
    br %3886, %if_false55, %if_true55
3876:
    %3887 = const i1 0
    %3888 = const i32 12295
    %3889 = const i32 28799
    %3890 = and i32 %inst_data_i1, %3889
    %3891 = and i32 %3888, %3889
    %3892 = eq i32 %3890, %3891
    %3893 = or i1 %3887, %3892
    br %3893, %3894, %case_body109
if_true55:
    %3895 = const i4 1
    %3896 = const time 0s 1e
    drv i4$ %opa_select, %3895, %3896
    %3897 = const i4 6
    %3898 = const time 0s 1e
    drv i4$ %opb_select, %3897, %3898
    %3899 = const i1 0
    %3900 = const time 0s 1e
    drv i1$ %write_rd1, %3899, %3900
    st i1* %write_rd.shadow, %3899
    %valid_instr54 = prb i1$ %valid_instr
    %3901 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr54, %3901
    br %if_exit54
if_false55:
    %3902 = const i1 1
    %3903 = const time 0s 1e
    drv i1$ %illegal_inst1, %3902, %3903
    st i1* %illegal_inst.shadow, %3902
    br %if_exit54
if_exit54:
    br %case_exit
case_body109:
    %3904 = const i1 1
    %3905 = const i1 1
    %3906 = or i1 %3904, %3905
    br %3906, %if_false56, %if_true56
3894:
    %3907 = const i1 0
    %3908 = const i32 12327
    %3909 = const i32 28799
    %3910 = and i32 %inst_data_i1, %3909
    %3911 = and i32 %3908, %3909
    %3912 = eq i32 %3910, %3911
    %3913 = or i1 %3907, %3912
    br %3913, %3914, %case_body110
if_true56:
    %3915 = const i4 1
    %3916 = const time 0s 1e
    drv i4$ %opa_select, %3915, %3916
    %3917 = const i4 2
    %3918 = const time 0s 1e
    drv i4$ %opb_select, %3917, %3918
    %3919 = const i1 0
    %3920 = const time 0s 1e
    drv i1$ %write_rd1, %3919, %3920
    st i1* %write_rd.shadow, %3919
    %valid_instr55 = prb i1$ %valid_instr
    %3921 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr55, %3921
    br %if_exit55
if_false56:
    %3922 = const i1 1
    %3923 = const time 0s 1e
    drv i1$ %illegal_inst1, %3922, %3923
    st i1* %illegal_inst.shadow, %3922
    br %if_exit55
if_exit55:
    br %case_exit
case_body110:
    %3924 = const i1 1
    %3925 = const i1 1
    %3926 = or i1 %3924, %3925
    br %3926, %if_false57, %if_true57
3914:
    %3927 = const i1 0
    %3928 = const i32 4103
    %3929 = const i32 28799
    %3930 = and i32 %inst_data_i1, %3929
    %3931 = and i32 %3928, %3929
    %3932 = eq i32 %3930, %3931
    %3933 = or i1 %3927, %3932
    br %3933, %3934, %case_body111
if_true57:
    %3935 = const i4 1
    %3936 = const time 0s 1e
    drv i4$ %opa_select, %3935, %3936
    %3937 = const i4 6
    %3938 = const time 0s 1e
    drv i4$ %opb_select, %3937, %3938
    %3939 = const i1 0
    %3940 = const time 0s 1e
    drv i1$ %write_rd1, %3939, %3940
    st i1* %write_rd.shadow, %3939
    %valid_instr56 = prb i1$ %valid_instr
    %3941 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr56, %3941
    br %if_exit56
if_false57:
    %3942 = const i1 1
    %3943 = const time 0s 1e
    drv i1$ %illegal_inst1, %3942, %3943
    st i1* %illegal_inst.shadow, %3942
    br %if_exit56
if_exit56:
    br %case_exit
case_body111:
    %3944 = const i1 0
    %3945 = const i1 0
    %3946 = or i1 %3944, %3945
    br %3946, %if_false58, %if_true58
3934:
    %3947 = const i1 0
    %3948 = const i32 4135
    %3949 = const i32 28799
    %3950 = and i32 %inst_data_i1, %3949
    %3951 = and i32 %3948, %3949
    %3952 = eq i32 %3950, %3951
    %3953 = or i1 %3947, %3952
    br %3953, %3954, %case_body112
if_true58:
    %3955 = const i4 1
    %3956 = const time 0s 1e
    drv i4$ %opa_select, %3955, %3956
    %3957 = const i4 2
    %3958 = const time 0s 1e
    drv i4$ %opb_select, %3957, %3958
    %3959 = const i1 0
    %3960 = const time 0s 1e
    drv i1$ %write_rd1, %3959, %3960
    st i1* %write_rd.shadow, %3959
    %valid_instr57 = prb i1$ %valid_instr
    %3961 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr57, %3961
    br %if_exit57
if_false58:
    %3962 = const i1 1
    %3963 = const time 0s 1e
    drv i1$ %illegal_inst1, %3962, %3963
    st i1* %illegal_inst.shadow, %3962
    br %if_exit57
if_exit57:
    br %case_exit
case_body112:
    %3964 = const i1 0
    %3965 = const i1 0
    %3966 = or i1 %3964, %3965
    br %3966, %if_false59, %if_true59
3954:
    %3967 = const i1 0
    %3968 = const i32 7
    %3969 = const i32 28799
    %3970 = and i32 %inst_data_i1, %3969
    %3971 = and i32 %3968, %3969
    %3972 = eq i32 %3970, %3971
    %3973 = or i1 %3967, %3972
    br %3973, %3974, %case_body113
if_true59:
    %3975 = const i4 1
    %3976 = const time 0s 1e
    drv i4$ %opa_select, %3975, %3976
    %3977 = const i4 6
    %3978 = const time 0s 1e
    drv i4$ %opb_select, %3977, %3978
    %3979 = const i1 0
    %3980 = const time 0s 1e
    drv i1$ %write_rd1, %3979, %3980
    st i1* %write_rd.shadow, %3979
    %valid_instr58 = prb i1$ %valid_instr
    %3981 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr58, %3981
    br %if_exit58
if_false59:
    %3982 = const i1 1
    %3983 = const time 0s 1e
    drv i1$ %illegal_inst1, %3982, %3983
    st i1* %illegal_inst.shadow, %3982
    br %if_exit58
if_exit58:
    br %case_exit
case_body113:
    %3984 = const i1 0
    br %3984, %if_false60, %if_true60
3974:
    %3985 = const i1 0
    %3986 = const i32 39
    %3987 = const i32 28799
    %3988 = and i32 %inst_data_i1, %3987
    %3989 = and i32 %3986, %3987
    %3990 = eq i32 %3988, %3989
    %3991 = or i1 %3985, %3990
    br %3991, %3992, %case_body114
if_true60:
    %3993 = const i4 1
    %3994 = const time 0s 1e
    drv i4$ %opa_select, %3993, %3994
    %3995 = const i4 2
    %3996 = const time 0s 1e
    drv i4$ %opb_select, %3995, %3996
    %3997 = const i1 0
    %3998 = const time 0s 1e
    drv i1$ %write_rd1, %3997, %3998
    st i1* %write_rd.shadow, %3997
    %valid_instr59 = prb i1$ %valid_instr
    %3999 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr59, %3999
    br %if_exit59
if_false60:
    %4000 = const i1 1
    %4001 = const time 0s 1e
    drv i1$ %illegal_inst1, %4000, %4001
    st i1* %illegal_inst.shadow, %4000
    br %if_exit59
if_exit59:
    br %case_exit
case_body114:
    %4002 = const i1 0
    br %4002, %if_false61, %if_true61
3992:
    %4003 = const i1 1
    %4004 = const time 0s 1e
    drv i1$ %illegal_inst1, %4003, %4004
    st i1* %illegal_inst.shadow, %4003
    br %case_exit
if_true61:
    %4005 = const i4 1
    %4006 = const time 0s 1e
    drv i4$ %opa_select, %4005, %4006
    %4007 = const i4 6
    %4008 = const time 0s 1e
    drv i4$ %opb_select, %4007, %4008
    %4009 = const i1 0
    %4010 = const time 0s 1e
    drv i1$ %write_rd1, %4009, %4010
    st i1* %write_rd.shadow, %4009
    %valid_instr60 = prb i1$ %valid_instr
    %4011 = const time 0s 1e
    drv i1$ %acc_qvalid_o, %valid_instr60, %4011
    br %if_exit60
if_false61:
    %4012 = const i1 1
    %4013 = const time 0s 1e
    drv i1$ %illegal_inst1, %4012, %4013
    st i1* %illegal_inst.shadow, %4012
    br %if_exit60
if_exit60:
    br %case_exit
if_true:
    %4014 = const i1 0
    %4015 = const time 0s 1e
    drv i1$ %write_rd1, %4014, %4015
    st i1* %write_rd.shadow, %4014
    %4016 = const i1 0
    %4017 = const time 0s 1e
    drv i1$ %uses_rd, %4016, %4017
    %4018 = const i2 2
    %4019 = const time 0s 1e
    drv i2$ %next_pc, %4018, %4019
    br %if_exit61
if_false:
    br %if_exit61
if_exit61:
    br %check
}

proc %snitch.param1.always_comb.605.1 (i32$ %hart_id_i, i32$ %inst_data_i, {i1, i1, i1, i1, i1}$ %fpu_status_i, i32$ %alu_result, i1$ %csr_en, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q) -> (i32$ %csr_rvalue, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d) {
0:
    br %body
body:
    %1 = const i32 0
    %2 = const i1 0
    %3 = inss i32 %1, i1 %2, 0, 1
    %4 = const time 0s 1e
    drv i32$ %csr_rvalue, %3, %4
    %fcsr_q1 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %5 = const time 0s 1e
    drv {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d, %fcsr_q1, %5
    %6 = extf {i1, i1, i1, i1, i1}$, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d, 1
    %7 = const i5 0
    %fcsr_q2 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %8 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q2, 1
    %9 = extf i1, {i1, i1, i1, i1, i1} %8, 4
    %10 = inss i5 %7, i1 %9, 0, 1
    %fcsr_q3 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %11 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q3, 1
    %12 = extf i1, {i1, i1, i1, i1, i1} %11, 3
    %13 = inss i5 %10, i1 %12, 1, 1
    %fcsr_q4 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %14 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q4, 1
    %15 = extf i1, {i1, i1, i1, i1, i1} %14, 2
    %16 = inss i5 %13, i1 %15, 2, 1
    %fcsr_q5 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %17 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q5, 1
    %18 = extf i1, {i1, i1, i1, i1, i1} %17, 1
    %19 = inss i5 %16, i1 %18, 3, 1
    %fcsr_q6 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %20 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q6, 1
    %21 = extf i1, {i1, i1, i1, i1, i1} %20, 0
    %22 = inss i5 %19, i1 %21, 4, 1
    %23 = const i5 0
    %fpu_status_i1 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %24 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i1, 4
    %25 = inss i5 %23, i1 %24, 0, 1
    %fpu_status_i2 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %26 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i2, 3
    %27 = inss i5 %25, i1 %26, 1, 1
    %fpu_status_i3 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %28 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i3, 2
    %29 = inss i5 %27, i1 %28, 2, 1
    %fpu_status_i4 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %30 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i4, 1
    %31 = inss i5 %29, i1 %30, 3, 1
    %fpu_status_i5 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %32 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i5, 0
    %33 = inss i5 %31, i1 %32, 4, 1
    %34 = or i5 %22, %33
    %35 = const i32 0
    %36 = const i5 0
    %37 = shr i5 %34, i5 %36, i32 %35
    %38 = exts i1, i5 %37, 0, 1
    %39 = const i5 0
    %fcsr_q7 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %40 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q7, 1
    %41 = extf i1, {i1, i1, i1, i1, i1} %40, 4
    %42 = inss i5 %39, i1 %41, 0, 1
    %fcsr_q8 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %43 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q8, 1
    %44 = extf i1, {i1, i1, i1, i1, i1} %43, 3
    %45 = inss i5 %42, i1 %44, 1, 1
    %fcsr_q9 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %46 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q9, 1
    %47 = extf i1, {i1, i1, i1, i1, i1} %46, 2
    %48 = inss i5 %45, i1 %47, 2, 1
    %fcsr_q10 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %49 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q10, 1
    %50 = extf i1, {i1, i1, i1, i1, i1} %49, 1
    %51 = inss i5 %48, i1 %50, 3, 1
    %fcsr_q11 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %52 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q11, 1
    %53 = extf i1, {i1, i1, i1, i1, i1} %52, 0
    %54 = inss i5 %51, i1 %53, 4, 1
    %55 = const i5 0
    %fpu_status_i6 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %56 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i6, 4
    %57 = inss i5 %55, i1 %56, 0, 1
    %fpu_status_i7 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %58 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i7, 3
    %59 = inss i5 %57, i1 %58, 1, 1
    %fpu_status_i8 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %60 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i8, 2
    %61 = inss i5 %59, i1 %60, 2, 1
    %fpu_status_i9 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %62 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i9, 1
    %63 = inss i5 %61, i1 %62, 3, 1
    %fpu_status_i10 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %64 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i10, 0
    %65 = inss i5 %63, i1 %64, 4, 1
    %66 = or i5 %54, %65
    %67 = const i32 1
    %68 = const i5 0
    %69 = shr i5 %66, i5 %68, i32 %67
    %70 = exts i1, i5 %69, 0, 1
    %71 = const i5 0
    %fcsr_q12 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %72 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q12, 1
    %73 = extf i1, {i1, i1, i1, i1, i1} %72, 4
    %74 = inss i5 %71, i1 %73, 0, 1
    %fcsr_q13 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %75 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q13, 1
    %76 = extf i1, {i1, i1, i1, i1, i1} %75, 3
    %77 = inss i5 %74, i1 %76, 1, 1
    %fcsr_q14 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %78 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q14, 1
    %79 = extf i1, {i1, i1, i1, i1, i1} %78, 2
    %80 = inss i5 %77, i1 %79, 2, 1
    %fcsr_q15 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %81 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q15, 1
    %82 = extf i1, {i1, i1, i1, i1, i1} %81, 1
    %83 = inss i5 %80, i1 %82, 3, 1
    %fcsr_q16 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %84 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q16, 1
    %85 = extf i1, {i1, i1, i1, i1, i1} %84, 0
    %86 = inss i5 %83, i1 %85, 4, 1
    %87 = const i5 0
    %fpu_status_i11 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %88 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i11, 4
    %89 = inss i5 %87, i1 %88, 0, 1
    %fpu_status_i12 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %90 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i12, 3
    %91 = inss i5 %89, i1 %90, 1, 1
    %fpu_status_i13 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %92 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i13, 2
    %93 = inss i5 %91, i1 %92, 2, 1
    %fpu_status_i14 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %94 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i14, 1
    %95 = inss i5 %93, i1 %94, 3, 1
    %fpu_status_i15 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %96 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i15, 0
    %97 = inss i5 %95, i1 %96, 4, 1
    %98 = or i5 %86, %97
    %99 = const i32 2
    %100 = const i5 0
    %101 = shr i5 %98, i5 %100, i32 %99
    %102 = exts i1, i5 %101, 0, 1
    %103 = const i5 0
    %fcsr_q17 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %104 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q17, 1
    %105 = extf i1, {i1, i1, i1, i1, i1} %104, 4
    %106 = inss i5 %103, i1 %105, 0, 1
    %fcsr_q18 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %107 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q18, 1
    %108 = extf i1, {i1, i1, i1, i1, i1} %107, 3
    %109 = inss i5 %106, i1 %108, 1, 1
    %fcsr_q19 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %110 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q19, 1
    %111 = extf i1, {i1, i1, i1, i1, i1} %110, 2
    %112 = inss i5 %109, i1 %111, 2, 1
    %fcsr_q20 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %113 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q20, 1
    %114 = extf i1, {i1, i1, i1, i1, i1} %113, 1
    %115 = inss i5 %112, i1 %114, 3, 1
    %fcsr_q21 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %116 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q21, 1
    %117 = extf i1, {i1, i1, i1, i1, i1} %116, 0
    %118 = inss i5 %115, i1 %117, 4, 1
    %119 = const i5 0
    %fpu_status_i16 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %120 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i16, 4
    %121 = inss i5 %119, i1 %120, 0, 1
    %fpu_status_i17 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %122 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i17, 3
    %123 = inss i5 %121, i1 %122, 1, 1
    %fpu_status_i18 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %124 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i18, 2
    %125 = inss i5 %123, i1 %124, 2, 1
    %fpu_status_i19 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %126 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i19, 1
    %127 = inss i5 %125, i1 %126, 3, 1
    %fpu_status_i20 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %128 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i20, 0
    %129 = inss i5 %127, i1 %128, 4, 1
    %130 = or i5 %118, %129
    %131 = const i32 3
    %132 = const i5 0
    %133 = shr i5 %130, i5 %132, i32 %131
    %134 = exts i1, i5 %133, 0, 1
    %135 = const i5 0
    %fcsr_q22 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %136 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q22, 1
    %137 = extf i1, {i1, i1, i1, i1, i1} %136, 4
    %138 = inss i5 %135, i1 %137, 0, 1
    %fcsr_q23 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %139 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q23, 1
    %140 = extf i1, {i1, i1, i1, i1, i1} %139, 3
    %141 = inss i5 %138, i1 %140, 1, 1
    %fcsr_q24 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %142 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q24, 1
    %143 = extf i1, {i1, i1, i1, i1, i1} %142, 2
    %144 = inss i5 %141, i1 %143, 2, 1
    %fcsr_q25 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %145 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q25, 1
    %146 = extf i1, {i1, i1, i1, i1, i1} %145, 1
    %147 = inss i5 %144, i1 %146, 3, 1
    %fcsr_q26 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %148 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q26, 1
    %149 = extf i1, {i1, i1, i1, i1, i1} %148, 0
    %150 = inss i5 %147, i1 %149, 4, 1
    %151 = const i5 0
    %fpu_status_i21 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %152 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i21, 4
    %153 = inss i5 %151, i1 %152, 0, 1
    %fpu_status_i22 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %154 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i22, 3
    %155 = inss i5 %153, i1 %154, 1, 1
    %fpu_status_i23 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %156 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i23, 2
    %157 = inss i5 %155, i1 %156, 2, 1
    %fpu_status_i24 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %158 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i24, 1
    %159 = inss i5 %157, i1 %158, 3, 1
    %fpu_status_i25 = prb {i1, i1, i1, i1, i1}$ %fpu_status_i
    %160 = extf i1, {i1, i1, i1, i1, i1} %fpu_status_i25, 0
    %161 = inss i5 %159, i1 %160, 4, 1
    %162 = or i5 %150, %161
    %163 = const i32 4
    %164 = const i5 0
    %165 = shr i5 %162, i5 %164, i32 %163
    %166 = exts i1, i5 %165, 0, 1
    %167 = {i1 %38, i1 %70, i1 %102, i1 %134, i1 %166}
    %168 = const time 0s 1e
    drv {i1, i1, i1, i1, i1}$ %6, %167, %168
    %csr_en1 = prb i1$ %csr_en
    br %csr_en1, %if_false, %if_true
check:
    wait %body, %hart_id_i, %inst_data_i, %fpu_status_i, %alu_result, %csr_en, %fcsr_q
if_true:
    %inst_data_i1 = prb i32$ %inst_data_i
    %169 = const i5 20
    %170 = const i32 0
    %171 = shr i32 %inst_data_i1, i32 %170, i5 %169
    %172 = exts i12, i32 %171, 0, 12
    %173 = const i1 0
    %174 = const i12 3860
    %175 = eq i12 %172, %174
    %176 = or i1 %173, %175
    br %176, %177, %case_body
if_false:
    br %if_exit
if_exit:
    br %check
case_exit:
    br %if_exit
case_body:
    %hart_id_i1 = prb i32$ %hart_id_i
    %178 = const time 0s 1e
    drv i32$ %csr_rvalue, %hart_id_i1, %178
    br %case_exit
177:
    %179 = const i1 0
    %180 = const i12 1
    %181 = eq i12 %172, %180
    %182 = or i1 %179, %181
    br %182, %183, %case_body1
case_body1:
    %184 = const i32 0
    %185 = const i5 0
    %fcsr_q27 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %186 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q27, 1
    %187 = extf i1, {i1, i1, i1, i1, i1} %186, 4
    %188 = inss i5 %185, i1 %187, 0, 1
    %fcsr_q28 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %189 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q28, 1
    %190 = extf i1, {i1, i1, i1, i1, i1} %189, 3
    %191 = inss i5 %188, i1 %190, 1, 1
    %fcsr_q29 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %192 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q29, 1
    %193 = extf i1, {i1, i1, i1, i1, i1} %192, 2
    %194 = inss i5 %191, i1 %193, 2, 1
    %fcsr_q30 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %195 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q30, 1
    %196 = extf i1, {i1, i1, i1, i1, i1} %195, 1
    %197 = inss i5 %194, i1 %196, 3, 1
    %fcsr_q31 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %198 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q31, 1
    %199 = extf i1, {i1, i1, i1, i1, i1} %198, 0
    %200 = inss i5 %197, i1 %199, 4, 1
    %201 = inss i32 %184, i5 %200, 0, 5
    %202 = const i27 0
    %203 = inss i32 %201, i27 %202, 5, 27
    %204 = const time 0s 1e
    drv i32$ %csr_rvalue, %203, %204
    %205 = extf {i1, i1, i1, i1, i1}$, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d, 1
    %alu_result1 = prb i32$ %alu_result
    %206 = const i1 0
    %207 = const i32 0
    %208 = shr i32 %alu_result1, i32 %207, i1 %206
    %209 = exts i5, i32 %208, 0, 5
    %210 = const i32 0
    %211 = const i5 0
    %212 = shr i5 %209, i5 %211, i32 %210
    %213 = exts i1, i5 %212, 0, 1
    %alu_result2 = prb i32$ %alu_result
    %214 = const i1 0
    %215 = const i32 0
    %216 = shr i32 %alu_result2, i32 %215, i1 %214
    %217 = exts i5, i32 %216, 0, 5
    %218 = const i32 1
    %219 = const i5 0
    %220 = shr i5 %217, i5 %219, i32 %218
    %221 = exts i1, i5 %220, 0, 1
    %alu_result3 = prb i32$ %alu_result
    %222 = const i1 0
    %223 = const i32 0
    %224 = shr i32 %alu_result3, i32 %223, i1 %222
    %225 = exts i5, i32 %224, 0, 5
    %226 = const i32 2
    %227 = const i5 0
    %228 = shr i5 %225, i5 %227, i32 %226
    %229 = exts i1, i5 %228, 0, 1
    %alu_result4 = prb i32$ %alu_result
    %230 = const i1 0
    %231 = const i32 0
    %232 = shr i32 %alu_result4, i32 %231, i1 %230
    %233 = exts i5, i32 %232, 0, 5
    %234 = const i32 3
    %235 = const i5 0
    %236 = shr i5 %233, i5 %235, i32 %234
    %237 = exts i1, i5 %236, 0, 1
    %alu_result5 = prb i32$ %alu_result
    %238 = const i1 0
    %239 = const i32 0
    %240 = shr i32 %alu_result5, i32 %239, i1 %238
    %241 = exts i5, i32 %240, 0, 5
    %242 = const i32 4
    %243 = const i5 0
    %244 = shr i5 %241, i5 %243, i32 %242
    %245 = exts i1, i5 %244, 0, 1
    %246 = {i1 %213, i1 %221, i1 %229, i1 %237, i1 %245}
    %247 = const time 0s 1e
    drv {i1, i1, i1, i1, i1}$ %205, %246, %247
    br %case_exit
183:
    %248 = const i1 0
    %249 = const i12 2
    %250 = eq i12 %172, %249
    %251 = or i1 %248, %250
    br %251, %252, %case_body2
case_body2:
    %253 = const i32 0
    %fcsr_q32 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %254 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_q32, 0
    %255 = inss i32 %253, i3 %254, 0, 3
    %256 = const i29 0
    %257 = inss i32 %255, i29 %256, 3, 29
    %258 = const time 0s 1e
    drv i32$ %csr_rvalue, %257, %258
    %259 = extf i3$, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d, 0
    %alu_result6 = prb i32$ %alu_result
    %260 = const i1 0
    %261 = const i32 0
    %262 = shr i32 %alu_result6, i32 %261, i1 %260
    %263 = exts i3, i32 %262, 0, 3
    %264 = const time 0s 1e
    drv i3$ %259, %263, %264
    br %case_exit
252:
    %265 = const i1 0
    %266 = const i12 3
    %267 = eq i12 %172, %266
    %268 = or i1 %265, %267
    br %268, %269, %case_body3
case_body3:
    %270 = const i32 0
    %271 = const i8 0
    %272 = const i5 0
    %fcsr_q33 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %273 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q33, 1
    %274 = extf i1, {i1, i1, i1, i1, i1} %273, 4
    %275 = inss i5 %272, i1 %274, 0, 1
    %fcsr_q34 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %276 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q34, 1
    %277 = extf i1, {i1, i1, i1, i1, i1} %276, 3
    %278 = inss i5 %275, i1 %277, 1, 1
    %fcsr_q35 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %279 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q35, 1
    %280 = extf i1, {i1, i1, i1, i1, i1} %279, 2
    %281 = inss i5 %278, i1 %280, 2, 1
    %fcsr_q36 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %282 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q36, 1
    %283 = extf i1, {i1, i1, i1, i1, i1} %282, 1
    %284 = inss i5 %281, i1 %283, 3, 1
    %fcsr_q37 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %285 = extf {i1, i1, i1, i1, i1}, {i3, {i1, i1, i1, i1, i1}} %fcsr_q37, 1
    %286 = extf i1, {i1, i1, i1, i1, i1} %285, 0
    %287 = inss i5 %284, i1 %286, 4, 1
    %288 = inss i8 %271, i5 %287, 0, 5
    %fcsr_q38 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %289 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_q38, 0
    %290 = inss i8 %288, i3 %289, 5, 3
    %291 = inss i32 %270, i8 %290, 0, 8
    %292 = const i24 0
    %293 = inss i32 %291, i24 %292, 8, 24
    %294 = const time 0s 1e
    drv i32$ %csr_rvalue, %293, %294
    %alu_result7 = prb i32$ %alu_result
    %295 = const i1 0
    %296 = const i32 0
    %297 = shr i32 %alu_result7, i32 %296, i1 %295
    %298 = exts i8, i32 %297, 0, 8
    %299 = const i32 0
    %300 = const i8 0
    %301 = shr i8 %298, i8 %300, i32 %299
    %302 = exts i3, i8 %301, 0, 3
    %alu_result8 = prb i32$ %alu_result
    %303 = const i1 0
    %304 = const i32 0
    %305 = shr i32 %alu_result8, i32 %304, i1 %303
    %306 = exts i8, i32 %305, 0, 8
    %307 = const i32 3
    %308 = const i8 0
    %309 = shr i8 %306, i8 %308, i32 %307
    %310 = exts i5, i8 %309, 0, 5
    %311 = const i32 0
    %312 = const i5 0
    %313 = shr i5 %310, i5 %312, i32 %311
    %314 = exts i1, i5 %313, 0, 1
    %alu_result9 = prb i32$ %alu_result
    %315 = const i1 0
    %316 = const i32 0
    %317 = shr i32 %alu_result9, i32 %316, i1 %315
    %318 = exts i8, i32 %317, 0, 8
    %319 = const i32 3
    %320 = const i8 0
    %321 = shr i8 %318, i8 %320, i32 %319
    %322 = exts i5, i8 %321, 0, 5
    %323 = const i32 1
    %324 = const i5 0
    %325 = shr i5 %322, i5 %324, i32 %323
    %326 = exts i1, i5 %325, 0, 1
    %alu_result10 = prb i32$ %alu_result
    %327 = const i1 0
    %328 = const i32 0
    %329 = shr i32 %alu_result10, i32 %328, i1 %327
    %330 = exts i8, i32 %329, 0, 8
    %331 = const i32 3
    %332 = const i8 0
    %333 = shr i8 %330, i8 %332, i32 %331
    %334 = exts i5, i8 %333, 0, 5
    %335 = const i32 2
    %336 = const i5 0
    %337 = shr i5 %334, i5 %336, i32 %335
    %338 = exts i1, i5 %337, 0, 1
    %alu_result11 = prb i32$ %alu_result
    %339 = const i1 0
    %340 = const i32 0
    %341 = shr i32 %alu_result11, i32 %340, i1 %339
    %342 = exts i8, i32 %341, 0, 8
    %343 = const i32 3
    %344 = const i8 0
    %345 = shr i8 %342, i8 %344, i32 %343
    %346 = exts i5, i8 %345, 0, 5
    %347 = const i32 3
    %348 = const i5 0
    %349 = shr i5 %346, i5 %348, i32 %347
    %350 = exts i1, i5 %349, 0, 1
    %alu_result12 = prb i32$ %alu_result
    %351 = const i1 0
    %352 = const i32 0
    %353 = shr i32 %alu_result12, i32 %352, i1 %351
    %354 = exts i8, i32 %353, 0, 8
    %355 = const i32 3
    %356 = const i8 0
    %357 = shr i8 %354, i8 %356, i32 %355
    %358 = exts i5, i8 %357, 0, 5
    %359 = const i32 4
    %360 = const i5 0
    %361 = shr i5 %358, i5 %360, i32 %359
    %362 = exts i1, i5 %361, 0, 1
    %363 = {i1 %314, i1 %326, i1 %338, i1 %350, i1 %362}
    %364 = {i3 %302, {i1, i1, i1, i1, i1} %363}
    %365 = const time 0s 1e
    drv {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d, %364, %365
    br %case_exit
269:
    %366 = const i32 0
    %367 = const i1 0
    %368 = inss i32 %366, i1 %367, 0, 1
    %369 = const time 0s 1e
    drv i32$ %csr_rvalue, %368, %369
    br %case_exit
}

proc %snitch.param1.always_comb.608.1 (i32$ %uimm, i32$ %jimm, i5$ %rs1, [2 x i32]$ %gpr_rdata, i4$ %opa_select) -> (i32$ %opa) {
0:
    br %body
body:
    %opa_select1 = prb i4$ %opa_select
    %1 = const i1 0
    %2 = const i4 0
    %3 = eq i4 %opa_select1, %2
    %4 = or i1 %1, %3
    br %4, %5, %case_body
check:
    wait %body, %uimm, %jimm, %rs1, %gpr_rdata, %opa_select
case_exit:
    br %check
case_body:
    %6 = const i32 0
    %7 = const i1 0
    %8 = inss i32 %6, i1 %7, 0, 1
    %9 = const time 0s 1e
    drv i32$ %opa, %8, %9
    br %case_exit
5:
    %10 = const i1 0
    %11 = const i4 1
    %12 = eq i4 %opa_select1, %11
    %13 = or i1 %10, %12
    br %13, %14, %case_body1
case_body1:
    %gpr_rdata1 = prb [2 x i32]$ %gpr_rdata
    %15 = const i32 0
    %16 = const i32 0
    %17 = [2 x i32 %16]
    %18 = shr [2 x i32] %gpr_rdata1, [2 x i32] %17, i32 %15
    %19 = extf i32, [2 x i32] %18, 0
    %20 = const time 0s 1e
    drv i32$ %opa, %19, %20
    br %case_exit
14:
    %21 = const i1 0
    %22 = const i4 3
    %23 = eq i4 %opa_select1, %22
    %24 = or i1 %21, %23
    br %24, %25, %case_body2
case_body2:
    %uimm1 = prb i32$ %uimm
    %26 = const time 0s 1e
    drv i32$ %opa, %uimm1, %26
    br %case_exit
25:
    %27 = const i1 0
    %28 = const i4 4
    %29 = eq i4 %opa_select1, %28
    %30 = or i1 %27, %29
    br %30, %31, %case_body3
case_body3:
    %jimm1 = prb i32$ %jimm
    %32 = const time 0s 1e
    drv i32$ %opa, %jimm1, %32
    br %case_exit
31:
    %33 = const i1 0
    %34 = const i4 9
    %35 = eq i4 %opa_select1, %34
    %36 = or i1 %33, %35
    br %36, %37, %case_body4
case_body4:
    %38 = const i32 0
    %rs11 = prb i5$ %rs1
    %39 = inss i32 %38, i5 %rs11, 0, 5
    %40 = const i1 0
    %41 = const i1 0
    %42 = inss i1 %40, i1 %41, 0, 1
    %43 = const i27 0
    %44 = inss i27 %43, i1 %42, 0, 1
    %45 = inss i27 %44, i1 %42, 1, 1
    %46 = inss i27 %45, i1 %42, 2, 1
    %47 = inss i27 %46, i1 %42, 3, 1
    %48 = inss i27 %47, i1 %42, 4, 1
    %49 = inss i27 %48, i1 %42, 5, 1
    %50 = inss i27 %49, i1 %42, 6, 1
    %51 = inss i27 %50, i1 %42, 7, 1
    %52 = inss i27 %51, i1 %42, 8, 1
    %53 = inss i27 %52, i1 %42, 9, 1
    %54 = inss i27 %53, i1 %42, 10, 1
    %55 = inss i27 %54, i1 %42, 11, 1
    %56 = inss i27 %55, i1 %42, 12, 1
    %57 = inss i27 %56, i1 %42, 13, 1
    %58 = inss i27 %57, i1 %42, 14, 1
    %59 = inss i27 %58, i1 %42, 15, 1
    %60 = inss i27 %59, i1 %42, 16, 1
    %61 = inss i27 %60, i1 %42, 17, 1
    %62 = inss i27 %61, i1 %42, 18, 1
    %63 = inss i27 %62, i1 %42, 19, 1
    %64 = inss i27 %63, i1 %42, 20, 1
    %65 = inss i27 %64, i1 %42, 21, 1
    %66 = inss i27 %65, i1 %42, 22, 1
    %67 = inss i27 %66, i1 %42, 23, 1
    %68 = inss i27 %67, i1 %42, 24, 1
    %69 = inss i27 %68, i1 %42, 25, 1
    %70 = inss i27 %69, i1 %42, 26, 1
    %71 = inss i32 %39, i27 %70, 5, 27
    %72 = const time 0s 1e
    drv i32$ %opa, %71, %72
    br %case_exit
37:
    %73 = const i32 0
    %74 = const i1 0
    %75 = inss i32 %73, i1 %74, 0, 1
    %76 = const time 0s 1e
    drv i32$ %opa, %75, %76
    br %case_exit
}

proc %snitch.param1.always_comb.609.1 (i32$ %pc_q, i32$ %iimm, i32$ %simm, [2 x i32]$ %gpr_rdata, i4$ %opb_select, i32$ %csr_rvalue) -> (i32$ %opb) {
0:
    br %body
body:
    %opb_select1 = prb i4$ %opb_select
    %1 = const i1 0
    %2 = const i4 0
    %3 = eq i4 %opb_select1, %2
    %4 = or i1 %1, %3
    br %4, %5, %case_body
check:
    wait %body, %pc_q, %iimm, %simm, %gpr_rdata, %opb_select, %csr_rvalue
case_exit:
    br %check
case_body:
    %6 = const i32 0
    %7 = const i1 0
    %8 = inss i32 %6, i1 %7, 0, 1
    %9 = const time 0s 1e
    drv i32$ %opb, %8, %9
    br %case_exit
5:
    %10 = const i1 0
    %11 = const i4 1
    %12 = eq i4 %opb_select1, %11
    %13 = or i1 %10, %12
    br %13, %14, %case_body1
case_body1:
    %gpr_rdata1 = prb [2 x i32]$ %gpr_rdata
    %15 = const i32 1
    %16 = const i32 0
    %17 = [2 x i32 %16]
    %18 = shr [2 x i32] %gpr_rdata1, [2 x i32] %17, i32 %15
    %19 = extf i32, [2 x i32] %18, 0
    %20 = const time 0s 1e
    drv i32$ %opb, %19, %20
    br %case_exit
14:
    %21 = const i1 0
    %22 = const i4 2
    %23 = eq i4 %opb_select1, %22
    %24 = or i1 %21, %23
    br %24, %25, %case_body2
case_body2:
    %iimm1 = prb i32$ %iimm
    %26 = const time 0s 1e
    drv i32$ %opb, %iimm1, %26
    br %case_exit
25:
    %27 = const i1 0
    %28 = const i4 6
    %29 = eq i4 %opb_select1, %28
    %30 = or i1 %27, %29
    %31 = const i4 5
    %32 = eq i4 %opb_select1, %31
    %33 = or i1 %30, %32
    br %33, %34, %case_body3
case_body3:
    %simm1 = prb i32$ %simm
    %35 = const time 0s 1e
    drv i32$ %opb, %simm1, %35
    br %case_exit
34:
    %36 = const i1 0
    %37 = const i4 7
    %38 = eq i4 %opb_select1, %37
    %39 = or i1 %36, %38
    br %39, %40, %case_body4
case_body4:
    %pc_q1 = prb i32$ %pc_q
    %41 = const time 0s 1e
    drv i32$ %opb, %pc_q1, %41
    br %case_exit
40:
    %42 = const i1 0
    %43 = const i4 8
    %44 = eq i4 %opb_select1, %43
    %45 = or i1 %42, %44
    br %45, %46, %case_body5
case_body5:
    %csr_rvalue1 = prb i32$ %csr_rvalue
    %47 = const time 0s 1e
    drv i32$ %opb, %csr_rvalue1, %47
    br %case_exit
46:
    %48 = const i32 0
    %49 = const i1 0
    %50 = inss i32 %48, i1 %49, 0, 1
    %51 = const time 0s 1e
    drv i32$ %opb, %50, %51
    br %case_exit
}

proc %snitch.param1.always_comb.633.1 (i32$ %opa, i32$ %opb, i33$ %adder_result, i4$ %alu_op, i32$ %shift_right_result, i32$ %shift_left_result) -> (i32$ %alu_result, i1$ %shift_left, i1$ %shift_arithmetic, i33$ %alu_opa, i33$ %alu_opb) {
0:
    br %body
body:
    %opa1 = prb i32$ %opa
    %1 = exts i1, i32 %opa1, 31, 1
    %2 = const i33 0
    %3 = not i33 %2
    %4 = [i33 %2, %3]
    %5 = mux [2 x i33] %4, i1 %1
    %6 = inss i33 %5, i32 %opa1, 0, 32
    %7 = const time 0s 1e
    drv i33$ %alu_opa, %6, %7
    %opb1 = prb i32$ %opb
    %8 = exts i1, i32 %opb1, 31, 1
    %9 = const i33 0
    %10 = not i33 %9
    %11 = [i33 %9, %10]
    %12 = mux [2 x i33] %11, i1 %8
    %13 = inss i33 %12, i32 %opb1, 0, 32
    %14 = const time 0s 1e
    drv i33$ %alu_opb, %13, %14
    %adder_result1 = prb i33$ %adder_result
    %15 = const i1 0
    %16 = const i33 0
    %17 = shr i33 %adder_result1, i33 %16, i1 %15
    %18 = exts i32, i33 %17, 0, 32
    %19 = const time 0s 1e
    drv i32$ %alu_result, %18, %19
    %20 = const i1 0
    %21 = const time 0s 1e
    drv i1$ %shift_left, %20, %21
    %22 = const i1 0
    %23 = const time 0s 1e
    drv i1$ %shift_arithmetic, %22, %23
    %alu_op1 = prb i4$ %alu_op
    %24 = const i1 0
    %25 = const i4 1
    %26 = eq i4 %alu_op1, %25
    %27 = or i1 %24, %26
    br %27, %28, %case_body
check:
    wait %body, %opa, %opb, %adder_result, %alu_op, %shift_right_result, %shift_left_result
case_exit:
    br %check
case_body:
    %opb2 = prb i32$ %opb
    %29 = neg i32 %opb2
    %30 = exts i1, i32 %29, 31, 1
    %31 = const i33 0
    %32 = not i33 %31
    %33 = [i33 %31, %32]
    %34 = mux [2 x i33] %33, i1 %30
    %35 = inss i33 %34, i32 %29, 0, 32
    %36 = const time 0s 1e
    drv i33$ %alu_opb, %35, %36
    br %case_exit
28:
    %37 = const i1 0
    %38 = const i4 2
    %39 = eq i4 %alu_op1, %38
    %40 = or i1 %37, %39
    br %40, %41, %case_body1
case_body1:
    %opb3 = prb i32$ %opb
    %42 = neg i32 %opb3
    %43 = exts i1, i32 %42, 31, 1
    %44 = const i33 0
    %45 = not i33 %44
    %46 = [i33 %44, %45]
    %47 = mux [2 x i33] %46, i1 %43
    %48 = inss i33 %47, i32 %42, 0, 32
    %49 = const time 0s 1e
    drv i33$ %alu_opb, %48, %49
    %50 = const i32 0
    %51 = const i31 0
    %adder_result2 = prb i33$ %adder_result
    %52 = const i32 32
    %53 = const i33 0
    %54 = shr i33 %adder_result2, i33 %53, i32 %52
    %55 = exts i1, i33 %54, 0, 1
    %56 = inss i31 %51, i1 %55, 0, 1
    %57 = const i30 0
    %58 = inss i31 %56, i30 %57, 1, 30
    %59 = inss i32 %50, i31 %58, 0, 31
    %60 = const time 0s 1e
    drv i32$ %alu_result, %59, %60
    br %case_exit
41:
    %61 = const i1 0
    %62 = const i4 13
    %63 = eq i4 %alu_op1, %62
    %64 = or i1 %61, %63
    br %64, %65, %case_body2
case_body2:
    %opb4 = prb i32$ %opb
    %66 = neg i32 %opb4
    %67 = exts i1, i32 %66, 31, 1
    %68 = const i33 0
    %69 = not i33 %68
    %70 = [i33 %68, %69]
    %71 = mux [2 x i33] %70, i1 %67
    %72 = inss i33 %71, i32 %66, 0, 32
    %73 = const time 0s 1e
    drv i33$ %alu_opb, %72, %73
    %74 = const i32 0
    %75 = const i31 0
    %adder_result3 = prb i33$ %adder_result
    %76 = const i32 32
    %77 = const i33 0
    %78 = shr i33 %adder_result3, i33 %77, i32 %76
    %79 = exts i1, i33 %78, 0, 1
    %80 = not i1 %79
    %81 = inss i31 %75, i1 %80, 0, 1
    %82 = const i30 0
    %83 = inss i31 %81, i30 %82, 1, 30
    %84 = inss i32 %74, i31 %83, 0, 31
    %85 = const time 0s 1e
    drv i32$ %alu_result, %84, %85
    br %case_exit
65:
    %86 = const i1 0
    %87 = const i4 3
    %88 = eq i4 %alu_op1, %87
    %89 = or i1 %86, %88
    br %89, %90, %case_body3
case_body3:
    %91 = const i33 0
    %opa2 = prb i32$ %opa
    %92 = inss i33 %91, i32 %opa2, 0, 32
    %93 = const time 0s 1e
    drv i33$ %alu_opa, %92, %93
    %94 = const i33 0
    %opb5 = prb i32$ %opb
    %95 = neg i32 %opb5
    %96 = inss i33 %94, i32 %95, 0, 32
    %97 = const time 0s 1e
    drv i33$ %alu_opb, %96, %97
    %98 = const i32 0
    %99 = const i31 0
    %adder_result4 = prb i33$ %adder_result
    %100 = const i32 32
    %101 = const i33 0
    %102 = shr i33 %adder_result4, i33 %101, i32 %100
    %103 = exts i1, i33 %102, 0, 1
    %104 = inss i31 %99, i1 %103, 0, 1
    %105 = const i30 0
    %106 = inss i31 %104, i30 %105, 1, 30
    %107 = inss i32 %98, i31 %106, 0, 31
    %108 = const time 0s 1e
    drv i32$ %alu_result, %107, %108
    br %case_exit
90:
    %109 = const i1 0
    %110 = const i4 14
    %111 = eq i4 %alu_op1, %110
    %112 = or i1 %109, %111
    br %112, %113, %case_body4
case_body4:
    %114 = const i33 0
    %opa3 = prb i32$ %opa
    %115 = inss i33 %114, i32 %opa3, 0, 32
    %116 = const time 0s 1e
    drv i33$ %alu_opa, %115, %116
    %117 = const i33 0
    %opb6 = prb i32$ %opb
    %118 = neg i32 %opb6
    %119 = inss i33 %117, i32 %118, 0, 32
    %120 = const time 0s 1e
    drv i33$ %alu_opb, %119, %120
    %121 = const i32 0
    %122 = const i31 0
    %adder_result5 = prb i33$ %adder_result
    %123 = const i32 32
    %124 = const i33 0
    %125 = shr i33 %adder_result5, i33 %124, i32 %123
    %126 = exts i1, i33 %125, 0, 1
    %127 = not i1 %126
    %128 = inss i31 %122, i1 %127, 0, 1
    %129 = const i30 0
    %130 = inss i31 %128, i30 %129, 1, 30
    %131 = inss i32 %121, i31 %130, 0, 31
    %132 = const time 0s 1e
    drv i32$ %alu_result, %131, %132
    br %case_exit
113:
    %133 = const i1 0
    %134 = const i4 4
    %135 = eq i4 %alu_op1, %134
    %136 = or i1 %133, %135
    br %136, %137, %case_body5
case_body5:
    %138 = const i1 1
    %139 = const time 0s 1e
    drv i1$ %shift_left, %138, %139
    %shift_left_result1 = prb i32$ %shift_left_result
    %140 = const time 0s 1e
    drv i32$ %alu_result, %shift_left_result1, %140
    br %case_exit
137:
    %141 = const i1 0
    %142 = const i4 5
    %143 = eq i4 %alu_op1, %142
    %144 = or i1 %141, %143
    br %144, %145, %case_body6
case_body6:
    %shift_right_result1 = prb i32$ %shift_right_result
    %146 = const time 0s 1e
    drv i32$ %alu_result, %shift_right_result1, %146
    br %case_exit
145:
    %147 = const i1 0
    %148 = const i4 6
    %149 = eq i4 %alu_op1, %148
    %150 = or i1 %147, %149
    br %150, %151, %case_body7
case_body7:
    %152 = const i1 1
    %153 = const time 0s 1e
    drv i1$ %shift_arithmetic, %152, %153
    %shift_right_result2 = prb i32$ %shift_right_result
    %154 = const time 0s 1e
    drv i32$ %alu_result, %shift_right_result2, %154
    br %case_exit
151:
    %155 = const i1 0
    %156 = const i4 7
    %157 = eq i4 %alu_op1, %156
    %158 = or i1 %155, %157
    br %158, %159, %case_body8
case_body8:
    %opa4 = prb i32$ %opa
    %opb7 = prb i32$ %opb
    %160 = xor i32 %opa4, %opb7
    %161 = const time 0s 1e
    drv i32$ %alu_result, %160, %161
    br %case_exit
159:
    %162 = const i1 0
    %163 = const i4 9
    %164 = eq i4 %alu_op1, %163
    %165 = or i1 %162, %164
    br %165, %166, %case_body9
case_body9:
    %opa5 = prb i32$ %opa
    %opb8 = prb i32$ %opb
    %167 = and i32 %opa5, %opb8
    %168 = const time 0s 1e
    drv i32$ %alu_result, %167, %168
    br %case_exit
166:
    %169 = const i1 0
    %170 = const i4 10
    %171 = eq i4 %alu_op1, %170
    %172 = or i1 %169, %171
    br %172, %173, %case_body10
case_body10:
    %opa6 = prb i32$ %opa
    %174 = not i32 %opa6
    %opb9 = prb i32$ %opb
    %175 = and i32 %174, %opb9
    %176 = const time 0s 1e
    drv i32$ %alu_result, %175, %176
    br %case_exit
173:
    %177 = const i1 0
    %178 = const i4 8
    %179 = eq i4 %alu_op1, %178
    %180 = or i1 %177, %179
    br %180, %181, %case_body11
case_body11:
    %opa7 = prb i32$ %opa
    %opb10 = prb i32$ %opb
    %182 = or i32 %opa7, %opb10
    %183 = const time 0s 1e
    drv i32$ %alu_result, %182, %183
    br %case_exit
181:
    %184 = const i1 0
    %185 = const i4 11
    %186 = eq i4 %alu_op1, %185
    %187 = or i1 %184, %186
    br %187, %188, %case_body12
case_body12:
    %opb11 = prb i32$ %opb
    %189 = neg i32 %opb11
    %190 = exts i1, i32 %189, 31, 1
    %191 = const i33 0
    %192 = not i33 %191
    %193 = [i33 %191, %192]
    %194 = mux [2 x i33] %193, i1 %190
    %195 = inss i33 %194, i32 %189, 0, 32
    %196 = const time 0s 1e
    drv i33$ %alu_opb, %195, %196
    %197 = const i32 0
    %adder_result6 = prb i33$ %adder_result
    %198 = exts i1, i33 %adder_result6, 0, 1
    %199 = exts i1, i33 %adder_result6, 1, 1
    %200 = or i1 %198, %199
    %201 = exts i1, i33 %adder_result6, 2, 1
    %202 = or i1 %200, %201
    %203 = exts i1, i33 %adder_result6, 3, 1
    %204 = or i1 %202, %203
    %205 = exts i1, i33 %adder_result6, 4, 1
    %206 = or i1 %204, %205
    %207 = exts i1, i33 %adder_result6, 5, 1
    %208 = or i1 %206, %207
    %209 = exts i1, i33 %adder_result6, 6, 1
    %210 = or i1 %208, %209
    %211 = exts i1, i33 %adder_result6, 7, 1
    %212 = or i1 %210, %211
    %213 = exts i1, i33 %adder_result6, 8, 1
    %214 = or i1 %212, %213
    %215 = exts i1, i33 %adder_result6, 9, 1
    %216 = or i1 %214, %215
    %217 = exts i1, i33 %adder_result6, 10, 1
    %218 = or i1 %216, %217
    %219 = exts i1, i33 %adder_result6, 11, 1
    %220 = or i1 %218, %219
    %221 = exts i1, i33 %adder_result6, 12, 1
    %222 = or i1 %220, %221
    %223 = exts i1, i33 %adder_result6, 13, 1
    %224 = or i1 %222, %223
    %225 = exts i1, i33 %adder_result6, 14, 1
    %226 = or i1 %224, %225
    %227 = exts i1, i33 %adder_result6, 15, 1
    %228 = or i1 %226, %227
    %229 = exts i1, i33 %adder_result6, 16, 1
    %230 = or i1 %228, %229
    %231 = exts i1, i33 %adder_result6, 17, 1
    %232 = or i1 %230, %231
    %233 = exts i1, i33 %adder_result6, 18, 1
    %234 = or i1 %232, %233
    %235 = exts i1, i33 %adder_result6, 19, 1
    %236 = or i1 %234, %235
    %237 = exts i1, i33 %adder_result6, 20, 1
    %238 = or i1 %236, %237
    %239 = exts i1, i33 %adder_result6, 21, 1
    %240 = or i1 %238, %239
    %241 = exts i1, i33 %adder_result6, 22, 1
    %242 = or i1 %240, %241
    %243 = exts i1, i33 %adder_result6, 23, 1
    %244 = or i1 %242, %243
    %245 = exts i1, i33 %adder_result6, 24, 1
    %246 = or i1 %244, %245
    %247 = exts i1, i33 %adder_result6, 25, 1
    %248 = or i1 %246, %247
    %249 = exts i1, i33 %adder_result6, 26, 1
    %250 = or i1 %248, %249
    %251 = exts i1, i33 %adder_result6, 27, 1
    %252 = or i1 %250, %251
    %253 = exts i1, i33 %adder_result6, 28, 1
    %254 = or i1 %252, %253
    %255 = exts i1, i33 %adder_result6, 29, 1
    %256 = or i1 %254, %255
    %257 = exts i1, i33 %adder_result6, 30, 1
    %258 = or i1 %256, %257
    %259 = exts i1, i33 %adder_result6, 31, 1
    %260 = or i1 %258, %259
    %261 = exts i1, i33 %adder_result6, 32, 1
    %262 = or i1 %260, %261
    %263 = not i1 %262
    %264 = inss i32 %197, i1 %263, 0, 1
    %265 = const time 0s 1e
    drv i32$ %alu_result, %264, %265
    br %case_exit
188:
    %266 = const i1 0
    %267 = const i4 12
    %268 = eq i4 %alu_op1, %267
    %269 = or i1 %266, %268
    br %269, %270, %case_body13
case_body13:
    %opb12 = prb i32$ %opb
    %271 = neg i32 %opb12
    %272 = exts i1, i32 %271, 31, 1
    %273 = const i33 0
    %274 = not i33 %273
    %275 = [i33 %273, %274]
    %276 = mux [2 x i33] %275, i1 %272
    %277 = inss i33 %276, i32 %271, 0, 32
    %278 = const time 0s 1e
    drv i33$ %alu_opb, %277, %278
    %279 = const i32 0
    %adder_result7 = prb i33$ %adder_result
    %280 = exts i1, i33 %adder_result7, 0, 1
    %281 = exts i1, i33 %adder_result7, 1, 1
    %282 = or i1 %280, %281
    %283 = exts i1, i33 %adder_result7, 2, 1
    %284 = or i1 %282, %283
    %285 = exts i1, i33 %adder_result7, 3, 1
    %286 = or i1 %284, %285
    %287 = exts i1, i33 %adder_result7, 4, 1
    %288 = or i1 %286, %287
    %289 = exts i1, i33 %adder_result7, 5, 1
    %290 = or i1 %288, %289
    %291 = exts i1, i33 %adder_result7, 6, 1
    %292 = or i1 %290, %291
    %293 = exts i1, i33 %adder_result7, 7, 1
    %294 = or i1 %292, %293
    %295 = exts i1, i33 %adder_result7, 8, 1
    %296 = or i1 %294, %295
    %297 = exts i1, i33 %adder_result7, 9, 1
    %298 = or i1 %296, %297
    %299 = exts i1, i33 %adder_result7, 10, 1
    %300 = or i1 %298, %299
    %301 = exts i1, i33 %adder_result7, 11, 1
    %302 = or i1 %300, %301
    %303 = exts i1, i33 %adder_result7, 12, 1
    %304 = or i1 %302, %303
    %305 = exts i1, i33 %adder_result7, 13, 1
    %306 = or i1 %304, %305
    %307 = exts i1, i33 %adder_result7, 14, 1
    %308 = or i1 %306, %307
    %309 = exts i1, i33 %adder_result7, 15, 1
    %310 = or i1 %308, %309
    %311 = exts i1, i33 %adder_result7, 16, 1
    %312 = or i1 %310, %311
    %313 = exts i1, i33 %adder_result7, 17, 1
    %314 = or i1 %312, %313
    %315 = exts i1, i33 %adder_result7, 18, 1
    %316 = or i1 %314, %315
    %317 = exts i1, i33 %adder_result7, 19, 1
    %318 = or i1 %316, %317
    %319 = exts i1, i33 %adder_result7, 20, 1
    %320 = or i1 %318, %319
    %321 = exts i1, i33 %adder_result7, 21, 1
    %322 = or i1 %320, %321
    %323 = exts i1, i33 %adder_result7, 22, 1
    %324 = or i1 %322, %323
    %325 = exts i1, i33 %adder_result7, 23, 1
    %326 = or i1 %324, %325
    %327 = exts i1, i33 %adder_result7, 24, 1
    %328 = or i1 %326, %327
    %329 = exts i1, i33 %adder_result7, 25, 1
    %330 = or i1 %328, %329
    %331 = exts i1, i33 %adder_result7, 26, 1
    %332 = or i1 %330, %331
    %333 = exts i1, i33 %adder_result7, 27, 1
    %334 = or i1 %332, %333
    %335 = exts i1, i33 %adder_result7, 28, 1
    %336 = or i1 %334, %335
    %337 = exts i1, i33 %adder_result7, 29, 1
    %338 = or i1 %336, %337
    %339 = exts i1, i33 %adder_result7, 30, 1
    %340 = or i1 %338, %339
    %341 = exts i1, i33 %adder_result7, 31, 1
    %342 = or i1 %340, %341
    %343 = exts i1, i33 %adder_result7, 32, 1
    %344 = or i1 %342, %343
    %345 = inss i32 %279, i1 %344, 0, 1
    %346 = const time 0s 1e
    drv i32$ %alu_result, %345, %346
    br %case_exit
270:
    %347 = const i1 0
    %348 = const i4 15
    %349 = eq i4 %alu_op1, %348
    %350 = or i1 %347, %349
    br %350, %351, %case_body14
case_body14:
    %opa8 = prb i32$ %opa
    %352 = const time 0s 1e
    drv i32$ %alu_result, %opa8, %352
    br %case_exit
351:
    %adder_result8 = prb i33$ %adder_result
    %353 = const i1 0
    %354 = const i33 0
    %355 = shr i33 %adder_result8, i33 %354, i1 %353
    %356 = exts i32, i33 %355, 0, 32
    %357 = const time 0s 1e
    drv i32$ %alu_result, %356, %357
    br %case_exit
}

proc %snitch.param1.always_comb.640.1 (i32$ %consec_pc, i32$ %alu_result, i2$ %rd_select, i32$ %rd_bypass) -> (i32$ %alu_writeback) {
0:
    br %body
body:
    %rd_select1 = prb i2$ %rd_select
    %1 = const i1 0
    %2 = const i2 0
    %3 = const i2 3
    %4 = and i2 %rd_select1, %3
    %5 = and i2 %2, %3
    %6 = eq i2 %4, %5
    %7 = or i1 %1, %6
    br %7, %8, %case_body
check:
    wait %body, %consec_pc, %alu_result, %rd_select, %rd_bypass
case_exit:
    br %check
case_body:
    %alu_result1 = prb i32$ %alu_result
    %9 = const time 0s 1e
    drv i32$ %alu_writeback, %alu_result1, %9
    br %case_exit
8:
    %10 = const i1 0
    %11 = const i2 1
    %12 = const i2 3
    %13 = and i2 %rd_select1, %12
    %14 = and i2 %11, %12
    %15 = eq i2 %13, %14
    %16 = or i1 %10, %15
    br %16, %17, %case_body1
case_body1:
    %consec_pc1 = prb i32$ %consec_pc
    %18 = const time 0s 1e
    drv i32$ %alu_writeback, %consec_pc1, %18
    br %case_exit
17:
    %19 = const i1 0
    %20 = const i2 2
    %21 = const i2 3
    %22 = and i2 %rd_select1, %21
    %23 = and i2 %20, %21
    %24 = eq i2 %22, %23
    %25 = or i1 %19, %24
    br %25, %26, %case_body2
case_body2:
    %rd_bypass1 = prb i32$ %rd_bypass
    %27 = const time 0s 1e
    drv i32$ %alu_writeback, %rd_bypass1, %27
    br %case_exit
26:
    %alu_result2 = prb i32$ %alu_result
    %28 = const time 0s 1e
    drv i32$ %alu_writeback, %alu_result2, %28
    br %case_exit
}

proc %snitch.param1.always_comb.641.1 (i64$ %acc_pdata_i, i5$ %acc_pid_i, i1$ %acc_pvalid_i, i5$ %rd, i64$ %ld_result, i1$ %lsu_pvalid, i5$ %lsu_rd, i1$ %retire_i, i32$ %alu_writeback) -> (i1$ %acc_pready_o, [1 x i5]$ %gpr_waddr, [1 x i32]$ %gpr_wdata, i1$ %gpr_we, i1$ %lsu_pready, i1$ %retire_load, i1$ %retire_acc) {
0:
    br %body
body:
    %1 = const i32 0
    %2 = const i1 0
    %3 = sig i1 %2
    %4 = shr i1$ %gpr_we, i1$ %3, i32 %1
    %5 = exts i1$, i1$ %4, 0, 1
    %6 = const i1 0
    %7 = const time 0s 1e
    drv i1$ %5, %6, %7
    %8 = const i32 0
    %9 = const i5 0
    %10 = [1 x i5 %9]
    %11 = sig [1 x i5] %10
    %12 = shr [1 x i5]$ %gpr_waddr, [1 x i5]$ %11, i32 %8
    %13 = extf i5$, [1 x i5]$ %12, 0
    %rd1 = prb i5$ %rd
    %14 = const time 0s 1e
    drv i5$ %13, %rd1, %14
    %15 = const i32 0
    %16 = const i32 0
    %17 = [1 x i32 %16]
    %18 = sig [1 x i32] %17
    %19 = shr [1 x i32]$ %gpr_wdata, [1 x i32]$ %18, i32 %15
    %20 = extf i32$, [1 x i32]$ %19, 0
    %alu_writeback1 = prb i32$ %alu_writeback
    %21 = const time 0s 1e
    drv i32$ %20, %alu_writeback1, %21
    %22 = const i1 0
    %23 = const time 0s 1e
    drv i1$ %lsu_pready, %22, %23
    %24 = const i1 0
    %25 = const time 0s 1e
    drv i1$ %acc_pready_o, %24, %25
    %26 = const i1 0
    %27 = const time 0s 1e
    drv i1$ %retire_acc, %26, %27
    %28 = const i1 0
    %29 = const time 0s 1e
    drv i1$ %retire_load, %28, %29
    %retire_i1 = prb i1$ %retire_i
    br %retire_i1, %if_false, %if_true
check:
    wait %body, %acc_pdata_i, %acc_pid_i, %acc_pvalid_i, %rd, %ld_result, %lsu_pvalid, %lsu_rd, %retire_i, %alu_writeback
if_true:
    %30 = const i32 0
    %31 = const i1 0
    %32 = sig i1 %31
    %33 = shr i1$ %gpr_we, i1$ %32, i32 %30
    %34 = exts i1$, i1$ %33, 0, 1
    %35 = const i1 1
    %36 = const time 0s 1e
    drv i1$ %34, %35, %36
    br %if_exit
if_false:
    %lsu_pvalid1 = prb i1$ %lsu_pvalid
    br %lsu_pvalid1, %if_false1, %if_true1
if_exit:
    br %check
if_true1:
    %37 = const i1 1
    %38 = const time 0s 1e
    drv i1$ %retire_load, %37, %38
    %39 = const i32 0
    %40 = const i1 0
    %41 = sig i1 %40
    %42 = shr i1$ %gpr_we, i1$ %41, i32 %39
    %43 = exts i1$, i1$ %42, 0, 1
    %44 = const i1 1
    %45 = const time 0s 1e
    drv i1$ %43, %44, %45
    %46 = const i32 0
    %47 = const i5 0
    %48 = [1 x i5 %47]
    %49 = sig [1 x i5] %48
    %50 = shr [1 x i5]$ %gpr_waddr, [1 x i5]$ %49, i32 %46
    %51 = extf i5$, [1 x i5]$ %50, 0
    %lsu_rd1 = prb i5$ %lsu_rd
    %52 = const time 0s 1e
    drv i5$ %51, %lsu_rd1, %52
    %53 = const i32 0
    %54 = const i32 0
    %55 = [1 x i32 %54]
    %56 = sig [1 x i32] %55
    %57 = shr [1 x i32]$ %gpr_wdata, [1 x i32]$ %56, i32 %53
    %58 = extf i32$, [1 x i32]$ %57, 0
    %ld_result1 = prb i64$ %ld_result
    %59 = const i1 0
    %60 = const i64 0
    %61 = shr i64 %ld_result1, i64 %60, i1 %59
    %62 = exts i32, i64 %61, 0, 32
    %63 = const time 0s 1e
    drv i32$ %58, %62, %63
    %64 = const i1 1
    %65 = const time 0s 1e
    drv i1$ %lsu_pready, %64, %65
    br %if_exit1
if_false1:
    %acc_pvalid_i1 = prb i1$ %acc_pvalid_i
    br %acc_pvalid_i1, %if_false2, %if_true2
if_exit1:
    br %if_exit
if_true2:
    %66 = const i1 1
    %67 = const time 0s 1e
    drv i1$ %retire_acc, %66, %67
    %68 = const i32 0
    %69 = const i1 0
    %70 = sig i1 %69
    %71 = shr i1$ %gpr_we, i1$ %70, i32 %68
    %72 = exts i1$, i1$ %71, 0, 1
    %73 = const i1 1
    %74 = const time 0s 1e
    drv i1$ %72, %73, %74
    %75 = const i32 0
    %76 = const i5 0
    %77 = [1 x i5 %76]
    %78 = sig [1 x i5] %77
    %79 = shr [1 x i5]$ %gpr_waddr, [1 x i5]$ %78, i32 %75
    %80 = extf i5$, [1 x i5]$ %79, 0
    %acc_pid_i1 = prb i5$ %acc_pid_i
    %81 = const time 0s 1e
    drv i5$ %80, %acc_pid_i1, %81
    %82 = const i32 0
    %83 = const i32 0
    %84 = [1 x i32 %83]
    %85 = sig [1 x i32] %84
    %86 = shr [1 x i32]$ %gpr_wdata, [1 x i32]$ %85, i32 %82
    %87 = extf i32$, [1 x i32]$ %86, 0
    %acc_pdata_i1 = prb i64$ %acc_pdata_i
    %88 = const i1 0
    %89 = const i64 0
    %90 = shr i64 %acc_pdata_i1, i64 %89, i1 %88
    %91 = exts i32, i64 %90, 0, 32
    %92 = const time 0s 1e
    drv i32$ %87, %91, %92
    %93 = const i1 1
    %94 = const time 0s 1e
    drv i1$ %acc_pready_o, %93, %94
    br %if_exit2
if_false2:
    br %if_exit2
if_exit2:
    br %if_exit1
}

entity @snitch.param1 (i1$ %clk_i, i1$ %rst_i, i32$ %hart_id_i, i32$ %inst_data_i, i1$ %inst_ready_i, i1$ %acc_qready_i, i64$ %acc_pdata_i, i5$ %acc_pid_i, i1$ %acc_perror_i, i1$ %acc_pvalid_i, i1$ %data_qready_i, i64$ %data_pdata_i, i1$ %data_perror_i, i1$ %data_pvalid_i, i1$ %wake_up_sync_i, {i1, i1, i1, i1, i1}$ %fpu_status_i) -> (i32$ %inst_addr_o, i1$ %inst_valid_o, i32$ %acc_qaddr_o, i5$ %acc_qid_o, i32$ %acc_qdata_op_o, i64$ %acc_qdata_arga_o, i64$ %acc_qdata_argb_o, i64$ %acc_qdata_argc_o, i1$ %acc_qvalid_o, i1$ %acc_pready_o, i32$ %data_qaddr_o, i1$ %data_qwrite_o, i4$ %data_qamo_o, i64$ %data_qdata_o, i8$ %data_qstrb_o, i1$ %data_qvalid_o, i1$ %data_pready_o, i3$ %fpu_rnd_mode_o, {i1, i1, i1, i1}$ %core_events_o) {
    %0 = const i1 0
    %illegal_inst = sig i1 %0
    %1 = const i1 0
    %zero_lsb = sig i1 %1
    %2 = const i32 0
    %pc_d = sig i32 %2
    %3 = const i32 0
    %pc_q = sig i32 %3
    %4 = const i1 0
    %wfi_d = sig i1 %4
    %5 = const i1 0
    %wfi_q = sig i1 %5
    %6 = const i32 0
    %consec_pc = sig i32 %6
    %7 = const i32 0
    %iimm = sig i32 %7
    %8 = const i32 0
    %uimm = sig i32 %8
    %9 = const i32 0
    %jimm = sig i32 %9
    %10 = const i32 0
    %bimm = sig i32 %10
    %11 = const i32 0
    %simm = sig i32 %11
    %12 = const i32 0
    %opa = sig i32 %12
    %13 = const i32 0
    %opb = sig i32 %13
    %14 = const i33 0
    %adder_result = sig i33 %14
    %15 = const i32 0
    %alu_result = sig i32 %15
    %16 = const i5 0
    %rd = sig i5 %16
    %17 = const i5 0
    %rs1 = sig i5 %17
    %18 = const i5 0
    %rs2 = sig i5 %18
    %19 = const i1 0
    %stall = sig i1 %19
    %20 = const i1 0
    %lsu_stall = sig i1 %20
    %21 = const i5 0
    %22 = const i5 0
    %23 = [i5 %21, %22]
    %gpr_raddr = sig [2 x i5] %23
    %24 = const i32 0
    %25 = const i32 0
    %26 = [i32 %24, %25]
    %gpr_rdata = sig [2 x i32] %26
    %27 = const i5 0
    %28 = [i5 %27]
    %gpr_waddr = sig [1 x i5] %28
    %29 = const i32 0
    %30 = [i32 %29]
    %gpr_wdata = sig [1 x i32] %30
    %31 = const i1 0
    %gpr_we = sig i1 %31
    %32 = const i32 0
    %sb_d = sig i32 %32
    %33 = const i32 0
    %sb_q = sig i32 %33
    %34 = const i1 0
    %is_load = sig i1 %34
    %35 = const i1 0
    %is_store = sig i1 %35
    %36 = const i1 0
    %is_signed = sig i1 %36
    %37 = const i2 0
    %ls_size = sig i2 %37
    %38 = const i4 0
    %ls_amo = sig i4 %38
    %39 = const i64 0
    %ld_result = sig i64 %39
    %40 = const i1 0
    %lsu_qready = sig i1 %40
    %41 = const i1 0
    %lsu_qvalid = sig i1 %41
    %42 = const i1 0
    %lsu_pvalid = sig i1 %42
    %43 = const i1 0
    %lsu_pready = sig i1 %43
    %44 = const i5 0
    %lsu_rd = sig i5 %44
    %45 = const i1 0
    %retire_load = sig i1 %45
    %46 = const i1 0
    %retire_i = sig i1 %46
    %47 = const i1 0
    %retire_acc = sig i1 %47
    %48 = const i1 0
    %acc_stall = sig i1 %48
    %49 = const i1 0
    %valid_instr = sig i1 %49
    %50 = const i4 0
    %alu_op = sig i4 %50
    %51 = const i4 0
    %opa_select = sig i4 %51
    %52 = const i4 0
    %opb_select = sig i4 %52
    %53 = const i1 0
    %write_rd = sig i1 %53
    %54 = const i1 0
    %uses_rd = sig i1 %54
    %55 = const i2 0
    %next_pc = sig i2 %55
    %56 = const i2 0
    %rd_select = sig i2 %56
    %57 = const i32 0
    %rd_bypass = sig i32 %57
    %58 = const i1 0
    %is_branch = sig i1 %58
    %59 = const i32 0
    %csr_rvalue = sig i32 %59
    %60 = const i1 0
    %csr_en = sig i1 %60
    %61 = const i3 0
    %62 = const i1 0
    %63 = const i1 0
    %64 = const i1 0
    %65 = const i1 0
    %66 = const i1 0
    %67 = {i1 %62, i1 %63, i1 %64, i1 %65, i1 %66}
    %68 = {i3 %61, {i1, i1, i1, i1, i1} %67}
    %fcsr_d = sig {i3, {i1, i1, i1, i1, i1}} %68
    %69 = const i3 0
    %70 = const i1 0
    %71 = const i1 0
    %72 = const i1 0
    %73 = const i1 0
    %74 = const i1 0
    %75 = {i1 %70, i1 %71, i1 %72, i1 %73, i1 %74}
    %76 = {i3 %69, {i1, i1, i1, i1, i1} %75}
    %fcsr_q = sig {i3, {i1, i1, i1, i1, i1}} %76
    %77 = const i1 0
    %acc_register_rd = sig i1 %77
    %78 = const i1 0
    %operands_ready = sig i1 %78
    %79 = const i1 0
    %dst_ready = sig i1 %79
    %80 = const i1 0
    %opa_ready = sig i1 %80
    %81 = const i1 0
    %opb_ready = sig i1 %81
    %82 = const i32 0
    %shift_opa = sig i32 %82
    %83 = const i32 0
    %shift_opa_reversed = sig i32 %83
    %84 = const i32 0
    %shift_right_result = sig i32 %84
    %85 = const i32 0
    %shift_left_result = sig i32 %85
    %86 = const i33 0
    %shift_opa_ext = sig i33 %86
    %87 = const i33 0
    %shift_right_result_ext = sig i33 %87
    %88 = const i1 0
    %shift_left = sig i1 %88
    %89 = const i1 0
    %shift_arithmetic = sig i1 %89
    %90 = const i33 0
    %alu_opa = sig i33 %90
    %91 = const i33 0
    %alu_opb = sig i33 %91
    %92 = const i32 0
    %alu_writeback = sig i32 %92
    %93 = const i12 0
    %inst_data_i1 = prb i32$ %inst_data_i
    %94 = const i5 20
    %95 = const i32 0
    %96 = shr i32 %inst_data_i1, i32 %95, i5 %94
    %97 = exts i12, i32 %96, 0, 12
    %98 = inss i12 %93, i12 %97, 0, 12
    %99 = exts i1, i12 %98, 11, 1
    %100 = const i32 0
    %101 = not i32 %100
    %102 = [i32 %100, %101]
    %103 = mux [2 x i32] %102, i1 %99
    %104 = inss i32 %103, i12 %98, 0, 12
    %105 = const time 0s 1e
    drv i32$ %iimm, %104, %105
    %106 = const i32 0
    %107 = const i12 0
    %108 = inss i32 %106, i12 %107, 0, 12
    %inst_data_i2 = prb i32$ %inst_data_i
    %109 = const i4 12
    %110 = const i32 0
    %111 = shr i32 %inst_data_i2, i32 %110, i4 %109
    %112 = exts i20, i32 %111, 0, 20
    %113 = inss i32 %108, i20 %112, 12, 20
    %114 = const time 0s 1e
    drv i32$ %uimm, %113, %114
    %115 = const i21 0
    %116 = const i1 0
    %117 = inss i21 %115, i1 %116, 0, 1
    %inst_data_i3 = prb i32$ %inst_data_i
    %118 = const i5 21
    %119 = const i32 0
    %120 = shr i32 %inst_data_i3, i32 %119, i5 %118
    %121 = exts i10, i32 %120, 0, 10
    %122 = inss i21 %117, i10 %121, 1, 10
    %inst_data_i4 = prb i32$ %inst_data_i
    %123 = const i32 20
    %124 = const i32 0
    %125 = shr i32 %inst_data_i4, i32 %124, i32 %123
    %126 = exts i1, i32 %125, 0, 1
    %127 = inss i21 %122, i1 %126, 11, 1
    %inst_data_i5 = prb i32$ %inst_data_i
    %128 = const i4 12
    %129 = const i32 0
    %130 = shr i32 %inst_data_i5, i32 %129, i4 %128
    %131 = exts i8, i32 %130, 0, 8
    %132 = inss i21 %127, i8 %131, 12, 8
    %inst_data_i6 = prb i32$ %inst_data_i
    %133 = const i32 31
    %134 = const i32 0
    %135 = shr i32 %inst_data_i6, i32 %134, i32 %133
    %136 = exts i1, i32 %135, 0, 1
    %137 = inss i21 %132, i1 %136, 20, 1
    %138 = exts i1, i21 %137, 20, 1
    %139 = const i32 0
    %140 = not i32 %139
    %141 = [i32 %139, %140]
    %142 = mux [2 x i32] %141, i1 %138
    %143 = inss i32 %142, i21 %137, 0, 21
    %144 = const time 0s 1e
    drv i32$ %jimm, %143, %144
    %145 = const i13 0
    %146 = const i1 0
    %147 = inss i13 %145, i1 %146, 0, 1
    %inst_data_i7 = prb i32$ %inst_data_i
    %148 = const i4 8
    %149 = const i32 0
    %150 = shr i32 %inst_data_i7, i32 %149, i4 %148
    %151 = exts i4, i32 %150, 0, 4
    %152 = inss i13 %147, i4 %151, 1, 4
    %inst_data_i8 = prb i32$ %inst_data_i
    %153 = const i5 25
    %154 = const i32 0
    %155 = shr i32 %inst_data_i8, i32 %154, i5 %153
    %156 = exts i6, i32 %155, 0, 6
    %157 = inss i13 %152, i6 %156, 5, 6
    %inst_data_i9 = prb i32$ %inst_data_i
    %158 = const i32 7
    %159 = const i32 0
    %160 = shr i32 %inst_data_i9, i32 %159, i32 %158
    %161 = exts i1, i32 %160, 0, 1
    %162 = inss i13 %157, i1 %161, 11, 1
    %inst_data_i10 = prb i32$ %inst_data_i
    %163 = const i32 31
    %164 = const i32 0
    %165 = shr i32 %inst_data_i10, i32 %164, i32 %163
    %166 = exts i1, i32 %165, 0, 1
    %167 = inss i13 %162, i1 %166, 12, 1
    %168 = exts i1, i13 %167, 12, 1
    %169 = const i32 0
    %170 = not i32 %169
    %171 = [i32 %169, %170]
    %172 = mux [2 x i32] %171, i1 %168
    %173 = inss i32 %172, i13 %167, 0, 13
    %174 = const time 0s 1e
    drv i32$ %bimm, %173, %174
    %175 = const i12 0
    %inst_data_i11 = prb i32$ %inst_data_i
    %176 = const i3 7
    %177 = const i32 0
    %178 = shr i32 %inst_data_i11, i32 %177, i3 %176
    %179 = exts i5, i32 %178, 0, 5
    %180 = inss i12 %175, i5 %179, 0, 5
    %inst_data_i12 = prb i32$ %inst_data_i
    %181 = const i5 25
    %182 = const i32 0
    %183 = shr i32 %inst_data_i12, i32 %182, i5 %181
    %184 = exts i7, i32 %183, 0, 7
    %185 = inss i12 %180, i7 %184, 5, 7
    %186 = exts i1, i12 %185, 11, 1
    %187 = const i32 0
    %188 = not i32 %187
    %189 = [i32 %187, %188]
    %190 = mux [2 x i32] %189, i1 %186
    %191 = inss i32 %190, i12 %185, 0, 12
    %192 = const time 0s 1e
    drv i32$ %simm, %191, %192
    %fcsr_q1 = prb {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q
    %193 = extf i3, {i3, {i1, i1, i1, i1, i1}} %fcsr_q1, 0
    %194 = const time 0s 1e
    drv i3$ %fpu_rnd_mode_o, %193, %194
    %hart_id_i1 = prb i32$ %hart_id_i
    %195 = const time 0s 1e
    drv i32$ %acc_qaddr_o, %hart_id_i1, %195
    %rd1 = prb i5$ %rd
    %196 = const time 0s 1e
    drv i5$ %acc_qid_o, %rd1, %196
    %inst_data_i13 = prb i32$ %inst_data_i
    %197 = const time 0s 1e
    drv i32$ %acc_qdata_op_o, %inst_data_i13, %197
    %198 = const i64 0
    %gpr_rdata1 = prb [2 x i32]$ %gpr_rdata
    %199 = const i32 0
    %200 = const i32 0
    %201 = [2 x i32 %200]
    %202 = shr [2 x i32] %gpr_rdata1, [2 x i32] %201, i32 %199
    %203 = extf i32, [2 x i32] %202, 0
    %204 = inss i64 %198, i32 %203, 0, 32
    %205 = const i1 0
    %gpr_rdata2 = prb [2 x i32]$ %gpr_rdata
    %206 = const i32 0
    %207 = const i32 0
    %208 = [2 x i32 %207]
    %209 = shr [2 x i32] %gpr_rdata2, [2 x i32] %208, i32 %206
    %210 = extf i32, [2 x i32] %209, 0
    %211 = const i32 31
    %212 = const i32 0
    %213 = shr i32 %210, i32 %212, i32 %211
    %214 = exts i1, i32 %213, 0, 1
    %215 = inss i1 %205, i1 %214, 0, 1
    %216 = const i32 0
    %217 = inss i32 %216, i1 %215, 0, 1
    %218 = inss i32 %217, i1 %215, 1, 1
    %219 = inss i32 %218, i1 %215, 2, 1
    %220 = inss i32 %219, i1 %215, 3, 1
    %221 = inss i32 %220, i1 %215, 4, 1
    %222 = inss i32 %221, i1 %215, 5, 1
    %223 = inss i32 %222, i1 %215, 6, 1
    %224 = inss i32 %223, i1 %215, 7, 1
    %225 = inss i32 %224, i1 %215, 8, 1
    %226 = inss i32 %225, i1 %215, 9, 1
    %227 = inss i32 %226, i1 %215, 10, 1
    %228 = inss i32 %227, i1 %215, 11, 1
    %229 = inss i32 %228, i1 %215, 12, 1
    %230 = inss i32 %229, i1 %215, 13, 1
    %231 = inss i32 %230, i1 %215, 14, 1
    %232 = inss i32 %231, i1 %215, 15, 1
    %233 = inss i32 %232, i1 %215, 16, 1
    %234 = inss i32 %233, i1 %215, 17, 1
    %235 = inss i32 %234, i1 %215, 18, 1
    %236 = inss i32 %235, i1 %215, 19, 1
    %237 = inss i32 %236, i1 %215, 20, 1
    %238 = inss i32 %237, i1 %215, 21, 1
    %239 = inss i32 %238, i1 %215, 22, 1
    %240 = inss i32 %239, i1 %215, 23, 1
    %241 = inss i32 %240, i1 %215, 24, 1
    %242 = inss i32 %241, i1 %215, 25, 1
    %243 = inss i32 %242, i1 %215, 26, 1
    %244 = inss i32 %243, i1 %215, 27, 1
    %245 = inss i32 %244, i1 %215, 28, 1
    %246 = inss i32 %245, i1 %215, 29, 1
    %247 = inss i32 %246, i1 %215, 30, 1
    %248 = inss i32 %247, i1 %215, 31, 1
    %249 = inss i64 %204, i32 %248, 32, 32
    %250 = const time 0s 1e
    drv i64$ %acc_qdata_arga_o, %249, %250
    %251 = const i64 0
    %gpr_rdata3 = prb [2 x i32]$ %gpr_rdata
    %252 = const i32 1
    %253 = const i32 0
    %254 = [2 x i32 %253]
    %255 = shr [2 x i32] %gpr_rdata3, [2 x i32] %254, i32 %252
    %256 = extf i32, [2 x i32] %255, 0
    %257 = inss i64 %251, i32 %256, 0, 32
    %258 = const i1 0
    %gpr_rdata4 = prb [2 x i32]$ %gpr_rdata
    %259 = const i32 1
    %260 = const i32 0
    %261 = [2 x i32 %260]
    %262 = shr [2 x i32] %gpr_rdata4, [2 x i32] %261, i32 %259
    %263 = extf i32, [2 x i32] %262, 0
    %264 = const i32 31
    %265 = const i32 0
    %266 = shr i32 %263, i32 %265, i32 %264
    %267 = exts i1, i32 %266, 0, 1
    %268 = inss i1 %258, i1 %267, 0, 1
    %269 = const i32 0
    %270 = inss i32 %269, i1 %268, 0, 1
    %271 = inss i32 %270, i1 %268, 1, 1
    %272 = inss i32 %271, i1 %268, 2, 1
    %273 = inss i32 %272, i1 %268, 3, 1
    %274 = inss i32 %273, i1 %268, 4, 1
    %275 = inss i32 %274, i1 %268, 5, 1
    %276 = inss i32 %275, i1 %268, 6, 1
    %277 = inss i32 %276, i1 %268, 7, 1
    %278 = inss i32 %277, i1 %268, 8, 1
    %279 = inss i32 %278, i1 %268, 9, 1
    %280 = inss i32 %279, i1 %268, 10, 1
    %281 = inss i32 %280, i1 %268, 11, 1
    %282 = inss i32 %281, i1 %268, 12, 1
    %283 = inss i32 %282, i1 %268, 13, 1
    %284 = inss i32 %283, i1 %268, 14, 1
    %285 = inss i32 %284, i1 %268, 15, 1
    %286 = inss i32 %285, i1 %268, 16, 1
    %287 = inss i32 %286, i1 %268, 17, 1
    %288 = inss i32 %287, i1 %268, 18, 1
    %289 = inss i32 %288, i1 %268, 19, 1
    %290 = inss i32 %289, i1 %268, 20, 1
    %291 = inss i32 %290, i1 %268, 21, 1
    %292 = inss i32 %291, i1 %268, 22, 1
    %293 = inss i32 %292, i1 %268, 23, 1
    %294 = inss i32 %293, i1 %268, 24, 1
    %295 = inss i32 %294, i1 %268, 25, 1
    %296 = inss i32 %295, i1 %268, 26, 1
    %297 = inss i32 %296, i1 %268, 27, 1
    %298 = inss i32 %297, i1 %268, 28, 1
    %299 = inss i32 %298, i1 %268, 29, 1
    %300 = inss i32 %299, i1 %268, 30, 1
    %301 = inss i32 %300, i1 %268, 31, 1
    %302 = inss i64 %257, i32 %301, 32, 32
    %303 = const time 0s 1e
    drv i64$ %acc_qdata_argb_o, %302, %303
    %304 = const i64 0
    %alu_result1 = prb i32$ %alu_result
    %305 = inss i64 %304, i32 %alu_result1, 0, 32
    %306 = const i32 0
    %307 = inss i64 %305, i32 %306, 32, 32
    %308 = const time 0s 1e
    drv i64$ %acc_qdata_argc_o, %307, %308
    %pc_q1 = prb i32$ %pc_q
    %309 = const time 0s 1e
    drv i32$ %inst_addr_o, %pc_q1, %309
    %wfi_q1 = prb i1$ %wfi_q
    %310 = not i1 %wfi_q1
    %311 = const time 0s 1e
    drv i1$ %inst_valid_o, %310, %311
    %opa_select1 = prb i4$ %opa_select
    %312 = const i4 1
    %313 = neq i4 %opa_select1, %312
    %sb_q1 = prb i32$ %sb_q
    %rs11 = prb i5$ %rs1
    %314 = const i32 0
    %315 = shr i32 %sb_q1, i32 %314, i5 %rs11
    %316 = exts i1, i32 %315, 0, 1
    %317 = not i1 %316
    %318 = or i1 %313, %317
    %319 = const time 0s 1e
    drv i1$ %opa_ready, %318, %319
    %opb_select1 = prb i4$ %opb_select
    %320 = const i4 1
    %321 = neq i4 %opb_select1, %320
    %opb_select2 = prb i4$ %opb_select
    %322 = const i4 5
    %323 = neq i4 %opb_select2, %322
    %324 = and i1 %321, %323
    %sb_q2 = prb i32$ %sb_q
    %rs21 = prb i5$ %rs2
    %325 = const i32 0
    %326 = shr i32 %sb_q2, i32 %325, i5 %rs21
    %327 = exts i1, i32 %326, 0, 1
    %328 = not i1 %327
    %329 = or i1 %324, %328
    %330 = const time 0s 1e
    drv i1$ %opb_ready, %329, %330
    %opa_ready1 = prb i1$ %opa_ready
    %opb_ready1 = prb i1$ %opb_ready
    %331 = and i1 %opa_ready1, %opb_ready1
    %332 = const time 0s 1e
    drv i1$ %operands_ready, %331, %332
    %uses_rd1 = prb i1$ %uses_rd
    %sb_q3 = prb i32$ %sb_q
    %rd2 = prb i5$ %rd
    %333 = const i32 0
    %334 = shr i32 %sb_q3, i32 %333, i5 %rd2
    %335 = exts i1, i32 %334, 0, 1
    %336 = not i1 %335
    %337 = and i1 %uses_rd1, %336
    %338 = const time 0s 1e
    drv i1$ %dst_ready, %337, %338
    %inst_ready_i1 = prb i1$ %inst_ready_i
    %inst_valid_o1 = prb i1$ %inst_valid_o
    %339 = and i1 %inst_ready_i1, %inst_valid_o1
    %operands_ready1 = prb i1$ %operands_ready
    %340 = and i1 %339, %operands_ready1
    %dst_ready1 = prb i1$ %dst_ready
    %341 = and i1 %340, %dst_ready1
    %342 = const time 0s 1e
    drv i1$ %valid_instr, %341, %342
    %acc_qvalid_o1 = prb i1$ %acc_qvalid_o
    %acc_qready_i1 = prb i1$ %acc_qready_i
    %343 = not i1 %acc_qready_i1
    %344 = and i1 %acc_qvalid_o1, %343
    %345 = const time 0s 1e
    drv i1$ %acc_stall, %344, %345
    %lsu_qvalid1 = prb i1$ %lsu_qvalid
    %lsu_qready1 = prb i1$ %lsu_qready
    %346 = not i1 %lsu_qready1
    %347 = and i1 %lsu_qvalid1, %346
    %348 = const time 0s 1e
    drv i1$ %lsu_stall, %347, %348
    %valid_instr1 = prb i1$ %valid_instr
    %349 = not i1 %valid_instr1
    %lsu_stall1 = prb i1$ %lsu_stall
    %350 = or i1 %349, %lsu_stall1
    %acc_stall1 = prb i1$ %acc_stall
    %351 = or i1 %350, %acc_stall1
    %352 = const time 0s 1e
    drv i1$ %stall, %351, %352
    %pc_q2 = prb i32$ %pc_q
    %is_branch1 = prb i1$ %is_branch
    %alu_result2 = prb i32$ %alu_result
    %353 = const i32 0
    %354 = const i32 0
    %355 = shr i32 %alu_result2, i32 %354, i32 %353
    %356 = exts i1, i32 %355, 0, 1
    %357 = and i1 %is_branch1, %356
    %bimm1 = prb i32$ %bimm
    %358 = const i32 0
    %359 = const i3 4
    %360 = inss i32 %358, i3 %359, 0, 3
    %361 = [i32 %360, %bimm1]
    %362 = mux [2 x i32] %361, i1 %357
    %363 = add i32 %pc_q2, %362
    %364 = const time 0s 1e
    drv i32$ %consec_pc, %363, %364
    %inst_data_i14 = prb i32$ %inst_data_i
    %365 = const i3 7
    %366 = const i32 0
    %367 = shr i32 %inst_data_i14, i32 %366, i3 %365
    %368 = exts i5, i32 %367, 0, 5
    %369 = const time 0s 1e
    drv i5$ %rd, %368, %369
    %inst_data_i15 = prb i32$ %inst_data_i
    %370 = const i4 15
    %371 = const i32 0
    %372 = shr i32 %inst_data_i15, i32 %371, i4 %370
    %373 = exts i5, i32 %372, 0, 5
    %374 = const time 0s 1e
    drv i5$ %rs1, %373, %374
    %inst_data_i16 = prb i32$ %inst_data_i
    %375 = const i5 20
    %376 = const i32 0
    %377 = shr i32 %inst_data_i16, i32 %376, i5 %375
    %378 = exts i5, i32 %377, 0, 5
    %379 = const time 0s 1e
    drv i5$ %rs2, %378, %379
    %380 = const i32 0
    %381 = const i5 0
    %382 = [2 x i5 %381]
    %383 = sig [2 x i5] %382
    %384 = shr [2 x i5]$ %gpr_raddr, [2 x i5]$ %383, i32 %380
    %385 = extf i5$, [2 x i5]$ %384, 0
    %rs12 = prb i5$ %rs1
    %386 = const time 0s 1e
    drv i5$ %385, %rs12, %386
    %387 = const i32 1
    %388 = const i5 0
    %389 = [2 x i5 %388]
    %390 = sig [2 x i5] %389
    %391 = shr [2 x i5]$ %gpr_raddr, [2 x i5]$ %390, i32 %387
    %392 = extf i5$, [2 x i5]$ %391, 0
    %rs22 = prb i5$ %rs2
    %393 = const time 0s 1e
    drv i5$ %392, %rs22, %393
    %shift_left1 = prb i1$ %shift_left
    %shift_opa_reversed1 = prb i32$ %shift_opa_reversed
    %opa1 = prb i32$ %opa
    %394 = [i32 %opa1, %shift_opa_reversed1]
    %395 = mux [2 x i32] %394, i1 %shift_left1
    %396 = const time 0s 1e
    drv i32$ %shift_opa, %395, %396
    %397 = const i33 0
    %shift_opa1 = prb i32$ %shift_opa
    %398 = inss i33 %397, i32 %shift_opa1, 0, 32
    %shift_opa2 = prb i32$ %shift_opa
    %399 = const i32 31
    %400 = const i32 0
    %401 = shr i32 %shift_opa2, i32 %400, i32 %399
    %402 = exts i1, i32 %401, 0, 1
    %shift_arithmetic1 = prb i1$ %shift_arithmetic
    %403 = and i1 %402, %shift_arithmetic1
    %404 = inss i33 %398, i1 %403, 32, 1
    %405 = const time 0s 1e
    drv i33$ %shift_opa_ext, %404, %405
    %shift_opa_ext1 = prb i33$ %shift_opa_ext
    %opb1 = prb i32$ %opb
    %406 = const i1 0
    %407 = const i32 0
    %408 = shr i32 %opb1, i32 %407, i1 %406
    %409 = exts i5, i32 %408, 0, 5
    %410 = const i33 0
    %411 = shr i33 %shift_opa_ext1, i33 %410, i5 %409
    %412 = const time 0s 1e
    drv i33$ %shift_right_result_ext, %411, %412
    %shift_right_result_ext1 = prb i33$ %shift_right_result_ext
    %413 = const i1 0
    %414 = const i33 0
    %415 = shr i33 %shift_right_result_ext1, i33 %414, i1 %413
    %416 = exts i32, i33 %415, 0, 32
    %417 = const time 0s 1e
    drv i32$ %shift_right_result, %416, %417
    %alu_opa1 = prb i33$ %alu_opa
    %alu_opb1 = prb i33$ %alu_opb
    %418 = add i33 %alu_opa1, %alu_opb1
    %419 = const time 0s 1e
    drv i33$ %adder_result, %418, %419
    %valid_instr2 = prb i1$ %valid_instr
    %is_load1 = prb i1$ %is_load
    %is_store1 = prb i1$ %is_store
    %420 = or i1 %is_load1, %is_store1
    %421 = and i1 %valid_instr2, %420
    %422 = const time 0s 1e
    drv i1$ %lsu_qvalid, %421, %422
    %write_rd1 = prb i1$ %write_rd
    %valid_instr3 = prb i1$ %valid_instr
    %423 = and i1 %write_rd1, %valid_instr3
    %424 = const i32 0
    %rd3 = prb i5$ %rd
    %425 = inss i32 %424, i5 %rd3, 0, 5
    %426 = const i32 0
    %427 = neq i32 %425, %426
    %428 = and i1 %423, %427
    %429 = const time 0s 1e
    drv i1$ %retire_i, %428, %429
    %clk_i1 = prb i1$ %clk_i
    %430 = const i1 0
    %431 = sig i1 %430
    %432 = const time 0s 1e
    drv i1$ %431, %clk_i1, %432
    %gpr_raddr1 = prb [2 x i5]$ %gpr_raddr
    %433 = const i5 0
    %434 = [2 x i5 %433]
    %435 = sig [2 x i5] %434
    %436 = const time 0s 1e
    drv [2 x i5]$ %435, %gpr_raddr1, %436
    %gpr_waddr1 = prb [1 x i5]$ %gpr_waddr
    %437 = const i5 0
    %438 = [1 x i5 %437]
    %439 = sig [1 x i5] %438
    %440 = const time 0s 1e
    drv [1 x i5]$ %439, %gpr_waddr1, %440
    %gpr_wdata1 = prb [1 x i32]$ %gpr_wdata
    %441 = const i32 0
    %442 = [1 x i32 %441]
    %443 = sig [1 x i32] %442
    %444 = const time 0s 1e
    drv [1 x i32]$ %443, %gpr_wdata1, %444
    %gpr_we1 = prb i1$ %gpr_we
    %445 = const i1 0
    %446 = sig i1 %445
    %447 = const time 0s 1e
    drv i1$ %446, %gpr_we1, %447
    inst @snitch_regfile.param2 (i1$ %431, [2 x i5]$ %435, [1 x i5]$ %439, [1 x i32]$ %443, i1$ %446) -> ([2 x i32]$ %gpr_rdata)
    %clk_i2 = prb i1$ %clk_i
    %448 = const i1 0
    %449 = sig i1 %448
    %450 = const time 0s 1e
    drv i1$ %449, %clk_i2, %450
    %rst_i1 = prb i1$ %rst_i
    %451 = const i1 0
    %452 = sig i1 %451
    %453 = const time 0s 1e
    drv i1$ %452, %rst_i1, %453
    %rd4 = prb i5$ %rd
    %454 = const i5 0
    %455 = sig i5 %454
    %456 = const time 0s 1e
    drv i5$ %455, %rd4, %456
    %is_store2 = prb i1$ %is_store
    %457 = const i1 0
    %458 = sig i1 %457
    %459 = const time 0s 1e
    drv i1$ %458, %is_store2, %459
    %is_signed1 = prb i1$ %is_signed
    %460 = const i1 0
    %461 = sig i1 %460
    %462 = const time 0s 1e
    drv i1$ %461, %is_signed1, %462
    %alu_result3 = prb i32$ %alu_result
    %463 = const i32 0
    %464 = sig i32 %463
    %465 = const time 0s 1e
    drv i32$ %464, %alu_result3, %465
    %466 = const i64 0
    %gpr_rdata5 = prb [2 x i32]$ %gpr_rdata
    %467 = const i32 1
    %468 = const i32 0
    %469 = [2 x i32 %468]
    %470 = shr [2 x i32] %gpr_rdata5, [2 x i32] %469, i32 %467
    %471 = extf i32, [2 x i32] %470, 0
    %472 = inss i64 %466, i32 %471, 0, 32
    %473 = const i32 0
    %474 = inss i64 %472, i32 %473, 32, 32
    %475 = const i64 0
    %476 = sig i64 %475
    %477 = const time 0s 1e
    drv i64$ %476, %474, %477
    %ls_size1 = prb i2$ %ls_size
    %478 = const i2 0
    %479 = sig i2 %478
    %480 = const time 0s 1e
    drv i2$ %479, %ls_size1, %480
    %ls_amo1 = prb i4$ %ls_amo
    %481 = const i4 0
    %482 = sig i4 %481
    %483 = const time 0s 1e
    drv i4$ %482, %ls_amo1, %483
    %lsu_qvalid2 = prb i1$ %lsu_qvalid
    %484 = const i1 0
    %485 = sig i1 %484
    %486 = const time 0s 1e
    drv i1$ %485, %lsu_qvalid2, %486
    %487 = const i1 0
    %488 = sig i1 %487
    %lsu_pready1 = prb i1$ %lsu_pready
    %489 = const i1 0
    %490 = sig i1 %489
    %491 = const time 0s 1e
    drv i1$ %490, %lsu_pready1, %491
    %data_qready_i1 = prb i1$ %data_qready_i
    %492 = const i1 0
    %493 = sig i1 %492
    %494 = const time 0s 1e
    drv i1$ %493, %data_qready_i1, %494
    %data_pdata_i1 = prb i64$ %data_pdata_i
    %495 = const i64 0
    %496 = sig i64 %495
    %497 = const time 0s 1e
    drv i64$ %496, %data_pdata_i1, %497
    %data_perror_i1 = prb i1$ %data_perror_i
    %498 = const i1 0
    %499 = sig i1 %498
    %500 = const time 0s 1e
    drv i1$ %499, %data_perror_i1, %500
    %data_pvalid_i1 = prb i1$ %data_pvalid_i
    %501 = const i1 0
    %502 = sig i1 %501
    %503 = const time 0s 1e
    drv i1$ %502, %data_pvalid_i1, %503
    inst @snitch_lsu.param5 (i1$ %449, i1$ %452, i5$ %455, i1$ %458, i1$ %461, i32$ %464, i64$ %476, i2$ %479, i4$ %482, i1$ %485, i1$ %490, i1$ %493, i64$ %496, i1$ %499, i1$ %502) -> (i1$ %lsu_qready, i64$ %ld_result, i5$ %lsu_rd, i1$ %488, i1$ %lsu_pvalid, i32$ %data_qaddr_o, i1$ %data_qwrite_o, i4$ %data_qamo_o, i64$ %data_qdata_o, i8$ %data_qstrb_o, i1$ %data_qvalid_o, i1$ %data_pready_o)
    %504 = const i32 0
    %505 = const i32 0
    %506 = sig i32 %505
    %507 = shr i32$ %shift_opa_reversed, i32$ %506, i32 %504
    %508 = exts i1$, i32$ %507, 0, 1
    %opa2 = prb i32$ %opa
    %509 = const i32 31
    %510 = const i32 0
    %511 = sub i32 %509, %510
    %512 = const i32 0
    %513 = shr i32 %opa2, i32 %512, i32 %511
    %514 = exts i1, i32 %513, 0, 1
    %515 = const time 0s 1e
    drv i1$ %508, %514, %515
    %516 = const i32 0
    %517 = const i32 0
    %518 = sig i32 %517
    %519 = shr i32$ %shift_left_result, i32$ %518, i32 %516
    %520 = exts i1$, i32$ %519, 0, 1
    %shift_right_result1 = prb i32$ %shift_right_result
    %521 = const i32 31
    %522 = const i32 0
    %523 = sub i32 %521, %522
    %524 = const i32 0
    %525 = shr i32 %shift_right_result1, i32 %524, i32 %523
    %526 = exts i1, i32 %525, 0, 1
    %527 = const time 0s 1e
    drv i1$ %520, %526, %527
    %528 = const i32 1
    %529 = const i32 0
    %530 = sig i32 %529
    %531 = shr i32$ %shift_opa_reversed, i32$ %530, i32 %528
    %532 = exts i1$, i32$ %531, 0, 1
    %opa3 = prb i32$ %opa
    %533 = const i32 31
    %534 = const i32 1
    %535 = sub i32 %533, %534
    %536 = const i32 0
    %537 = shr i32 %opa3, i32 %536, i32 %535
    %538 = exts i1, i32 %537, 0, 1
    %539 = const time 0s 1e
    drv i1$ %532, %538, %539
    %540 = const i32 1
    %541 = const i32 0
    %542 = sig i32 %541
    %543 = shr i32$ %shift_left_result, i32$ %542, i32 %540
    %544 = exts i1$, i32$ %543, 0, 1
    %shift_right_result2 = prb i32$ %shift_right_result
    %545 = const i32 31
    %546 = const i32 1
    %547 = sub i32 %545, %546
    %548 = const i32 0
    %549 = shr i32 %shift_right_result2, i32 %548, i32 %547
    %550 = exts i1, i32 %549, 0, 1
    %551 = const time 0s 1e
    drv i1$ %544, %550, %551
    %552 = const i32 2
    %553 = const i32 0
    %554 = sig i32 %553
    %555 = shr i32$ %shift_opa_reversed, i32$ %554, i32 %552
    %556 = exts i1$, i32$ %555, 0, 1
    %opa4 = prb i32$ %opa
    %557 = const i32 31
    %558 = const i32 2
    %559 = sub i32 %557, %558
    %560 = const i32 0
    %561 = shr i32 %opa4, i32 %560, i32 %559
    %562 = exts i1, i32 %561, 0, 1
    %563 = const time 0s 1e
    drv i1$ %556, %562, %563
    %564 = const i32 2
    %565 = const i32 0
    %566 = sig i32 %565
    %567 = shr i32$ %shift_left_result, i32$ %566, i32 %564
    %568 = exts i1$, i32$ %567, 0, 1
    %shift_right_result3 = prb i32$ %shift_right_result
    %569 = const i32 31
    %570 = const i32 2
    %571 = sub i32 %569, %570
    %572 = const i32 0
    %573 = shr i32 %shift_right_result3, i32 %572, i32 %571
    %574 = exts i1, i32 %573, 0, 1
    %575 = const time 0s 1e
    drv i1$ %568, %574, %575
    %576 = const i32 3
    %577 = const i32 0
    %578 = sig i32 %577
    %579 = shr i32$ %shift_opa_reversed, i32$ %578, i32 %576
    %580 = exts i1$, i32$ %579, 0, 1
    %opa5 = prb i32$ %opa
    %581 = const i32 31
    %582 = const i32 3
    %583 = sub i32 %581, %582
    %584 = const i32 0
    %585 = shr i32 %opa5, i32 %584, i32 %583
    %586 = exts i1, i32 %585, 0, 1
    %587 = const time 0s 1e
    drv i1$ %580, %586, %587
    %588 = const i32 3
    %589 = const i32 0
    %590 = sig i32 %589
    %591 = shr i32$ %shift_left_result, i32$ %590, i32 %588
    %592 = exts i1$, i32$ %591, 0, 1
    %shift_right_result4 = prb i32$ %shift_right_result
    %593 = const i32 31
    %594 = const i32 3
    %595 = sub i32 %593, %594
    %596 = const i32 0
    %597 = shr i32 %shift_right_result4, i32 %596, i32 %595
    %598 = exts i1, i32 %597, 0, 1
    %599 = const time 0s 1e
    drv i1$ %592, %598, %599
    %600 = const i32 4
    %601 = const i32 0
    %602 = sig i32 %601
    %603 = shr i32$ %shift_opa_reversed, i32$ %602, i32 %600
    %604 = exts i1$, i32$ %603, 0, 1
    %opa6 = prb i32$ %opa
    %605 = const i32 31
    %606 = const i32 4
    %607 = sub i32 %605, %606
    %608 = const i32 0
    %609 = shr i32 %opa6, i32 %608, i32 %607
    %610 = exts i1, i32 %609, 0, 1
    %611 = const time 0s 1e
    drv i1$ %604, %610, %611
    %612 = const i32 4
    %613 = const i32 0
    %614 = sig i32 %613
    %615 = shr i32$ %shift_left_result, i32$ %614, i32 %612
    %616 = exts i1$, i32$ %615, 0, 1
    %shift_right_result5 = prb i32$ %shift_right_result
    %617 = const i32 31
    %618 = const i32 4
    %619 = sub i32 %617, %618
    %620 = const i32 0
    %621 = shr i32 %shift_right_result5, i32 %620, i32 %619
    %622 = exts i1, i32 %621, 0, 1
    %623 = const time 0s 1e
    drv i1$ %616, %622, %623
    %624 = const i32 5
    %625 = const i32 0
    %626 = sig i32 %625
    %627 = shr i32$ %shift_opa_reversed, i32$ %626, i32 %624
    %628 = exts i1$, i32$ %627, 0, 1
    %opa7 = prb i32$ %opa
    %629 = const i32 31
    %630 = const i32 5
    %631 = sub i32 %629, %630
    %632 = const i32 0
    %633 = shr i32 %opa7, i32 %632, i32 %631
    %634 = exts i1, i32 %633, 0, 1
    %635 = const time 0s 1e
    drv i1$ %628, %634, %635
    %636 = const i32 5
    %637 = const i32 0
    %638 = sig i32 %637
    %639 = shr i32$ %shift_left_result, i32$ %638, i32 %636
    %640 = exts i1$, i32$ %639, 0, 1
    %shift_right_result6 = prb i32$ %shift_right_result
    %641 = const i32 31
    %642 = const i32 5
    %643 = sub i32 %641, %642
    %644 = const i32 0
    %645 = shr i32 %shift_right_result6, i32 %644, i32 %643
    %646 = exts i1, i32 %645, 0, 1
    %647 = const time 0s 1e
    drv i1$ %640, %646, %647
    %648 = const i32 6
    %649 = const i32 0
    %650 = sig i32 %649
    %651 = shr i32$ %shift_opa_reversed, i32$ %650, i32 %648
    %652 = exts i1$, i32$ %651, 0, 1
    %opa8 = prb i32$ %opa
    %653 = const i32 31
    %654 = const i32 6
    %655 = sub i32 %653, %654
    %656 = const i32 0
    %657 = shr i32 %opa8, i32 %656, i32 %655
    %658 = exts i1, i32 %657, 0, 1
    %659 = const time 0s 1e
    drv i1$ %652, %658, %659
    %660 = const i32 6
    %661 = const i32 0
    %662 = sig i32 %661
    %663 = shr i32$ %shift_left_result, i32$ %662, i32 %660
    %664 = exts i1$, i32$ %663, 0, 1
    %shift_right_result7 = prb i32$ %shift_right_result
    %665 = const i32 31
    %666 = const i32 6
    %667 = sub i32 %665, %666
    %668 = const i32 0
    %669 = shr i32 %shift_right_result7, i32 %668, i32 %667
    %670 = exts i1, i32 %669, 0, 1
    %671 = const time 0s 1e
    drv i1$ %664, %670, %671
    %672 = const i32 7
    %673 = const i32 0
    %674 = sig i32 %673
    %675 = shr i32$ %shift_opa_reversed, i32$ %674, i32 %672
    %676 = exts i1$, i32$ %675, 0, 1
    %opa9 = prb i32$ %opa
    %677 = const i32 31
    %678 = const i32 7
    %679 = sub i32 %677, %678
    %680 = const i32 0
    %681 = shr i32 %opa9, i32 %680, i32 %679
    %682 = exts i1, i32 %681, 0, 1
    %683 = const time 0s 1e
    drv i1$ %676, %682, %683
    %684 = const i32 7
    %685 = const i32 0
    %686 = sig i32 %685
    %687 = shr i32$ %shift_left_result, i32$ %686, i32 %684
    %688 = exts i1$, i32$ %687, 0, 1
    %shift_right_result8 = prb i32$ %shift_right_result
    %689 = const i32 31
    %690 = const i32 7
    %691 = sub i32 %689, %690
    %692 = const i32 0
    %693 = shr i32 %shift_right_result8, i32 %692, i32 %691
    %694 = exts i1, i32 %693, 0, 1
    %695 = const time 0s 1e
    drv i1$ %688, %694, %695
    %696 = const i32 8
    %697 = const i32 0
    %698 = sig i32 %697
    %699 = shr i32$ %shift_opa_reversed, i32$ %698, i32 %696
    %700 = exts i1$, i32$ %699, 0, 1
    %opa10 = prb i32$ %opa
    %701 = const i32 31
    %702 = const i32 8
    %703 = sub i32 %701, %702
    %704 = const i32 0
    %705 = shr i32 %opa10, i32 %704, i32 %703
    %706 = exts i1, i32 %705, 0, 1
    %707 = const time 0s 1e
    drv i1$ %700, %706, %707
    %708 = const i32 8
    %709 = const i32 0
    %710 = sig i32 %709
    %711 = shr i32$ %shift_left_result, i32$ %710, i32 %708
    %712 = exts i1$, i32$ %711, 0, 1
    %shift_right_result9 = prb i32$ %shift_right_result
    %713 = const i32 31
    %714 = const i32 8
    %715 = sub i32 %713, %714
    %716 = const i32 0
    %717 = shr i32 %shift_right_result9, i32 %716, i32 %715
    %718 = exts i1, i32 %717, 0, 1
    %719 = const time 0s 1e
    drv i1$ %712, %718, %719
    %720 = const i32 9
    %721 = const i32 0
    %722 = sig i32 %721
    %723 = shr i32$ %shift_opa_reversed, i32$ %722, i32 %720
    %724 = exts i1$, i32$ %723, 0, 1
    %opa11 = prb i32$ %opa
    %725 = const i32 31
    %726 = const i32 9
    %727 = sub i32 %725, %726
    %728 = const i32 0
    %729 = shr i32 %opa11, i32 %728, i32 %727
    %730 = exts i1, i32 %729, 0, 1
    %731 = const time 0s 1e
    drv i1$ %724, %730, %731
    %732 = const i32 9
    %733 = const i32 0
    %734 = sig i32 %733
    %735 = shr i32$ %shift_left_result, i32$ %734, i32 %732
    %736 = exts i1$, i32$ %735, 0, 1
    %shift_right_result10 = prb i32$ %shift_right_result
    %737 = const i32 31
    %738 = const i32 9
    %739 = sub i32 %737, %738
    %740 = const i32 0
    %741 = shr i32 %shift_right_result10, i32 %740, i32 %739
    %742 = exts i1, i32 %741, 0, 1
    %743 = const time 0s 1e
    drv i1$ %736, %742, %743
    %744 = const i32 10
    %745 = const i32 0
    %746 = sig i32 %745
    %747 = shr i32$ %shift_opa_reversed, i32$ %746, i32 %744
    %748 = exts i1$, i32$ %747, 0, 1
    %opa12 = prb i32$ %opa
    %749 = const i32 31
    %750 = const i32 10
    %751 = sub i32 %749, %750
    %752 = const i32 0
    %753 = shr i32 %opa12, i32 %752, i32 %751
    %754 = exts i1, i32 %753, 0, 1
    %755 = const time 0s 1e
    drv i1$ %748, %754, %755
    %756 = const i32 10
    %757 = const i32 0
    %758 = sig i32 %757
    %759 = shr i32$ %shift_left_result, i32$ %758, i32 %756
    %760 = exts i1$, i32$ %759, 0, 1
    %shift_right_result11 = prb i32$ %shift_right_result
    %761 = const i32 31
    %762 = const i32 10
    %763 = sub i32 %761, %762
    %764 = const i32 0
    %765 = shr i32 %shift_right_result11, i32 %764, i32 %763
    %766 = exts i1, i32 %765, 0, 1
    %767 = const time 0s 1e
    drv i1$ %760, %766, %767
    %768 = const i32 11
    %769 = const i32 0
    %770 = sig i32 %769
    %771 = shr i32$ %shift_opa_reversed, i32$ %770, i32 %768
    %772 = exts i1$, i32$ %771, 0, 1
    %opa13 = prb i32$ %opa
    %773 = const i32 31
    %774 = const i32 11
    %775 = sub i32 %773, %774
    %776 = const i32 0
    %777 = shr i32 %opa13, i32 %776, i32 %775
    %778 = exts i1, i32 %777, 0, 1
    %779 = const time 0s 1e
    drv i1$ %772, %778, %779
    %780 = const i32 11
    %781 = const i32 0
    %782 = sig i32 %781
    %783 = shr i32$ %shift_left_result, i32$ %782, i32 %780
    %784 = exts i1$, i32$ %783, 0, 1
    %shift_right_result12 = prb i32$ %shift_right_result
    %785 = const i32 31
    %786 = const i32 11
    %787 = sub i32 %785, %786
    %788 = const i32 0
    %789 = shr i32 %shift_right_result12, i32 %788, i32 %787
    %790 = exts i1, i32 %789, 0, 1
    %791 = const time 0s 1e
    drv i1$ %784, %790, %791
    %792 = const i32 12
    %793 = const i32 0
    %794 = sig i32 %793
    %795 = shr i32$ %shift_opa_reversed, i32$ %794, i32 %792
    %796 = exts i1$, i32$ %795, 0, 1
    %opa14 = prb i32$ %opa
    %797 = const i32 31
    %798 = const i32 12
    %799 = sub i32 %797, %798
    %800 = const i32 0
    %801 = shr i32 %opa14, i32 %800, i32 %799
    %802 = exts i1, i32 %801, 0, 1
    %803 = const time 0s 1e
    drv i1$ %796, %802, %803
    %804 = const i32 12
    %805 = const i32 0
    %806 = sig i32 %805
    %807 = shr i32$ %shift_left_result, i32$ %806, i32 %804
    %808 = exts i1$, i32$ %807, 0, 1
    %shift_right_result13 = prb i32$ %shift_right_result
    %809 = const i32 31
    %810 = const i32 12
    %811 = sub i32 %809, %810
    %812 = const i32 0
    %813 = shr i32 %shift_right_result13, i32 %812, i32 %811
    %814 = exts i1, i32 %813, 0, 1
    %815 = const time 0s 1e
    drv i1$ %808, %814, %815
    %816 = const i32 13
    %817 = const i32 0
    %818 = sig i32 %817
    %819 = shr i32$ %shift_opa_reversed, i32$ %818, i32 %816
    %820 = exts i1$, i32$ %819, 0, 1
    %opa15 = prb i32$ %opa
    %821 = const i32 31
    %822 = const i32 13
    %823 = sub i32 %821, %822
    %824 = const i32 0
    %825 = shr i32 %opa15, i32 %824, i32 %823
    %826 = exts i1, i32 %825, 0, 1
    %827 = const time 0s 1e
    drv i1$ %820, %826, %827
    %828 = const i32 13
    %829 = const i32 0
    %830 = sig i32 %829
    %831 = shr i32$ %shift_left_result, i32$ %830, i32 %828
    %832 = exts i1$, i32$ %831, 0, 1
    %shift_right_result14 = prb i32$ %shift_right_result
    %833 = const i32 31
    %834 = const i32 13
    %835 = sub i32 %833, %834
    %836 = const i32 0
    %837 = shr i32 %shift_right_result14, i32 %836, i32 %835
    %838 = exts i1, i32 %837, 0, 1
    %839 = const time 0s 1e
    drv i1$ %832, %838, %839
    %840 = const i32 14
    %841 = const i32 0
    %842 = sig i32 %841
    %843 = shr i32$ %shift_opa_reversed, i32$ %842, i32 %840
    %844 = exts i1$, i32$ %843, 0, 1
    %opa16 = prb i32$ %opa
    %845 = const i32 31
    %846 = const i32 14
    %847 = sub i32 %845, %846
    %848 = const i32 0
    %849 = shr i32 %opa16, i32 %848, i32 %847
    %850 = exts i1, i32 %849, 0, 1
    %851 = const time 0s 1e
    drv i1$ %844, %850, %851
    %852 = const i32 14
    %853 = const i32 0
    %854 = sig i32 %853
    %855 = shr i32$ %shift_left_result, i32$ %854, i32 %852
    %856 = exts i1$, i32$ %855, 0, 1
    %shift_right_result15 = prb i32$ %shift_right_result
    %857 = const i32 31
    %858 = const i32 14
    %859 = sub i32 %857, %858
    %860 = const i32 0
    %861 = shr i32 %shift_right_result15, i32 %860, i32 %859
    %862 = exts i1, i32 %861, 0, 1
    %863 = const time 0s 1e
    drv i1$ %856, %862, %863
    %864 = const i32 15
    %865 = const i32 0
    %866 = sig i32 %865
    %867 = shr i32$ %shift_opa_reversed, i32$ %866, i32 %864
    %868 = exts i1$, i32$ %867, 0, 1
    %opa17 = prb i32$ %opa
    %869 = const i32 31
    %870 = const i32 15
    %871 = sub i32 %869, %870
    %872 = const i32 0
    %873 = shr i32 %opa17, i32 %872, i32 %871
    %874 = exts i1, i32 %873, 0, 1
    %875 = const time 0s 1e
    drv i1$ %868, %874, %875
    %876 = const i32 15
    %877 = const i32 0
    %878 = sig i32 %877
    %879 = shr i32$ %shift_left_result, i32$ %878, i32 %876
    %880 = exts i1$, i32$ %879, 0, 1
    %shift_right_result16 = prb i32$ %shift_right_result
    %881 = const i32 31
    %882 = const i32 15
    %883 = sub i32 %881, %882
    %884 = const i32 0
    %885 = shr i32 %shift_right_result16, i32 %884, i32 %883
    %886 = exts i1, i32 %885, 0, 1
    %887 = const time 0s 1e
    drv i1$ %880, %886, %887
    %888 = const i32 16
    %889 = const i32 0
    %890 = sig i32 %889
    %891 = shr i32$ %shift_opa_reversed, i32$ %890, i32 %888
    %892 = exts i1$, i32$ %891, 0, 1
    %opa18 = prb i32$ %opa
    %893 = const i32 31
    %894 = const i32 16
    %895 = sub i32 %893, %894
    %896 = const i32 0
    %897 = shr i32 %opa18, i32 %896, i32 %895
    %898 = exts i1, i32 %897, 0, 1
    %899 = const time 0s 1e
    drv i1$ %892, %898, %899
    %900 = const i32 16
    %901 = const i32 0
    %902 = sig i32 %901
    %903 = shr i32$ %shift_left_result, i32$ %902, i32 %900
    %904 = exts i1$, i32$ %903, 0, 1
    %shift_right_result17 = prb i32$ %shift_right_result
    %905 = const i32 31
    %906 = const i32 16
    %907 = sub i32 %905, %906
    %908 = const i32 0
    %909 = shr i32 %shift_right_result17, i32 %908, i32 %907
    %910 = exts i1, i32 %909, 0, 1
    %911 = const time 0s 1e
    drv i1$ %904, %910, %911
    %912 = const i32 17
    %913 = const i32 0
    %914 = sig i32 %913
    %915 = shr i32$ %shift_opa_reversed, i32$ %914, i32 %912
    %916 = exts i1$, i32$ %915, 0, 1
    %opa19 = prb i32$ %opa
    %917 = const i32 31
    %918 = const i32 17
    %919 = sub i32 %917, %918
    %920 = const i32 0
    %921 = shr i32 %opa19, i32 %920, i32 %919
    %922 = exts i1, i32 %921, 0, 1
    %923 = const time 0s 1e
    drv i1$ %916, %922, %923
    %924 = const i32 17
    %925 = const i32 0
    %926 = sig i32 %925
    %927 = shr i32$ %shift_left_result, i32$ %926, i32 %924
    %928 = exts i1$, i32$ %927, 0, 1
    %shift_right_result18 = prb i32$ %shift_right_result
    %929 = const i32 31
    %930 = const i32 17
    %931 = sub i32 %929, %930
    %932 = const i32 0
    %933 = shr i32 %shift_right_result18, i32 %932, i32 %931
    %934 = exts i1, i32 %933, 0, 1
    %935 = const time 0s 1e
    drv i1$ %928, %934, %935
    %936 = const i32 18
    %937 = const i32 0
    %938 = sig i32 %937
    %939 = shr i32$ %shift_opa_reversed, i32$ %938, i32 %936
    %940 = exts i1$, i32$ %939, 0, 1
    %opa20 = prb i32$ %opa
    %941 = const i32 31
    %942 = const i32 18
    %943 = sub i32 %941, %942
    %944 = const i32 0
    %945 = shr i32 %opa20, i32 %944, i32 %943
    %946 = exts i1, i32 %945, 0, 1
    %947 = const time 0s 1e
    drv i1$ %940, %946, %947
    %948 = const i32 18
    %949 = const i32 0
    %950 = sig i32 %949
    %951 = shr i32$ %shift_left_result, i32$ %950, i32 %948
    %952 = exts i1$, i32$ %951, 0, 1
    %shift_right_result19 = prb i32$ %shift_right_result
    %953 = const i32 31
    %954 = const i32 18
    %955 = sub i32 %953, %954
    %956 = const i32 0
    %957 = shr i32 %shift_right_result19, i32 %956, i32 %955
    %958 = exts i1, i32 %957, 0, 1
    %959 = const time 0s 1e
    drv i1$ %952, %958, %959
    %960 = const i32 19
    %961 = const i32 0
    %962 = sig i32 %961
    %963 = shr i32$ %shift_opa_reversed, i32$ %962, i32 %960
    %964 = exts i1$, i32$ %963, 0, 1
    %opa21 = prb i32$ %opa
    %965 = const i32 31
    %966 = const i32 19
    %967 = sub i32 %965, %966
    %968 = const i32 0
    %969 = shr i32 %opa21, i32 %968, i32 %967
    %970 = exts i1, i32 %969, 0, 1
    %971 = const time 0s 1e
    drv i1$ %964, %970, %971
    %972 = const i32 19
    %973 = const i32 0
    %974 = sig i32 %973
    %975 = shr i32$ %shift_left_result, i32$ %974, i32 %972
    %976 = exts i1$, i32$ %975, 0, 1
    %shift_right_result20 = prb i32$ %shift_right_result
    %977 = const i32 31
    %978 = const i32 19
    %979 = sub i32 %977, %978
    %980 = const i32 0
    %981 = shr i32 %shift_right_result20, i32 %980, i32 %979
    %982 = exts i1, i32 %981, 0, 1
    %983 = const time 0s 1e
    drv i1$ %976, %982, %983
    %984 = const i32 20
    %985 = const i32 0
    %986 = sig i32 %985
    %987 = shr i32$ %shift_opa_reversed, i32$ %986, i32 %984
    %988 = exts i1$, i32$ %987, 0, 1
    %opa22 = prb i32$ %opa
    %989 = const i32 31
    %990 = const i32 20
    %991 = sub i32 %989, %990
    %992 = const i32 0
    %993 = shr i32 %opa22, i32 %992, i32 %991
    %994 = exts i1, i32 %993, 0, 1
    %995 = const time 0s 1e
    drv i1$ %988, %994, %995
    %996 = const i32 20
    %997 = const i32 0
    %998 = sig i32 %997
    %999 = shr i32$ %shift_left_result, i32$ %998, i32 %996
    %1000 = exts i1$, i32$ %999, 0, 1
    %shift_right_result21 = prb i32$ %shift_right_result
    %1001 = const i32 31
    %1002 = const i32 20
    %1003 = sub i32 %1001, %1002
    %1004 = const i32 0
    %1005 = shr i32 %shift_right_result21, i32 %1004, i32 %1003
    %1006 = exts i1, i32 %1005, 0, 1
    %1007 = const time 0s 1e
    drv i1$ %1000, %1006, %1007
    %1008 = const i32 21
    %1009 = const i32 0
    %1010 = sig i32 %1009
    %1011 = shr i32$ %shift_opa_reversed, i32$ %1010, i32 %1008
    %1012 = exts i1$, i32$ %1011, 0, 1
    %opa23 = prb i32$ %opa
    %1013 = const i32 31
    %1014 = const i32 21
    %1015 = sub i32 %1013, %1014
    %1016 = const i32 0
    %1017 = shr i32 %opa23, i32 %1016, i32 %1015
    %1018 = exts i1, i32 %1017, 0, 1
    %1019 = const time 0s 1e
    drv i1$ %1012, %1018, %1019
    %1020 = const i32 21
    %1021 = const i32 0
    %1022 = sig i32 %1021
    %1023 = shr i32$ %shift_left_result, i32$ %1022, i32 %1020
    %1024 = exts i1$, i32$ %1023, 0, 1
    %shift_right_result22 = prb i32$ %shift_right_result
    %1025 = const i32 31
    %1026 = const i32 21
    %1027 = sub i32 %1025, %1026
    %1028 = const i32 0
    %1029 = shr i32 %shift_right_result22, i32 %1028, i32 %1027
    %1030 = exts i1, i32 %1029, 0, 1
    %1031 = const time 0s 1e
    drv i1$ %1024, %1030, %1031
    %1032 = const i32 22
    %1033 = const i32 0
    %1034 = sig i32 %1033
    %1035 = shr i32$ %shift_opa_reversed, i32$ %1034, i32 %1032
    %1036 = exts i1$, i32$ %1035, 0, 1
    %opa24 = prb i32$ %opa
    %1037 = const i32 31
    %1038 = const i32 22
    %1039 = sub i32 %1037, %1038
    %1040 = const i32 0
    %1041 = shr i32 %opa24, i32 %1040, i32 %1039
    %1042 = exts i1, i32 %1041, 0, 1
    %1043 = const time 0s 1e
    drv i1$ %1036, %1042, %1043
    %1044 = const i32 22
    %1045 = const i32 0
    %1046 = sig i32 %1045
    %1047 = shr i32$ %shift_left_result, i32$ %1046, i32 %1044
    %1048 = exts i1$, i32$ %1047, 0, 1
    %shift_right_result23 = prb i32$ %shift_right_result
    %1049 = const i32 31
    %1050 = const i32 22
    %1051 = sub i32 %1049, %1050
    %1052 = const i32 0
    %1053 = shr i32 %shift_right_result23, i32 %1052, i32 %1051
    %1054 = exts i1, i32 %1053, 0, 1
    %1055 = const time 0s 1e
    drv i1$ %1048, %1054, %1055
    %1056 = const i32 23
    %1057 = const i32 0
    %1058 = sig i32 %1057
    %1059 = shr i32$ %shift_opa_reversed, i32$ %1058, i32 %1056
    %1060 = exts i1$, i32$ %1059, 0, 1
    %opa25 = prb i32$ %opa
    %1061 = const i32 31
    %1062 = const i32 23
    %1063 = sub i32 %1061, %1062
    %1064 = const i32 0
    %1065 = shr i32 %opa25, i32 %1064, i32 %1063
    %1066 = exts i1, i32 %1065, 0, 1
    %1067 = const time 0s 1e
    drv i1$ %1060, %1066, %1067
    %1068 = const i32 23
    %1069 = const i32 0
    %1070 = sig i32 %1069
    %1071 = shr i32$ %shift_left_result, i32$ %1070, i32 %1068
    %1072 = exts i1$, i32$ %1071, 0, 1
    %shift_right_result24 = prb i32$ %shift_right_result
    %1073 = const i32 31
    %1074 = const i32 23
    %1075 = sub i32 %1073, %1074
    %1076 = const i32 0
    %1077 = shr i32 %shift_right_result24, i32 %1076, i32 %1075
    %1078 = exts i1, i32 %1077, 0, 1
    %1079 = const time 0s 1e
    drv i1$ %1072, %1078, %1079
    %1080 = const i32 24
    %1081 = const i32 0
    %1082 = sig i32 %1081
    %1083 = shr i32$ %shift_opa_reversed, i32$ %1082, i32 %1080
    %1084 = exts i1$, i32$ %1083, 0, 1
    %opa26 = prb i32$ %opa
    %1085 = const i32 31
    %1086 = const i32 24
    %1087 = sub i32 %1085, %1086
    %1088 = const i32 0
    %1089 = shr i32 %opa26, i32 %1088, i32 %1087
    %1090 = exts i1, i32 %1089, 0, 1
    %1091 = const time 0s 1e
    drv i1$ %1084, %1090, %1091
    %1092 = const i32 24
    %1093 = const i32 0
    %1094 = sig i32 %1093
    %1095 = shr i32$ %shift_left_result, i32$ %1094, i32 %1092
    %1096 = exts i1$, i32$ %1095, 0, 1
    %shift_right_result25 = prb i32$ %shift_right_result
    %1097 = const i32 31
    %1098 = const i32 24
    %1099 = sub i32 %1097, %1098
    %1100 = const i32 0
    %1101 = shr i32 %shift_right_result25, i32 %1100, i32 %1099
    %1102 = exts i1, i32 %1101, 0, 1
    %1103 = const time 0s 1e
    drv i1$ %1096, %1102, %1103
    %1104 = const i32 25
    %1105 = const i32 0
    %1106 = sig i32 %1105
    %1107 = shr i32$ %shift_opa_reversed, i32$ %1106, i32 %1104
    %1108 = exts i1$, i32$ %1107, 0, 1
    %opa27 = prb i32$ %opa
    %1109 = const i32 31
    %1110 = const i32 25
    %1111 = sub i32 %1109, %1110
    %1112 = const i32 0
    %1113 = shr i32 %opa27, i32 %1112, i32 %1111
    %1114 = exts i1, i32 %1113, 0, 1
    %1115 = const time 0s 1e
    drv i1$ %1108, %1114, %1115
    %1116 = const i32 25
    %1117 = const i32 0
    %1118 = sig i32 %1117
    %1119 = shr i32$ %shift_left_result, i32$ %1118, i32 %1116
    %1120 = exts i1$, i32$ %1119, 0, 1
    %shift_right_result26 = prb i32$ %shift_right_result
    %1121 = const i32 31
    %1122 = const i32 25
    %1123 = sub i32 %1121, %1122
    %1124 = const i32 0
    %1125 = shr i32 %shift_right_result26, i32 %1124, i32 %1123
    %1126 = exts i1, i32 %1125, 0, 1
    %1127 = const time 0s 1e
    drv i1$ %1120, %1126, %1127
    %1128 = const i32 26
    %1129 = const i32 0
    %1130 = sig i32 %1129
    %1131 = shr i32$ %shift_opa_reversed, i32$ %1130, i32 %1128
    %1132 = exts i1$, i32$ %1131, 0, 1
    %opa28 = prb i32$ %opa
    %1133 = const i32 31
    %1134 = const i32 26
    %1135 = sub i32 %1133, %1134
    %1136 = const i32 0
    %1137 = shr i32 %opa28, i32 %1136, i32 %1135
    %1138 = exts i1, i32 %1137, 0, 1
    %1139 = const time 0s 1e
    drv i1$ %1132, %1138, %1139
    %1140 = const i32 26
    %1141 = const i32 0
    %1142 = sig i32 %1141
    %1143 = shr i32$ %shift_left_result, i32$ %1142, i32 %1140
    %1144 = exts i1$, i32$ %1143, 0, 1
    %shift_right_result27 = prb i32$ %shift_right_result
    %1145 = const i32 31
    %1146 = const i32 26
    %1147 = sub i32 %1145, %1146
    %1148 = const i32 0
    %1149 = shr i32 %shift_right_result27, i32 %1148, i32 %1147
    %1150 = exts i1, i32 %1149, 0, 1
    %1151 = const time 0s 1e
    drv i1$ %1144, %1150, %1151
    %1152 = const i32 27
    %1153 = const i32 0
    %1154 = sig i32 %1153
    %1155 = shr i32$ %shift_opa_reversed, i32$ %1154, i32 %1152
    %1156 = exts i1$, i32$ %1155, 0, 1
    %opa29 = prb i32$ %opa
    %1157 = const i32 31
    %1158 = const i32 27
    %1159 = sub i32 %1157, %1158
    %1160 = const i32 0
    %1161 = shr i32 %opa29, i32 %1160, i32 %1159
    %1162 = exts i1, i32 %1161, 0, 1
    %1163 = const time 0s 1e
    drv i1$ %1156, %1162, %1163
    %1164 = const i32 27
    %1165 = const i32 0
    %1166 = sig i32 %1165
    %1167 = shr i32$ %shift_left_result, i32$ %1166, i32 %1164
    %1168 = exts i1$, i32$ %1167, 0, 1
    %shift_right_result28 = prb i32$ %shift_right_result
    %1169 = const i32 31
    %1170 = const i32 27
    %1171 = sub i32 %1169, %1170
    %1172 = const i32 0
    %1173 = shr i32 %shift_right_result28, i32 %1172, i32 %1171
    %1174 = exts i1, i32 %1173, 0, 1
    %1175 = const time 0s 1e
    drv i1$ %1168, %1174, %1175
    %1176 = const i32 28
    %1177 = const i32 0
    %1178 = sig i32 %1177
    %1179 = shr i32$ %shift_opa_reversed, i32$ %1178, i32 %1176
    %1180 = exts i1$, i32$ %1179, 0, 1
    %opa30 = prb i32$ %opa
    %1181 = const i32 31
    %1182 = const i32 28
    %1183 = sub i32 %1181, %1182
    %1184 = const i32 0
    %1185 = shr i32 %opa30, i32 %1184, i32 %1183
    %1186 = exts i1, i32 %1185, 0, 1
    %1187 = const time 0s 1e
    drv i1$ %1180, %1186, %1187
    %1188 = const i32 28
    %1189 = const i32 0
    %1190 = sig i32 %1189
    %1191 = shr i32$ %shift_left_result, i32$ %1190, i32 %1188
    %1192 = exts i1$, i32$ %1191, 0, 1
    %shift_right_result29 = prb i32$ %shift_right_result
    %1193 = const i32 31
    %1194 = const i32 28
    %1195 = sub i32 %1193, %1194
    %1196 = const i32 0
    %1197 = shr i32 %shift_right_result29, i32 %1196, i32 %1195
    %1198 = exts i1, i32 %1197, 0, 1
    %1199 = const time 0s 1e
    drv i1$ %1192, %1198, %1199
    %1200 = const i32 29
    %1201 = const i32 0
    %1202 = sig i32 %1201
    %1203 = shr i32$ %shift_opa_reversed, i32$ %1202, i32 %1200
    %1204 = exts i1$, i32$ %1203, 0, 1
    %opa31 = prb i32$ %opa
    %1205 = const i32 31
    %1206 = const i32 29
    %1207 = sub i32 %1205, %1206
    %1208 = const i32 0
    %1209 = shr i32 %opa31, i32 %1208, i32 %1207
    %1210 = exts i1, i32 %1209, 0, 1
    %1211 = const time 0s 1e
    drv i1$ %1204, %1210, %1211
    %1212 = const i32 29
    %1213 = const i32 0
    %1214 = sig i32 %1213
    %1215 = shr i32$ %shift_left_result, i32$ %1214, i32 %1212
    %1216 = exts i1$, i32$ %1215, 0, 1
    %shift_right_result30 = prb i32$ %shift_right_result
    %1217 = const i32 31
    %1218 = const i32 29
    %1219 = sub i32 %1217, %1218
    %1220 = const i32 0
    %1221 = shr i32 %shift_right_result30, i32 %1220, i32 %1219
    %1222 = exts i1, i32 %1221, 0, 1
    %1223 = const time 0s 1e
    drv i1$ %1216, %1222, %1223
    %1224 = const i32 30
    %1225 = const i32 0
    %1226 = sig i32 %1225
    %1227 = shr i32$ %shift_opa_reversed, i32$ %1226, i32 %1224
    %1228 = exts i1$, i32$ %1227, 0, 1
    %opa32 = prb i32$ %opa
    %1229 = const i32 31
    %1230 = const i32 30
    %1231 = sub i32 %1229, %1230
    %1232 = const i32 0
    %1233 = shr i32 %opa32, i32 %1232, i32 %1231
    %1234 = exts i1, i32 %1233, 0, 1
    %1235 = const time 0s 1e
    drv i1$ %1228, %1234, %1235
    %1236 = const i32 30
    %1237 = const i32 0
    %1238 = sig i32 %1237
    %1239 = shr i32$ %shift_left_result, i32$ %1238, i32 %1236
    %1240 = exts i1$, i32$ %1239, 0, 1
    %shift_right_result31 = prb i32$ %shift_right_result
    %1241 = const i32 31
    %1242 = const i32 30
    %1243 = sub i32 %1241, %1242
    %1244 = const i32 0
    %1245 = shr i32 %shift_right_result31, i32 %1244, i32 %1243
    %1246 = exts i1, i32 %1245, 0, 1
    %1247 = const time 0s 1e
    drv i1$ %1240, %1246, %1247
    %1248 = const i32 31
    %1249 = const i32 0
    %1250 = sig i32 %1249
    %1251 = shr i32$ %shift_opa_reversed, i32$ %1250, i32 %1248
    %1252 = exts i1$, i32$ %1251, 0, 1
    %opa33 = prb i32$ %opa
    %1253 = const i32 31
    %1254 = const i32 31
    %1255 = sub i32 %1253, %1254
    %1256 = const i32 0
    %1257 = shr i32 %opa33, i32 %1256, i32 %1255
    %1258 = exts i1, i32 %1257, 0, 1
    %1259 = const time 0s 1e
    drv i1$ %1252, %1258, %1259
    %1260 = const i32 31
    %1261 = const i32 0
    %1262 = sig i32 %1261
    %1263 = shr i32$ %shift_left_result, i32$ %1262, i32 %1260
    %1264 = exts i1$, i32$ %1263, 0, 1
    %shift_right_result32 = prb i32$ %shift_right_result
    %1265 = const i32 31
    %1266 = const i32 31
    %1267 = sub i32 %1265, %1266
    %1268 = const i32 0
    %1269 = shr i32 %shift_right_result32, i32 %1268, i32 %1267
    %1270 = exts i1, i32 %1269, 0, 1
    %1271 = const time 0s 1e
    drv i1$ %1264, %1270, %1271
    inst %snitch.param1.always_ff.568.1 (i1$ %clk_i, i1$ %rst_i, i32$ %pc_d) -> (i32$ %pc_q)
    inst %snitch.param1.always_ff.569.1 (i1$ %clk_i, i1$ %rst_i, i1$ %wfi_d) -> (i1$ %wfi_q)
    inst %snitch.param1.always_ff.570.1 (i1$ %clk_i, i1$ %rst_i, i32$ %sb_d) -> (i32$ %sb_q)
    inst %snitch.param1.always_ff.571.1 (i1$ %clk_i, i1$ %rst_i, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d) -> ({i3, {i1, i1, i1, i1, i1}}$ %fcsr_q)
    inst %snitch.param1.always_comb.572.1 (i1$ %stall) -> ({i1, i1, i1, i1}$ %core_events_o)
    inst %snitch.param1.always_comb.590.1 (i5$ %acc_pid_i, i5$ %rd, i1$ %stall, i32$ %sb_q, i1$ %is_load, i5$ %lsu_rd, i1$ %retire_load, i1$ %retire_acc, i1$ %acc_register_rd) -> (i32$ %sb_d)
    inst %snitch.param1.always_comb.600.1 (i1$ %zero_lsb, i32$ %pc_q, i1$ %wfi_q, i32$ %consec_pc, i32$ %alu_result, i1$ %stall, i2$ %next_pc) -> (i32$ %pc_d)
    inst %snitch.param1.always_comb.604.1 (i32$ %inst_data_i, i1$ %wake_up_sync_i, i1$ %illegal_inst, i1$ %wfi_q, i32$ %uimm, i1$ %valid_instr, i1$ %write_rd, i32$ %csr_rvalue) -> (i1$ %acc_qvalid_o, i1$ %illegal_inst, i1$ %zero_lsb, i1$ %wfi_d, i1$ %is_load, i1$ %is_store, i1$ %is_signed, i2$ %ls_size, i4$ %ls_amo, i4$ %alu_op, i4$ %opa_select, i4$ %opb_select, i1$ %write_rd, i1$ %uses_rd, i2$ %next_pc, i2$ %rd_select, i32$ %rd_bypass, i1$ %is_branch, i1$ %csr_en, i1$ %acc_register_rd)
    inst %snitch.param1.always_comb.605.1 (i32$ %hart_id_i, i32$ %inst_data_i, {i1, i1, i1, i1, i1}$ %fpu_status_i, i32$ %alu_result, i1$ %csr_en, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_q) -> (i32$ %csr_rvalue, {i3, {i1, i1, i1, i1, i1}}$ %fcsr_d)
    inst %snitch.param1.always_comb.608.1 (i32$ %uimm, i32$ %jimm, i5$ %rs1, [2 x i32]$ %gpr_rdata, i4$ %opa_select) -> (i32$ %opa)
    inst %snitch.param1.always_comb.609.1 (i32$ %pc_q, i32$ %iimm, i32$ %simm, [2 x i32]$ %gpr_rdata, i4$ %opb_select, i32$ %csr_rvalue) -> (i32$ %opb)
    inst %snitch.param1.always_comb.633.1 (i32$ %opa, i32$ %opb, i33$ %adder_result, i4$ %alu_op, i32$ %shift_right_result, i32$ %shift_left_result) -> (i32$ %alu_result, i1$ %shift_left, i1$ %shift_arithmetic, i33$ %alu_opa, i33$ %alu_opb)
    inst %snitch.param1.always_comb.640.1 (i32$ %consec_pc, i32$ %alu_result, i2$ %rd_select, i32$ %rd_bypass) -> (i32$ %alu_writeback)
    inst %snitch.param1.always_comb.641.1 (i64$ %acc_pdata_i, i5$ %acc_pid_i, i1$ %acc_pvalid_i, i5$ %rd, i64$ %ld_result, i1$ %lsu_pvalid, i5$ %lsu_rd, i1$ %retire_i, i32$ %alu_writeback) -> (i1$ %acc_pready_o, [1 x i5]$ %gpr_waddr, [1 x i32]$ %gpr_wdata, i1$ %gpr_we, i1$ %lsu_pready, i1$ %retire_load, i1$ %retire_acc)
}

proc %snitch_tb.always.272.0 (i1$ %clk_i, i1$ %data_qvalid_o, i1$ %data_qready_i, i1$ %data_pvalid_i, i1$ %data_pready_o, i32$ %data_resp_pending) -> () {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    br %posedge, %init, %event
event:
    %data_pvalid_i1 = prb i1$ %data_pvalid_i
    %data_pready_o1 = prb i1$ %data_pready_o
    %4 = and i1 %data_pvalid_i1, %data_pready_o1
    br %4, %if_false, %if_true
if_true:
    %data_resp_pending1 = prb i32$ %data_resp_pending
    %5 = const i32 1
    %6 = sub i32 %data_resp_pending1, %5
    %7 = const time 0s 1e
    drv i32$ %data_resp_pending, %6, %7
    %data_resp_pending2 = prb i32$ %data_resp_pending
    br %if_exit
if_false:
    br %if_exit
if_exit:
    %data_qvalid_o1 = prb i1$ %data_qvalid_o
    %data_qready_i1 = prb i1$ %data_qready_i
    %8 = and i1 %data_qvalid_o1, %data_qready_i1
    br %8, %if_false1, %if_true1
if_true1:
    %data_resp_pending3 = prb i32$ %data_resp_pending
    %9 = const i32 1
    %10 = add i32 %data_resp_pending3, %9
    %11 = const time 0s 1e
    drv i32$ %data_resp_pending, %10, %11
    %data_resp_pending4 = prb i32$ %data_resp_pending
    br %if_exit1
if_false1:
    br %if_exit1
if_exit1:
    br %0
}

proc %snitch_tb.initial.277.0 () -> (i1$ %clk_i, i1$ %rst_i) {
0:
    %1 = const i32 1
    %2 = exts i1, i32 %1, 0, 1
    %3 = const time 1ns
    drv i1$ %rst_i, %2, %3
    %4 = const i32 1
    %5 = exts i1, i32 %4, 0, 1
    %6 = const time 2ns
    drv i1$ %clk_i, %5, %6
    %7 = const i32 0
    %8 = exts i1, i32 %7, 0, 1
    %9 = const time 3ns
    drv i1$ %clk_i, %8, %9
    %10 = const i32 0
    %11 = exts i1, i32 %10, 0, 1
    %12 = const time 4ns
    drv i1$ %rst_i, %11, %12
    %13 = const time 5ns
    wait %14 for %13
14:
    %15 = const i32 1000000
    %loop_count = var i32 %15
    br %loop_body
loop_body:
    %16 = ld i32* %loop_count
    %17 = const i32 0
    %18 = neq i32 %16, %17
    br %18, %loop_exit, %loop_continue
loop_exit:
    %19 = const time 1ns
    wait %20 for %19
loop_continue:
    %21 = const i32 1
    %22 = exts i1, i32 %21, 0, 1
    %23 = const time 0s 1e
    drv i1$ %clk_i, %22, %23
    %24 = const time 1ns
    wait %25 for %24
25:
    %26 = const i32 0
    %27 = exts i1, i32 %26, 0, 1
    %28 = const time 0s 1e
    drv i1$ %clk_i, %27, %28
    %29 = const time 1ns
    wait %30 for %29
30:
    %31 = ld i32* %loop_count
    %32 = const i32 1
    %33 = sub i32 %31, %32
    st i32* %loop_count, %33
    br %loop_body
20:
    halt
}

entity @snitch_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 0
    %rst_i = sig i1 %1
    %2 = const i32 0
    %inst_addr_o = sig i32 %2
    %3 = const i32 0
    %inst_data_i = sig i32 %3
    %4 = const i1 0
    %inst_valid_o = sig i1 %4
    %5 = const i1 0
    %inst_ready_i = sig i1 %5
    %6 = const i32 0
    %data_qaddr_o = sig i32 %6
    %7 = const i1 0
    %data_qwrite_o = sig i1 %7
    %8 = const i4 0
    %data_qamo_o = sig i4 %8
    %9 = const i64 0
    %data_qdata_o = sig i64 %9
    %10 = const i8 0
    %data_qstrb_o = sig i8 %10
    %11 = const i1 0
    %data_qvalid_o = sig i1 %11
    %12 = const i1 0
    %data_qready_i = sig i1 %12
    %13 = const i64 0
    %data_pdata_i = sig i64 %13
    %14 = const i1 0
    %data_perror_i = sig i1 %14
    %15 = const i1 0
    %data_pvalid_i = sig i1 %15
    %16 = const i1 0
    %data_pready_o = sig i1 %16
    %17 = const i32 0
    %18 = const i32 0
    %19 = const i32 0
    %20 = const i32 0
    %21 = const i32 0
    %22 = const i32 0
    %23 = const i32 0
    %24 = const i32 0
    %25 = const i32 0
    %26 = const i32 0
    %27 = const i32 0
    %28 = const i32 0
    %29 = const i32 0
    %30 = const i32 0
    %31 = const i32 0
    %32 = const i32 0
    %33 = [i32 %17, %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32]
    %PROGRAM = sig [16 x i32] %33
    %34 = const i32 0
    %data_resp_pending = sig i32 %34
    %35 = const i32 1048577811
    %36 = const i32 1050515
    %37 = const i32 1555
    %38 = const i32 3405649335
    %39 = const i32 16123571
    %40 = const i32 14000163
    %41 = const i32 4294379283
    %42 = const i32 493075
    %43 = const i32 427923
    %44 = const i32 4261877475
    %45 = const i32 273678451
    %46 = const i32 4292866159
    %47 = const i32 32871
    %48 = const i32 0
    %49 = const i1 0
    %50 = inss i32 %48, i1 %49, 0, 1
    %51 = const i32 0
    %52 = const i1 0
    %53 = inss i32 %51, i1 %52, 0, 1
    %54 = const i32 0
    %55 = const i1 0
    %56 = inss i32 %54, i1 %55, 0, 1
    %57 = [i32 %35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %50, %53, %56]
    %58 = const time 0s 1e
    drv [16 x i32]$ %PROGRAM, %57, %58
    %PROGRAM1 = prb [16 x i32]$ %PROGRAM
    %inst_addr_o1 = prb i32$ %inst_addr_o
    %59 = const i32 65536
    %60 = sub i32 %inst_addr_o1, %59
    %61 = const i32 4
    %62 = udiv i32 %60, %61
    %63 = const i32 0
    %64 = [16 x i32 %63]
    %65 = shr [16 x i32] %PROGRAM1, [16 x i32] %64, i32 %62
    %66 = extf i32, [16 x i32] %65, 0
    %67 = const time 0s 1e
    drv i32$ %inst_data_i, %66, %67
    %68 = const i32 1
    %69 = exts i1, i32 %68, 0, 1
    %70 = const time 0s 1e
    drv i1$ %inst_ready_i, %69, %70
    %71 = const i32 1
    %72 = exts i1, i32 %71, 0, 1
    %73 = const time 0s 1e
    drv i1$ %data_qready_i, %72, %73
    %74 = const i64 0
    %75 = const i32 3735931568
    %76 = inss i64 %74, i32 %75, 0, 32
    %77 = const time 0s 1e
    drv i64$ %data_pdata_i, %76, %77
    %78 = const i32 0
    %79 = exts i1, i32 %78, 0, 1
    %80 = const time 0s 1e
    drv i1$ %data_perror_i, %79, %80
    %data_resp_pending1 = prb i32$ %data_resp_pending
    %81 = const i32 0
    %82 = sgt i32 %data_resp_pending1, %81
    %83 = const time 0s 1e
    drv i1$ %data_pvalid_i, %82, %83
    %clk_i1 = prb i1$ %clk_i
    %84 = const i1 0
    %85 = sig i1 %84
    %86 = const time 0s 1e
    drv i1$ %85, %clk_i1, %86
    %rst_i1 = prb i1$ %rst_i
    %87 = const i1 0
    %88 = sig i1 %87
    %89 = const time 0s 1e
    drv i1$ %88, %rst_i1, %89
    %90 = const i32 66
    %91 = const i32 0
    %92 = sig i32 %91
    %93 = const time 0s 1e
    drv i32$ %92, %90, %93
    %inst_data_i1 = prb i32$ %inst_data_i
    %94 = const i32 0
    %95 = sig i32 %94
    %96 = const time 0s 1e
    drv i32$ %95, %inst_data_i1, %96
    %inst_ready_i1 = prb i1$ %inst_ready_i
    %97 = const i1 0
    %98 = sig i1 %97
    %99 = const time 0s 1e
    drv i1$ %98, %inst_ready_i1, %99
    %100 = const i32 0
    %101 = sig i32 %100
    %102 = const i5 0
    %103 = sig i5 %102
    %104 = const i32 0
    %105 = sig i32 %104
    %106 = const i64 0
    %107 = sig i64 %106
    %108 = const i64 0
    %109 = sig i64 %108
    %110 = const i64 0
    %111 = sig i64 %110
    %112 = const i1 0
    %113 = sig i1 %112
    %114 = const i1 0
    %115 = sig i1 %114
    %116 = const i64 0
    %117 = sig i64 %116
    %118 = const i5 0
    %119 = sig i5 %118
    %120 = const i1 0
    %121 = sig i1 %120
    %122 = const i1 0
    %123 = sig i1 %122
    %124 = const i1 0
    %125 = sig i1 %124
    %data_qready_i1 = prb i1$ %data_qready_i
    %126 = const i1 0
    %127 = sig i1 %126
    %128 = const time 0s 1e
    drv i1$ %127, %data_qready_i1, %128
    %data_pdata_i1 = prb i64$ %data_pdata_i
    %129 = const i64 0
    %130 = sig i64 %129
    %131 = const time 0s 1e
    drv i64$ %130, %data_pdata_i1, %131
    %data_perror_i1 = prb i1$ %data_perror_i
    %132 = const i1 0
    %133 = sig i1 %132
    %134 = const time 0s 1e
    drv i1$ %133, %data_perror_i1, %134
    %data_pvalid_i1 = prb i1$ %data_pvalid_i
    %135 = const i1 0
    %136 = sig i1 %135
    %137 = const time 0s 1e
    drv i1$ %136, %data_pvalid_i1, %137
    %138 = const i1 0
    %139 = sig i1 %138
    %140 = const i3 0
    %141 = sig i3 %140
    %142 = const i1 0
    %143 = const i1 0
    %144 = const i1 0
    %145 = const i1 0
    %146 = const i1 0
    %147 = {i1 %142, i1 %143, i1 %144, i1 %145, i1 %146}
    %148 = sig {i1, i1, i1, i1, i1} %147
    %149 = const i1 0
    %150 = const i1 0
    %151 = const i1 0
    %152 = const i1 0
    %153 = {i1 %149, i1 %150, i1 %151, i1 %152}
    %154 = sig {i1, i1, i1, i1} %153
    inst @snitch.param1 (i1$ %85, i1$ %88, i32$ %92, i32$ %95, i1$ %98, i1$ %115, i64$ %117, i5$ %119, i1$ %121, i1$ %123, i1$ %127, i64$ %130, i1$ %133, i1$ %136, i1$ %139, {i1, i1, i1, i1, i1}$ %148) -> (i32$ %inst_addr_o, i1$ %inst_valid_o, i32$ %101, i5$ %103, i32$ %105, i64$ %107, i64$ %109, i64$ %111, i1$ %113, i1$ %125, i32$ %data_qaddr_o, i1$ %data_qwrite_o, i4$ %data_qamo_o, i64$ %data_qdata_o, i8$ %data_qstrb_o, i1$ %data_qvalid_o, i1$ %data_pready_o, i3$ %141, {i1, i1, i1, i1}$ %154)
    inst %snitch_tb.always.272.0 (i1$ %clk_i, i1$ %data_qvalid_o, i1$ %data_qready_i, i1$ %data_pvalid_i, i1$ %data_pready_o, i32$ %data_resp_pending) -> ()
    inst %snitch_tb.initial.277.0 () -> (i1$ %clk_i, i1$ %rst_i)
}
