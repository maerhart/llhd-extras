entity @binary_to_gray.param2 (i4$ %A) -> (i4$ %Z) {
    %A1 = prb i4$ %A
    %0 = exts i3, i4 %A1, 1, 3
    %1 = const i4 0
    %2 = inss i4 %1, i3 %0, 0, 3
    %3 = xor i4 %A1, %2
    %4 = const time 0s 1e
    drv i4$ %Z, %3, %4
}

entity @binary_to_gray.param3 (i4$ %A) -> (i4$ %Z) {
    %A1 = prb i4$ %A
    %0 = exts i3, i4 %A1, 1, 3
    %1 = const i4 0
    %2 = inss i4 %1, i3 %0, 0, 3
    %3 = xor i4 %A1, %2
    %4 = const time 0s 1e
    drv i4$ %Z, %3, %4
}

entity @gray_to_binary.param4 (i4$ %A) -> (i4$ %Z) {
    %0 = exts i1$, i4$ %Z, 0, 1
    %A1 = prb i4$ %A
    %1 = exts i1, i4 %A1, 0, 1
    %2 = exts i1, i4 %A1, 1, 1
    %3 = xor i1 %1, %2
    %4 = exts i1, i4 %A1, 2, 1
    %5 = xor i1 %3, %4
    %6 = exts i1, i4 %A1, 3, 1
    %7 = xor i1 %5, %6
    %8 = const time 0s 1e
    drv i1$ %0, %7, %8
    %9 = const i32 1
    %10 = const i4 0
    %11 = sig i4 %10
    %12 = shr i4$ %Z, i4$ %11, i32 %9
    %13 = exts i1$, i4$ %12, 0, 1
    %14 = exts i3, i4 %A1, 1, 3
    %15 = inss i4 %10, i3 %14, 0, 3
    %16 = exts i3, i4 %15, 0, 3
    %17 = exts i1, i3 %16, 0, 1
    %18 = exts i1, i3 %16, 1, 1
    %19 = xor i1 %17, %18
    %20 = exts i1, i3 %16, 2, 1
    %21 = xor i1 %19, %20
    drv i1$ %13, %21, %8
    %22 = const i32 2
    %23 = sig i4 %10
    %24 = shr i4$ %Z, i4$ %23, i32 %22
    %25 = exts i1$, i4$ %24, 0, 1
    %26 = exts i2, i4 %A1, 2, 2
    %27 = inss i4 %10, i2 %26, 0, 2
    %28 = exts i2, i4 %27, 0, 2
    %29 = exts i1, i2 %28, 0, 1
    %30 = exts i1, i2 %28, 1, 1
    %31 = xor i1 %29, %30
    drv i1$ %25, %31, %8
    %32 = const i32 3
    %33 = sig i4 %10
    %34 = shr i4$ %Z, i4$ %33, i32 %32
    %35 = exts i1$, i4$ %34, 0, 1
    %36 = inss i4 %10, i1 %6, 0, 1
    %37 = exts i1, i4 %36, 0, 1
    drv i1$ %35, %37, %8
    %38 = const time 0s
    drv i4$ %Z, %10, %38
}

entity @gray_to_binary.param9 (i4$ %A) -> (i4$ %Z) {
    %0 = exts i1$, i4$ %Z, 0, 1
    %A1 = prb i4$ %A
    %1 = exts i1, i4 %A1, 0, 1
    %2 = exts i1, i4 %A1, 1, 1
    %3 = xor i1 %1, %2
    %4 = exts i1, i4 %A1, 2, 1
    %5 = xor i1 %3, %4
    %6 = exts i1, i4 %A1, 3, 1
    %7 = xor i1 %5, %6
    %8 = const time 0s 1e
    drv i1$ %0, %7, %8
    %9 = const i32 1
    %10 = const i4 0
    %11 = sig i4 %10
    %12 = shr i4$ %Z, i4$ %11, i32 %9
    %13 = exts i1$, i4$ %12, 0, 1
    %14 = exts i3, i4 %A1, 1, 3
    %15 = inss i4 %10, i3 %14, 0, 3
    %16 = exts i3, i4 %15, 0, 3
    %17 = exts i1, i3 %16, 0, 1
    %18 = exts i1, i3 %16, 1, 1
    %19 = xor i1 %17, %18
    %20 = exts i1, i3 %16, 2, 1
    %21 = xor i1 %19, %20
    drv i1$ %13, %21, %8
    %22 = const i32 2
    %23 = sig i4 %10
    %24 = shr i4$ %Z, i4$ %23, i32 %22
    %25 = exts i1$, i4$ %24, 0, 1
    %26 = exts i2, i4 %A1, 2, 2
    %27 = inss i4 %10, i2 %26, 0, 2
    %28 = exts i2, i4 %27, 0, 2
    %29 = exts i1, i2 %28, 0, 1
    %30 = exts i1, i2 %28, 1, 1
    %31 = xor i1 %29, %30
    drv i1$ %25, %31, %8
    %32 = const i32 3
    %33 = sig i4 %10
    %34 = shr i4$ %Z, i4$ %33, i32 %32
    %35 = exts i1$, i4$ %34, 0, 1
    %36 = inss i4 %10, i1 %6, 0, 1
    %37 = exts i1, i4 %36, 0, 1
    drv i1$ %35, %37, %8
    %38 = const time 0s
    drv i4$ %Z, %10, %38
}

proc %cdc_fifo_gray.param1.always_ff.265.1 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = extf i32$, [8 x i32]$ %fifo_data_q, 0
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    drv i32$ %9, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %11 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %12 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %13 = eq i32 %12, %8
    %14 = neq i1 %13, %0
    %15 = and i1 %11, %14
    %16 = neq i1 %15, %0
    br %16, %init, %if_true1
if_true1:
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %9, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.14 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 1
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.15 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 2
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.16 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 3
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.17 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 4
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.18 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 5
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.19 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 6
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.265.20 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const i32 0
    %9 = const i32 7
    %10 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %11 = [8 x i32 %8]
    %12 = sig [8 x i32] %11
    %13 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %12, i32 %9
    %14 = extf i32$, [8 x i32]$ %13, 0
    drv i32$ %14, %8, %10
    br %init
if_false:
    %fifo_write1 = prb i1$ %fifo_write
    %15 = neq i1 %fifo_write1, %0
    %fifo_widx1 = prb i3$ %fifo_widx
    %16 = inss i32 %8, i3 %fifo_widx1, 0, 3
    %17 = eq i32 %16, %9
    %18 = neq i1 %17, %0
    %19 = and i1 %15, %18
    %20 = neq i1 %19, %0
    br %20, %init, %if_true1
if_true1:
    %21 = [8 x i32 %8]
    %22 = sig [8 x i32] %21
    %23 = shr [8 x i32]$ %fifo_data_q, [8 x i32]$ %22, i32 %9
    %24 = extf i32$, [8 x i32]$ %23, 0
    %fifo_wdata1 = prb i32$ %fifo_wdata
    drv i32$ %24, %fifo_wdata1, %10
    br %init
}

proc %cdc_fifo_gray.param1.initial.69.1 () -> () {
0:
    halt
}

proc %cdc_fifo_gray.param1.always_ff.417.1 (i4$ %src_wptr_bin_d, i4$ %src_wptr_gray_d, i1$ %src_rst_ni, i1$ %src_clk_i, i1$ %src_valid_i, i1$ %src_ready_o) -> (i4$ %src_wptr_bin_q, i4$ %src_wptr_gray_q) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i4 0
    drv i4$ %src_wptr_bin_q, %9, %8
    drv i4$ %src_wptr_gray_q, %9, %8
    br %init
if_false:
    %src_valid_i1 = prb i1$ %src_valid_i
    %10 = neq i1 %src_valid_i1, %0
    %src_ready_o1 = prb i1$ %src_ready_o
    %11 = neq i1 %src_ready_o1, %0
    %12 = and i1 %10, %11
    %13 = neq i1 %12, %0
    br %13, %init, %if_true1
if_true1:
    %src_wptr_bin_d1 = prb i4$ %src_wptr_bin_d
    drv i4$ %src_wptr_bin_q, %src_wptr_bin_d1, %8
    %src_wptr_gray_d1 = prb i4$ %src_wptr_gray_d
    drv i4$ %src_wptr_gray_q, %src_wptr_gray_d1, %8
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.486.1 (i4$ %dst_rptr_bin_d, i4$ %dst_rptr_gray_d, i1$ %dst_rst_ni, i1$ %dst_clk_i, i1$ %dst_valid_o, i1$ %dst_ready_i) -> (i4$ %dst_rptr_bin_q, i4$ %dst_rptr_gray_q) {
init:
    %dst_clk_i1 = prb i1$ %dst_clk_i
    %dst_rst_ni1 = prb i1$ %dst_rst_ni
    wait %check, %dst_clk_i, %dst_rst_ni
check:
    %dst_clk_i2 = prb i1$ %dst_clk_i
    %0 = const i1 0
    %1 = eq i1 %dst_clk_i1, %0
    %2 = neq i1 %dst_clk_i2, %0
    %posedge = and i1 %1, %2
    %dst_rst_ni2 = prb i1$ %dst_rst_ni
    %3 = neq i1 %dst_rst_ni1, %0
    %4 = eq i1 %dst_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %dst_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i4 0
    drv i4$ %dst_rptr_bin_q, %9, %8
    drv i4$ %dst_rptr_gray_q, %9, %8
    br %init
if_false:
    %dst_valid_o1 = prb i1$ %dst_valid_o
    %10 = neq i1 %dst_valid_o1, %0
    %dst_ready_i1 = prb i1$ %dst_ready_i
    %11 = neq i1 %dst_ready_i1, %0
    %12 = and i1 %10, %11
    %13 = neq i1 %12, %0
    br %13, %init, %if_true1
if_true1:
    %dst_rptr_bin_d1 = prb i4$ %dst_rptr_bin_d
    drv i4$ %dst_rptr_bin_q, %dst_rptr_bin_d1, %8
    %dst_rptr_gray_d1 = prb i4$ %dst_rptr_gray_d
    drv i4$ %dst_rptr_gray_q, %dst_rptr_gray_d1, %8
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.559.1 (i4$ %dst_rptr_gray_q, i1$ %src_rst_ni, i1$ %src_clk_i) -> (i4$ %src_rptr_gray_q, i4$ %src_rptr_gray_q2) {
init:
    %src_clk_i1 = prb i1$ %src_clk_i
    %src_rst_ni1 = prb i1$ %src_rst_ni
    wait %check, %src_clk_i, %src_rst_ni
check:
    %src_clk_i2 = prb i1$ %src_clk_i
    %0 = const i1 0
    %1 = eq i1 %src_clk_i1, %0
    %2 = neq i1 %src_clk_i2, %0
    %posedge = and i1 %1, %2
    %src_rst_ni2 = prb i1$ %src_rst_ni
    %3 = neq i1 %src_rst_ni1, %0
    %4 = eq i1 %src_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %src_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i4 0
    drv i4$ %src_rptr_gray_q, %9, %8
    drv i4$ %src_rptr_gray_q2, %9, %8
    br %init
if_false:
    %dst_rptr_gray_q1 = prb i4$ %dst_rptr_gray_q
    drv i4$ %src_rptr_gray_q, %dst_rptr_gray_q1, %8
    %src_rptr_gray_q1 = prb i4$ %src_rptr_gray_q
    drv i4$ %src_rptr_gray_q2, %src_rptr_gray_q1, %8
    br %init
}

proc %cdc_fifo_gray.param1.always_ff.620.1 (i4$ %src_wptr_gray_q, i1$ %dst_rst_ni, i1$ %dst_clk_i) -> (i4$ %dst_wptr_gray_q, i4$ %dst_wptr_gray_q2) {
init:
    %dst_clk_i1 = prb i1$ %dst_clk_i
    %dst_rst_ni1 = prb i1$ %dst_rst_ni
    wait %check, %dst_clk_i, %dst_rst_ni
check:
    %dst_clk_i2 = prb i1$ %dst_clk_i
    %0 = const i1 0
    %1 = eq i1 %dst_clk_i1, %0
    %2 = neq i1 %dst_clk_i2, %0
    %posedge = and i1 %1, %2
    %dst_rst_ni2 = prb i1$ %dst_rst_ni
    %3 = neq i1 %dst_rst_ni1, %0
    %4 = eq i1 %dst_rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %dst_rst_ni2, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i4 0
    drv i4$ %dst_wptr_gray_q, %9, %8
    drv i4$ %dst_wptr_gray_q2, %9, %8
    br %init
if_false:
    %src_wptr_gray_q1 = prb i4$ %src_wptr_gray_q
    drv i4$ %dst_wptr_gray_q, %src_wptr_gray_q1, %8
    %dst_wptr_gray_q1 = prb i4$ %dst_wptr_gray_q
    drv i4$ %dst_wptr_gray_q2, %dst_wptr_gray_q1, %8
    br %init
}

entity @cdc_fifo_gray.param1 (i1$ %src_rst_ni, i1$ %src_clk_i, i32$ %src_data_i, i1$ %src_valid_i, i1$ %dst_rst_ni, i1$ %dst_clk_i, i1$ %dst_ready_i) -> (i1$ %src_ready_o, i32$ %dst_data_o, i1$ %dst_valid_o) {
    %0 = const i3 0
    %fifo_widx = sig i3 %0
    %fifo_ridx = sig i3 %0
    %1 = const i1 0
    %fifo_write = sig i1 %1
    %2 = const i32 0
    %fifo_wdata = sig i32 %2
    %fifo_rdata = sig i32 %2
    %3 = [i32 %2, %2, %2, %2, %2, %2, %2, %2]
    %fifo_data_q = sig [8 x i32] %3
    %4 = const i4 0
    %src_wptr_bin_q = sig i4 %4
    %src_wptr_gray_q = sig i4 %4
    %dst_rptr_bin_q = sig i4 %4
    %dst_rptr_gray_q = sig i4 %4
    %src_wptr_bin_d = sig i4 %4
    %src_wptr_gray_d = sig i4 %4
    %dst_rptr_bin_d = sig i4 %4
    %dst_rptr_gray_d = sig i4 %4
    %src_rptr_gray_q = sig i4 %4
    %src_rptr_gray_q2 = sig i4 %4
    %dst_wptr_gray_q = sig i4 %4
    %dst_wptr_gray_q2 = sig i4 %4
    %src_rptr_bin = sig i4 %4
    %dst_wptr_bin = sig i4 %4
    %fifo_data_q1 = prb [8 x i32]$ %fifo_data_q
    %fifo_ridx1 = prb i3$ %fifo_ridx
    %5 = [8 x i32 %2]
    %6 = shr [8 x i32] %fifo_data_q1, [8 x i32] %5, i3 %fifo_ridx1
    %7 = extf i32, [8 x i32] %6, 0
    %8 = const time 0s 1e
    drv i32$ %fifo_rdata, %7, %8
    %src_wptr_bin_q1 = prb i4$ %src_wptr_bin_q
    %9 = inss i32 %2, i4 %src_wptr_bin_q1, 0, 4
    %10 = const i32 1
    %11 = add i32 %9, %10
    %12 = exts i4, i32 %11, 0, 4
    drv i4$ %src_wptr_bin_d, %12, %8
    %dst_rptr_bin_q1 = prb i4$ %dst_rptr_bin_q
    %13 = inss i32 %2, i4 %dst_rptr_bin_q1, 0, 4
    %14 = add i32 %13, %10
    %15 = exts i4, i32 %14, 0, 4
    drv i4$ %dst_rptr_bin_d, %15, %8
    %src_rptr_bin1 = prb i4$ %src_rptr_bin
    %16 = xor i4 %src_wptr_bin_q1, %src_rptr_bin1
    %17 = const i4 8
    %18 = neq i4 %16, %17
    drv i1$ %src_ready_o, %18, %8
    %dst_wptr_bin1 = prb i4$ %dst_wptr_bin
    %19 = xor i4 %dst_rptr_bin_q1, %dst_wptr_bin1
    %20 = neq i4 %19, %4
    drv i1$ %dst_valid_o, %20, %8
    %21 = exts i3, i4 %src_wptr_bin_q1, 0, 3
    drv i3$ %fifo_widx, %21, %8
    %src_data_i1 = prb i32$ %src_data_i
    drv i32$ %fifo_wdata, %src_data_i1, %8
    %src_valid_i1 = prb i1$ %src_valid_i
    %22 = neq i1 %src_valid_i1, %1
    %src_ready_o1 = prb i1$ %src_ready_o
    %23 = neq i1 %src_ready_o1, %1
    %24 = and i1 %22, %23
    drv i1$ %fifo_write, %24, %8
    %25 = exts i3, i4 %dst_rptr_bin_q1, 0, 3
    drv i3$ %fifo_ridx, %25, %8
    %fifo_rdata1 = prb i32$ %fifo_rdata
    drv i32$ %dst_data_o, %fifo_rdata1, %8
    %src_wptr_bin_d1 = prb i4$ %src_wptr_bin_d
    %26 = sig i4 %4
    drv i4$ %26, %src_wptr_bin_d1, %8
    inst @binary_to_gray.param2 (i4$ %26) -> (i4$ %src_wptr_gray_d)
    %dst_rptr_bin_d1 = prb i4$ %dst_rptr_bin_d
    %27 = sig i4 %4
    drv i4$ %27, %dst_rptr_bin_d1, %8
    inst @binary_to_gray.param3 (i4$ %27) -> (i4$ %dst_rptr_gray_d)
    %src_rptr_gray_q21 = prb i4$ %src_rptr_gray_q2
    %28 = sig i4 %4
    drv i4$ %28, %src_rptr_gray_q21, %8
    inst @gray_to_binary.param4 (i4$ %28) -> (i4$ %src_rptr_bin)
    %dst_wptr_gray_q21 = prb i4$ %dst_wptr_gray_q2
    %29 = sig i4 %4
    drv i4$ %29, %dst_wptr_gray_q21, %8
    inst @gray_to_binary.param9 (i4$ %29) -> (i4$ %dst_wptr_bin)
    inst %cdc_fifo_gray.param1.always_ff.265.1 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.14 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.15 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.16 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.17 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.18 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.19 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.always_ff.265.20 (i3$ %fifo_widx, i1$ %fifo_write, i32$ %fifo_wdata, i1$ %src_rst_ni, i1$ %src_clk_i) -> ([8 x i32]$ %fifo_data_q)
    inst %cdc_fifo_gray.param1.initial.69.1 () -> ()
    inst %cdc_fifo_gray.param1.always_ff.417.1 (i4$ %src_wptr_bin_d, i4$ %src_wptr_gray_d, i1$ %src_rst_ni, i1$ %src_clk_i, i1$ %src_valid_i, i1$ %src_ready_o) -> (i4$ %src_wptr_bin_q, i4$ %src_wptr_gray_q)
    inst %cdc_fifo_gray.param1.always_ff.486.1 (i4$ %dst_rptr_bin_d, i4$ %dst_rptr_gray_d, i1$ %dst_rst_ni, i1$ %dst_clk_i, i1$ %dst_valid_o, i1$ %dst_ready_i) -> (i4$ %dst_rptr_bin_q, i4$ %dst_rptr_gray_q)
    inst %cdc_fifo_gray.param1.always_ff.559.1 (i4$ %dst_rptr_gray_q, i1$ %src_rst_ni, i1$ %src_clk_i) -> (i4$ %src_rptr_gray_q, i4$ %src_rptr_gray_q2)
    inst %cdc_fifo_gray.param1.always_ff.620.1 (i4$ %src_wptr_gray_q, i1$ %dst_rst_ni, i1$ %dst_clk_i) -> (i4$ %dst_wptr_gray_q, i4$ %dst_wptr_gray_q2)
}

proc %cdc_fifo_gray_tb.initial.1006.0 (i1$ %src_ready_o) -> (i1$ %src_rst_ni, i1$ %src_clk_i, i32$ %src_data_i, i1$ %src_valid_i) {
0:
    %1 = const i1 0
    %2 = const time 0s 1e
    drv i1$ %src_rst_ni, %1, %2
    %3 = const time 1ns
    wait %4 for %3
4:
    %5 = const i1 1
    %6 = const time 0s 1e
    drv i1$ %src_rst_ni, %5, %6
    %7 = const time 1ns
    wait %8 for %7
8:
    %9 = const i32 0
    br %loop_body
loop_body:
    %i = phi i32 [%9, %8], [%10, %11]
    %12 = const i32 1000000
    %13 = slt i32 %i, %12
    br %13, %loop_exit, %loop_body1
loop_exit:
    halt
loop_body1:
    %src_ready_o1 = prb i1$ %src_ready_o
    %14 = const i1 0
    %15 = neq i1 %src_ready_o1, %14
    %16 = not i1 %15
    %17 = neq i1 %16, %14
    %18 = const i1 1
    %19 = const time 0s 1e
    %20 = const time 1ns
    br %17, %loop_exit1, %loop_continue
loop_exit1:
    drv i32$ %src_data_i, %i, %19
    drv i1$ %src_valid_i, %18, %19
    %21 = const time 1ps
    drv i1$ %src_clk_i, %18, %21
    wait %22 for %20
loop_continue:
    drv i1$ %src_clk_i, %18, %19
    wait %23 for %20
23:
    %24 = const i1 0
    %25 = const time 0s 1e
    drv i1$ %src_clk_i, %24, %25
    %26 = const time 1ns
    wait %27 for %26
27:
    br %loop_body1
22:
    %28 = const i1 0
    %29 = const time 0s 1e
    drv i1$ %src_clk_i, %28, %29
    %30 = const time 1ns
    wait %11 for %30
11:
    %31 = const i32 1
    %10 = add i32 %i, %31
    br %loop_body
}

proc %cdc_fifo_gray_tb.initial.1154.0 (i32$ %dst_data_o, i1$ %dst_valid_o) -> (i32$ %ERRORS, i1$ %dst_rst_ni, i1$ %dst_clk_i, i1$ %dst_ready_i) {
0:
    %1 = const time 250ps
    wait %2 for %1
2:
    %3 = const i1 0
    %4 = const time 0s 1e
    drv i1$ %dst_rst_ni, %3, %4
    %5 = const time 1ns
    wait %6 for %5
6:
    %7 = const i1 1
    %8 = const time 0s 1e
    drv i1$ %dst_rst_ni, %7, %8
    %9 = const time 1ns
    wait %10 for %9
10:
    %11 = const i1 1
    %12 = const time 0s 1e
    drv i1$ %dst_ready_i, %11, %12
    %13 = const i32 0
    br %loop_body
loop_body:
    %i = phi i32 [%14, %15], [%13, %10]
    %16 = const i32 1000000
    %17 = slt i32 %i, %16
    br %17, %loop_exit, %loop_body1
loop_exit:
    halt
loop_body1:
    %dst_valid_o1 = prb i1$ %dst_valid_o
    %18 = const i1 0
    %19 = neq i1 %dst_valid_o1, %18
    %20 = not i1 %19
    %21 = neq i1 %20, %18
    %22 = const i1 1
    %23 = const time 0s 1e
    %24 = const time 1ns
    br %21, %loop_exit1, %loop_continue
loop_exit1:
    drv i1$ %dst_clk_i, %22, %23
    %25 = const i32 0
    %dst_data_o1 = prb i32$ %dst_data_o
    %26 = neq i32 %i, %dst_data_o1
    %27 = inss i32 %25, i1 %26, 0, 1
    %ERRORS1 = prb i32$ %ERRORS
    %28 = add i32 %ERRORS1, %27
    drv i32$ %ERRORS, %28, %23
    wait %29 for %24
loop_continue:
    drv i1$ %dst_clk_i, %22, %23
    wait %30 for %24
30:
    %31 = const i1 0
    %32 = const time 0s 1e
    drv i1$ %dst_clk_i, %31, %32
    %33 = const time 1ns
    wait %34 for %33
34:
    br %loop_body1
29:
    %35 = const i1 0
    %36 = const time 0s 1e
    drv i1$ %dst_clk_i, %35, %36
    %37 = const time 1ns
    wait %15 for %37
15:
    %38 = const i32 1
    %14 = add i32 %i, %38
    br %loop_body
}

entity @cdc_fifo_gray_tb () -> () {
    %0 = const i32 0
    %ERRORS = sig i32 %0
    %1 = const i1 1
    %src_rst_ni = sig i1 %1
    %2 = const i1 0
    %src_clk_i = sig i1 %2
    %src_data_i = sig i32 %0
    %src_valid_i = sig i1 %2
    %src_ready_o = sig i1 %2
    %dst_rst_ni = sig i1 %1
    %dst_clk_i = sig i1 %2
    %dst_data_o = sig i32 %0
    %dst_valid_o = sig i1 %2
    %dst_ready_i = sig i1 %2
    %src_rst_ni1 = prb i1$ %src_rst_ni
    %3 = sig i1 %2
    %4 = const time 0s 1e
    drv i1$ %3, %src_rst_ni1, %4
    %src_clk_i1 = prb i1$ %src_clk_i
    %5 = sig i1 %2
    drv i1$ %5, %src_clk_i1, %4
    %src_data_i1 = prb i32$ %src_data_i
    %6 = sig i32 %0
    drv i32$ %6, %src_data_i1, %4
    %src_valid_i1 = prb i1$ %src_valid_i
    %7 = sig i1 %2
    drv i1$ %7, %src_valid_i1, %4
    %dst_rst_ni1 = prb i1$ %dst_rst_ni
    %8 = sig i1 %2
    drv i1$ %8, %dst_rst_ni1, %4
    %dst_clk_i1 = prb i1$ %dst_clk_i
    %9 = sig i1 %2
    drv i1$ %9, %dst_clk_i1, %4
    %dst_ready_i1 = prb i1$ %dst_ready_i
    %10 = sig i1 %2
    drv i1$ %10, %dst_ready_i1, %4
    inst @cdc_fifo_gray.param1 (i1$ %3, i1$ %5, i32$ %6, i1$ %7, i1$ %8, i1$ %9, i1$ %10) -> (i1$ %src_ready_o, i32$ %dst_data_o, i1$ %dst_valid_o)
    inst %cdc_fifo_gray_tb.initial.1006.0 (i1$ %src_ready_o) -> (i1$ %src_rst_ni, i1$ %src_clk_i, i32$ %src_data_i, i1$ %src_valid_i)
    inst %cdc_fifo_gray_tb.initial.1154.0 (i32$ %dst_data_o, i1$ %dst_valid_o) -> (i32$ %ERRORS, i1$ %dst_rst_ni, i1$ %dst_clk_i, i1$ %dst_ready_i)
}
