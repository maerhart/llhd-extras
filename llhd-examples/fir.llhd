proc %fir.param1.always_ff.260.1 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q) {
init:
    %CLK1 = prb i1$ %CLK
    wait %check, %CLK
check:
    %CLK2 = prb i1$ %CLK
    %0 = const i1 0
    %1 = eq i1 %CLK1, %0
    %2 = neq i1 %CLK2, %0
    %posedge = and i1 %1, %2
    br %posedge, %init, %event
event:
    %3 = const i32 1
    %4 = const i16 0
    %5 = [4 x i16 %4]
    %6 = sig [4 x i16] %5
    %7 = shr [4 x i16]$ %q, [4 x i16]$ %6, i32 %3
    %8 = extf i16$, [4 x i16]$ %7, 0
    %add_out1 = prb [4 x i16]$ %add_out
    %9 = extf i16, [4 x i16] %add_out1, 0
    %10 = const time 0s 1d
    drv i16$ %8, %9, %10
    br %init
}

proc %fir.param1.always_ff.260.10 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q) {
init:
    %CLK1 = prb i1$ %CLK
    wait %check, %CLK
check:
    %CLK2 = prb i1$ %CLK
    %0 = const i1 0
    %1 = eq i1 %CLK1, %0
    %2 = neq i1 %CLK2, %0
    %posedge = and i1 %1, %2
    br %posedge, %init, %event
event:
    %3 = const i32 2
    %4 = const i16 0
    %5 = [4 x i16 %4]
    %6 = sig [4 x i16] %5
    %7 = shr [4 x i16]$ %q, [4 x i16]$ %6, i32 %3
    %8 = extf i16$, [4 x i16]$ %7, 0
    %add_out1 = prb [4 x i16]$ %add_out
    %9 = exts [1 x i16], [4 x i16] %5, 0, 1
    %10 = exts [3 x i16], [4 x i16] %add_out1, 1, 3
    %11 = inss [4 x i16] %5, [1 x i16] %9, 3, 1
    %12 = inss [4 x i16] %11, [3 x i16] %10, 0, 3
    %13 = extf i16, [4 x i16] %12, 0
    %14 = const time 0s 1d
    drv i16$ %8, %13, %14
    br %init
}

proc %fir.param1.always_ff.260.11 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q) {
init:
    %CLK1 = prb i1$ %CLK
    wait %check, %CLK
check:
    %CLK2 = prb i1$ %CLK
    %0 = const i1 0
    %1 = eq i1 %CLK1, %0
    %2 = neq i1 %CLK2, %0
    %posedge = and i1 %1, %2
    br %posedge, %init, %event
event:
    %3 = const i32 3
    %4 = const i16 0
    %5 = [4 x i16 %4]
    %6 = sig [4 x i16] %5
    %7 = shr [4 x i16]$ %q, [4 x i16]$ %6, i32 %3
    %8 = extf i16$, [4 x i16]$ %7, 0
    %add_out1 = prb [4 x i16]$ %add_out
    %9 = exts [2 x i16], [4 x i16] %5, 0, 2
    %10 = exts [2 x i16], [4 x i16] %add_out1, 2, 2
    %11 = inss [4 x i16] %5, [2 x i16] %9, 2, 2
    %12 = inss [4 x i16] %11, [2 x i16] %10, 0, 2
    %13 = extf i16, [4 x i16] %12, 0
    %14 = const time 0s 1d
    drv i16$ %8, %13, %14
    br %init
}

entity @fir.param1 (i1$ %CLK, i8$ %X, [4 x i8]$ %W) -> (i16$ %Y) {
    %0 = const i16 0
    %1 = [i16 %0, %0, %0, %0]
    %mul_out = sig [4 x i16] %1
    %add_out = sig [4 x i16] %1
    %q = sig [4 x i16] %1
    %2 = extf i16$, [4 x i16]$ %q, 0
    %3 = const time 0s 1e
    drv i16$ %2, %0, %3
    %add_out1 = prb [4 x i16]$ %add_out
    %4 = [4 x i16 %0]
    %5 = exts [3 x i16], [4 x i16] %4, 0, 3
    %6 = exts [1 x i16], [4 x i16] %add_out1, 3, 1
    %7 = inss [4 x i16] %4, [3 x i16] %5, 1, 3
    %8 = inss [4 x i16] %7, [1 x i16] %6, 0, 1
    %9 = extf i16, [4 x i16] %8, 0
    drv i16$ %Y, %9, %3
    %10 = extf i16$, [4 x i16]$ %mul_out, 0
    %W1 = prb [4 x i8]$ %W
    %11 = extf i8, [4 x i8] %W1, 0
    %12 = inss i16 %0, i8 %11, 0, 8
    %X1 = prb i8$ %X
    %13 = inss i16 %0, i8 %X1, 0, 8
    %14 = umul i16 %12, %13
    drv i16$ %10, %14, %3
    %15 = const i32 1
    %16 = sig [4 x i16] %4
    %17 = shr [4 x i16]$ %mul_out, [4 x i16]$ %16, i32 %15
    %18 = extf i16$, [4 x i16]$ %17, 0
    %19 = const i8 0
    %20 = [4 x i8 %19]
    %21 = exts [1 x i8], [4 x i8] %20, 0, 1
    %22 = exts [3 x i8], [4 x i8] %W1, 1, 3
    %23 = inss [4 x i8] %20, [1 x i8] %21, 3, 1
    %24 = inss [4 x i8] %23, [3 x i8] %22, 0, 3
    %25 = extf i8, [4 x i8] %24, 0
    %26 = inss i16 %0, i8 %25, 0, 8
    %27 = umul i16 %26, %13
    drv i16$ %18, %27, %3
    %28 = const i32 2
    %29 = sig [4 x i16] %4
    %30 = shr [4 x i16]$ %mul_out, [4 x i16]$ %29, i32 %28
    %31 = extf i16$, [4 x i16]$ %30, 0
    %32 = exts [2 x i8], [4 x i8] %20, 0, 2
    %33 = exts [2 x i8], [4 x i8] %W1, 2, 2
    %34 = inss [4 x i8] %20, [2 x i8] %32, 2, 2
    %35 = inss [4 x i8] %34, [2 x i8] %33, 0, 2
    %36 = extf i8, [4 x i8] %35, 0
    %37 = inss i16 %0, i8 %36, 0, 8
    %38 = umul i16 %37, %13
    drv i16$ %31, %38, %3
    %39 = const i32 3
    %40 = sig [4 x i16] %4
    %41 = shr [4 x i16]$ %mul_out, [4 x i16]$ %40, i32 %39
    %42 = extf i16$, [4 x i16]$ %41, 0
    %43 = exts [3 x i8], [4 x i8] %20, 0, 3
    %44 = exts [1 x i8], [4 x i8] %W1, 3, 1
    %45 = inss [4 x i8] %20, [3 x i8] %43, 1, 3
    %46 = inss [4 x i8] %45, [1 x i8] %44, 0, 1
    %47 = extf i8, [4 x i8] %46, 0
    %48 = inss i16 %0, i8 %47, 0, 8
    %49 = umul i16 %48, %13
    drv i16$ %42, %49, %3
    %50 = extf i16$, [4 x i16]$ %add_out, 0
    %q1 = prb [4 x i16]$ %q
    %51 = extf i16, [4 x i16] %q1, 0
    %mul_out1 = prb [4 x i16]$ %mul_out
    %52 = exts [1 x i16], [4 x i16] %mul_out1, 3, 1
    %53 = inss [4 x i16] %7, [1 x i16] %52, 0, 1
    %54 = extf i16, [4 x i16] %53, 0
    %55 = add i16 %51, %54
    drv i16$ %50, %55, %3
    %56 = sig [4 x i16] %4
    %57 = shr [4 x i16]$ %add_out, [4 x i16]$ %56, i32 %15
    %58 = extf i16$, [4 x i16]$ %57, 0
    %59 = exts [1 x i16], [4 x i16] %4, 0, 1
    %60 = exts [3 x i16], [4 x i16] %q1, 1, 3
    %61 = inss [4 x i16] %4, [1 x i16] %59, 3, 1
    %62 = inss [4 x i16] %61, [3 x i16] %60, 0, 3
    %63 = extf i16, [4 x i16] %62, 0
    %64 = exts [2 x i16], [4 x i16] %4, 0, 2
    %65 = exts [2 x i16], [4 x i16] %mul_out1, 2, 2
    %66 = inss [4 x i16] %4, [2 x i16] %64, 2, 2
    %67 = inss [4 x i16] %66, [2 x i16] %65, 0, 2
    %68 = extf i16, [4 x i16] %67, 0
    %69 = add i16 %63, %68
    drv i16$ %58, %69, %3
    %70 = sig [4 x i16] %4
    %71 = shr [4 x i16]$ %add_out, [4 x i16]$ %70, i32 %28
    %72 = extf i16$, [4 x i16]$ %71, 0
    %73 = exts [2 x i16], [4 x i16] %q1, 2, 2
    %74 = inss [4 x i16] %66, [2 x i16] %73, 0, 2
    %75 = extf i16, [4 x i16] %74, 0
    %76 = exts [3 x i16], [4 x i16] %mul_out1, 1, 3
    %77 = inss [4 x i16] %61, [3 x i16] %76, 0, 3
    %78 = extf i16, [4 x i16] %77, 0
    %79 = add i16 %75, %78
    drv i16$ %72, %79, %3
    %80 = sig [4 x i16] %4
    %81 = shr [4 x i16]$ %add_out, [4 x i16]$ %80, i32 %39
    %82 = extf i16$, [4 x i16]$ %81, 0
    %83 = exts [1 x i16], [4 x i16] %q1, 3, 1
    %84 = inss [4 x i16] %7, [1 x i16] %83, 0, 1
    %85 = extf i16, [4 x i16] %84, 0
    %86 = extf i16, [4 x i16] %mul_out1, 0
    %87 = add i16 %85, %86
    drv i16$ %82, %87, %3
    inst %fir.param1.always_ff.260.1 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q)
    inst %fir.param1.always_ff.260.10 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q)
    inst %fir.param1.always_ff.260.11 ([4 x i16]$ %add_out, i1$ %CLK) -> ([4 x i16]$ %q)
}

proc %fir_tb.initial.478.0 () -> (i1$ %CLK, i8$ %X) {
0:
    %1 = const i8 0
    %2 = const time 0s 1d
    drv i8$ %X, %1, %2
    %3 = const i32 5000000
    br %loop_body
loop_body:
    %4 = phi i32 [%3, %0], [%5, %6]
    %7 = const i32 0
    %8 = neq i32 %4, %7
    br %8, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %9 = const i1 1
    %10 = const time 1ns
    drv i1$ %CLK, %9, %10
    %11 = const i1 0
    %12 = const time 2ns
    drv i1$ %CLK, %11, %12
    wait %6 for %12
6:
    %13 = const i32 1
    %5 = sub i32 %4, %13
    br %loop_body
}

proc %fir_tb.always.501.0 (i1$ %CLK) -> (i8$ %X) {
init:
    %CLK1 = prb i1$ %CLK
    wait %check, %CLK
check:
    %CLK2 = prb i1$ %CLK
    %0 = const i1 0
    %1 = eq i1 %CLK1, %0
    %2 = neq i1 %CLK2, %0
    %posedge = and i1 %1, %2
    br %posedge, %init, %event
event:
    %3 = const i32 0
    %X1 = prb i8$ %X
    %4 = inss i32 %3, i8 %X1, 0, 8
    %5 = const i32 9
    %6 = add i32 %4, %5
    %7 = const i32 19
    %8 = umod i32 %6, %7
    %9 = exts i8, i32 %8, 0, 8
    %10 = const time 500ps
    drv i8$ %X, %9, %10
    br %init
}

entity @fir_tb () -> () {
    %0 = const i1 0
    %CLK = sig i1 %0
    %1 = const i8 0
    %X = sig i8 %1
    %2 = [i8 %1, %1, %1, %1]
    %W = sig [4 x i8] %2
    %3 = const i16 0
    %Y = sig i16 %3
    %4 = extf i8$, [4 x i8]$ %W, 0
    %5 = const i8 254
    %6 = const time 0s 1e
    drv i8$ %4, %5, %6
    %7 = const i32 1
    %8 = [4 x i8 %1]
    %9 = sig [4 x i8] %8
    %10 = shr [4 x i8]$ %W, [4 x i8]$ %9, i32 %7
    %11 = extf i8$, [4 x i8]$ %10, 0
    %12 = const i8 255
    drv i8$ %11, %12, %6
    %13 = const i32 2
    %14 = sig [4 x i8] %8
    %15 = shr [4 x i8]$ %W, [4 x i8]$ %14, i32 %13
    %16 = extf i8$, [4 x i8]$ %15, 0
    %17 = const i8 3
    drv i8$ %16, %17, %6
    %18 = const i32 3
    %19 = sig [4 x i8] %8
    %20 = shr [4 x i8]$ %W, [4 x i8]$ %19, i32 %18
    %21 = extf i8$, [4 x i8]$ %20, 0
    %22 = const i8 4
    drv i8$ %21, %22, %6
    %CLK1 = prb i1$ %CLK
    %23 = sig i1 %0
    drv i1$ %23, %CLK1, %6
    %X1 = prb i8$ %X
    %24 = sig i8 %1
    drv i8$ %24, %X1, %6
    %W1 = prb [4 x i8]$ %W
    %25 = sig [4 x i8] %8
    drv [4 x i8]$ %25, %W1, %6
    inst @fir.param1 (i1$ %23, i8$ %24, [4 x i8]$ %25) -> (i16$ %Y)
    inst %fir_tb.initial.478.0 () -> (i1$ %CLK, i8$ %X)
    inst %fir_tb.always.501.0 (i1$ %CLK) -> (i8$ %X)
}
