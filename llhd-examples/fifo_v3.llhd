proc %fifo_v3.param1.always_comb.626.1 (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [16 x i32]$ %mem_q, i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %gate_clock, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, [16 x i32]$ %mem_n, i32$ %data_o) {
body:
    %read_pointer_q1 = prb i4$ %read_pointer_q
    %0 = const time 0s 1e
    drv i4$ %read_pointer_n, %read_pointer_q1, %0
    %write_pointer_q1 = prb i4$ %write_pointer_q
    drv i4$ %write_pointer_n, %write_pointer_q1, %0
    %status_cnt_q1 = prb i5$ %status_cnt_q
    drv i5$ %status_cnt_n, %status_cnt_q1, %0
    %data_i1 = prb i32$ %data_i
    %mem_q1 = prb [16 x i32]$ %mem_q
    %1 = const i32 0
    %2 = [16 x i32 %1]
    %3 = shr [16 x i32] %mem_q1, [16 x i32] %2, i4 %read_pointer_q1
    %4 = extf i32, [16 x i32] %3, 0
    %5 = [i32 %4, %data_i1]
    %6 = extf i32, [2 x i32] %5, 0
    drv i32$ %data_o, %6, %0
    drv [16 x i32]$ %mem_n, %mem_q1, %0
    %7 = const i1 1
    drv i1$ %gate_clock, %7, %0
    %push_i1 = prb i1$ %push_i
    %8 = const i1 0
    %9 = neq i1 %push_i1, %8
    %full_o1 = prb i1$ %full_o
    %10 = not i1 %full_o1
    %11 = neq i1 %10, %8
    %12 = and i1 %9, %11
    %13 = neq i1 %12, %8
    %14 = const i4 0
    %15 = const i32 4294967295
    %16 = const i32 1
    %17 = inss i32 %1, i5 %status_cnt_q1, 0, 5
    br %13, %if_exit, %if_true
if_true:
    %18 = sig [16 x i32] %2
    %19 = shr [16 x i32]$ %mem_n, [16 x i32]$ %18, i4 %write_pointer_q1
    %20 = extf i32$, [16 x i32]$ %19, 0
    drv i32$ %20, %data_i1, %0
    drv i1$ %gate_clock, %8, %0
    %21 = inss i32 %1, i4 %write_pointer_q1, 0, 4
    %22 = [i32 %1, %15]
    %23 = extf i32, [2 x i32] %22, 0
    %24 = inss i32 %23, i4 %14, 0, 4
    %25 = sub i32 %24, %16
    %26 = eq i32 %21, %25
    %27 = neq i1 %26, %8
    br %27, %if_false, %if_true1
if_exit:
    %pop_i1 = prb i1$ %pop_i
    %28 = neq i1 %pop_i1, %8
    %empty_o1 = prb i1$ %empty_o
    %29 = not i1 %empty_o1
    %30 = neq i1 %29, %8
    %31 = and i1 %28, %30
    %32 = neq i1 %31, %8
    br %32, %if_exit1, %if_true2
if_true1:
    drv i4$ %write_pointer_n, %14, %0
    br %if_exit2
if_false:
    %33 = add i32 %21, %16
    %34 = exts i4, i32 %33, 0, 4
    drv i4$ %write_pointer_n, %34, %0
    br %if_exit2
if_exit2:
    %35 = add i32 %17, %16
    %36 = exts i5, i32 %35, 0, 5
    drv i5$ %status_cnt_n, %36, %0
    br %if_exit
if_true2:
    %read_pointer_n1 = prb i4$ %read_pointer_n
    %37 = inss i32 %1, i4 %read_pointer_n1, 0, 4
    %38 = [i32 %1, %15]
    %39 = extf i32, [2 x i32] %38, 0
    %40 = inss i32 %39, i4 %14, 0, 4
    %41 = sub i32 %40, %16
    %42 = eq i32 %37, %41
    %43 = neq i1 %42, %8
    br %43, %if_false1, %if_true3
if_exit1:
    %44 = and i1 %9, %28
    %45 = neq i1 %44, %8
    %46 = and i1 %45, %11
    %47 = neq i1 %46, %8
    %48 = and i1 %47, %30
    %49 = neq i1 %48, %8
    br %49, %if_exit3, %if_true4
if_true3:
    drv i4$ %read_pointer_n, %14, %0
    br %if_exit4
if_false1:
    %50 = inss i32 %1, i4 %read_pointer_q1, 0, 4
    %51 = add i32 %50, %16
    %52 = exts i4, i32 %51, 0, 4
    drv i4$ %read_pointer_n, %52, %0
    br %if_exit4
if_exit4:
    %53 = sub i32 %17, %16
    %54 = exts i5, i32 %53, 0, 5
    drv i5$ %status_cnt_n, %54, %0
    br %if_exit1
if_true4:
    drv i5$ %status_cnt_n, %status_cnt_q1, %0
    br %if_exit3
if_exit3:
    wait %body, %read_pointer_q, %write_pointer_q, %status_cnt_q, %mem_q, %full_o, %empty_o, %data_i, %push_i, %pop_i
}

proc %fifo_v3.param1.always_ff.745.1 (i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni2
    %6 = neq i1 %5, %0
    %7 = const i4 0
    %8 = const time 0s 1d
    %9 = const i5 0
    br %6, %if_false, %if_true
if_true:
    drv i4$ %read_pointer_q, %7, %8
    drv i4$ %write_pointer_q, %7, %8
    drv i5$ %status_cnt_q, %9, %8
    br %init
if_false:
    %flush_i1 = prb i1$ %flush_i
    %10 = neq i1 %flush_i1, %0
    br %10, %if_false1, %if_true1
if_true1:
    drv i4$ %read_pointer_q, %7, %8
    drv i4$ %write_pointer_q, %7, %8
    drv i5$ %status_cnt_q, %9, %8
    br %init
if_false1:
    %read_pointer_n1 = prb i4$ %read_pointer_n
    drv i4$ %read_pointer_q, %read_pointer_n1, %8
    %write_pointer_n1 = prb i4$ %write_pointer_n
    drv i4$ %write_pointer_q, %write_pointer_n1, %8
    %status_cnt_n1 = prb i5$ %status_cnt_n
    drv i5$ %status_cnt_q, %status_cnt_n1, %8
    br %init
}

proc %fifo_v3.param1.always_ff.789.1 (i1$ %gate_clock, [16 x i32]$ %mem_n, i1$ %clk_i, i1$ %rst_ni) -> ([16 x i32]$ %mem_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni2
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i32 0
    %9 = [i32 %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8, %8]
    drv [16 x i32]$ %mem_q, %9, %7
    br %init
if_false:
    %gate_clock1 = prb i1$ %gate_clock
    %10 = neq i1 %gate_clock1, %0
    %11 = not i1 %10
    %12 = neq i1 %11, %0
    br %12, %init, %if_true1
if_true1:
    %mem_n1 = prb [16 x i32]$ %mem_n
    drv [16 x i32]$ %mem_q, %mem_n1, %7
    br %init
}

proc %fifo_v3.param1.initial.805.1 () -> () {
0:
    halt
}

entity @fifo_v3.param1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %testmode_i, i32$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %full_o, i1$ %empty_o, i4$ %usage_o, i32$ %data_o) {
    %0 = const i1 0
    %gate_clock = sig i1 %0
    %1 = const i4 0
    %read_pointer_n = sig i4 %1
    %read_pointer_q = sig i4 %1
    %write_pointer_n = sig i4 %1
    %write_pointer_q = sig i4 %1
    %2 = const i5 0
    %status_cnt_n = sig i5 %2
    %status_cnt_q = sig i5 %2
    %3 = const i32 0
    %4 = [i32 %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3, %3]
    %mem_n = sig [16 x i32] %4
    %mem_q = sig [16 x i32] %4
    %status_cnt_q1 = prb i5$ %status_cnt_q
    %5 = exts i4, i5 %status_cnt_q1, 0, 4
    %6 = const time 0s 1e
    drv i4$ %usage_o, %5, %6
    %7 = const i5 16
    %8 = eq i5 %status_cnt_q1, %7
    drv i1$ %full_o, %8, %6
    %9 = inss i32 %3, i5 %status_cnt_q1, 0, 5
    %10 = eq i32 %9, %3
    drv i1$ %empty_o, %10, %6
    inst %fifo_v3.param1.always_comb.626.1 (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [16 x i32]$ %mem_q, i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %gate_clock, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, [16 x i32]$ %mem_n, i32$ %data_o)
    inst %fifo_v3.param1.always_ff.745.1 (i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q)
    inst %fifo_v3.param1.always_ff.789.1 (i1$ %gate_clock, [16 x i32]$ %mem_n, i1$ %clk_i, i1$ %rst_ni) -> ([16 x i32]$ %mem_q)
    inst %fifo_v3.param1.initial.805.1 () -> ()
}

proc %fifo_v3_tb.initial.979.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i1 0
    %2 = const time 1ns
    drv i1$ %rst_ni, %1, %2
    %3 = const i1 1
    %4 = const time 2ns
    drv i1$ %rst_ni, %3, %4
    %5 = const time 4ns
    wait %6 for %5
6:
    %7 = const i32 1000000
    br %loop_body
loop_body:
    %8 = phi i32 [%7, %6], [%9, %10]
    %11 = const i32 0
    %12 = neq i32 %8, %11
    br %12, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %13 = const i1 1
    %14 = const time 1ns
    drv i1$ %clk_i, %13, %14
    %15 = const i1 0
    %16 = const time 2ns
    drv i1$ %clk_i, %15, %16
    wait %10 for %16
10:
    %17 = const i32 1
    %9 = sub i32 %8, %17
    br %loop_body
}

proc %fifo_v3_tb.always_comb.995.0 (i1$ %full_o) -> (i1$ %push_i) {
body:
    %full_o1 = prb i1$ %full_o
    %0 = const i1 0
    %1 = neq i1 %full_o1, %0
    %2 = not i1 %1
    %3 = const time 250ps
    drv i1$ %push_i, %2, %3
    wait %body, %full_o
}

proc %fifo_v3_tb.always.1020.0 (i1$ %clk_i, i1$ %full_o) -> (i32$ %data_i) {
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %full_o1 = prb i1$ %full_o
    %3 = neq i1 %full_o1, %0
    %4 = not i1 %3
    %iff = and i1 %posedge, %4
    br %iff, %init, %event
event:
    %data_i1 = prb i32$ %data_i
    %5 = const i32 1
    %6 = add i32 %data_i1, %5
    %7 = const time 250ps
    drv i32$ %data_i, %6, %7
    br %init
}

proc %fifo_v3_tb.always_comb.1036.0 (i1$ %empty_o) -> (i1$ %pop_i) {
body:
    %empty_o1 = prb i1$ %empty_o
    %0 = const i1 0
    %1 = neq i1 %empty_o1, %0
    %2 = not i1 %1
    %3 = const time 250ps
    drv i1$ %pop_i, %2, %3
    wait %body, %empty_o
}

entity @fifo_v3_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %full_o = sig i1 %0
    %empty_o = sig i1 %0
    %2 = const i32 0
    %data_i = sig i32 %2
    %push_i = sig i1 %0
    %data_o = sig i32 %2
    %pop_i = sig i1 %0
    %clk_i1 = prb i1$ %clk_i
    %3 = sig i1 %0
    %4 = const time 0s 1e
    drv i1$ %3, %clk_i1, %4
    %rst_ni1 = prb i1$ %rst_ni
    %5 = sig i1 %0
    drv i1$ %5, %rst_ni1, %4
    %6 = sig i1 %0
    drv i1$ %6, %0, %4
    %7 = sig i1 %0
    drv i1$ %7, %0, %4
    %data_i1 = prb i32$ %data_i
    %8 = sig i32 %2
    drv i32$ %8, %data_i1, %4
    %push_i1 = prb i1$ %push_i
    %9 = sig i1 %0
    drv i1$ %9, %push_i1, %4
    %pop_i1 = prb i1$ %pop_i
    %10 = sig i1 %0
    drv i1$ %10, %pop_i1, %4
    %11 = const i4 0
    %dut.usage_o.default = sig i4 %11
    inst @fifo_v3.param1 (i1$ %3, i1$ %5, i1$ %6, i1$ %7, i32$ %8, i1$ %9, i1$ %10) -> (i1$ %full_o, i1$ %empty_o, i4$ %dut.usage_o.default, i32$ %data_o)
    inst %fifo_v3_tb.initial.979.0 () -> (i1$ %clk_i, i1$ %rst_ni)
    inst %fifo_v3_tb.always_comb.995.0 (i1$ %full_o) -> (i1$ %push_i)
    inst %fifo_v3_tb.always.1020.0 (i1$ %clk_i, i1$ %full_o) -> (i32$ %data_i)
    inst %fifo_v3_tb.always_comb.1036.0 (i1$ %empty_o) -> (i1$ %pop_i)
}
