proc %lfsr_16bit.param1.always_comb.273.1 (i16$ %shift_q, i1$ %en_i) -> (i16$ %shift_d, i16$ %out_o) {
body:
    %shift_q1 = prb i16$ %shift_q
    %0 = exts i1, i16 %shift_q1, 15, 1
    %1 = const i16 0
    %2 = inss i16 %1, i1 %0, 0, 1
    %3 = exts i1, i16 %2, 0, 1
    %4 = exts i4, i16 %shift_q1, 12, 4
    %5 = inss i16 %1, i4 %4, 0, 4
    %6 = exts i1, i16 %5, 0, 1
    %7 = xor i1 %3, %6
    %8 = exts i11, i16 %shift_q1, 5, 11
    %9 = inss i16 %1, i11 %8, 0, 11
    %10 = exts i1, i16 %9, 0, 1
    %11 = xor i1 %7, %10
    %12 = exts i15, i16 %shift_q1, 1, 15
    %13 = inss i16 %1, i15 %12, 0, 15
    %14 = exts i1, i16 %13, 0, 1
    %15 = xor i1 %11, %14
    %16 = const i1 0
    %17 = neq i1 %15, %16
    %18 = not i1 %17
    %19 = const time 0s 1e
    drv i16$ %shift_d, %shift_q1, %19
    %en_i1 = prb i1$ %en_i
    %20 = neq i1 %en_i1, %16
    br %20, %if_exit, %if_true
if_true:
    %21 = inss i16 %1, i1 %18, 0, 1
    %22 = exts i15, i16 %shift_q1, 0, 15
    %23 = inss i16 %21, i15 %22, 1, 15
    drv i16$ %shift_d, %23, %19
    br %if_exit
if_exit:
    drv i16$ %out_o, %shift_q1, %19
    wait %body, %shift_q, %en_i
}

proc %lfsr_16bit.param1.always_ff.314.1 (i16$ %shift_d, i1$ %clk_i, i1$ %rst_ni) -> (i16$ %shift_q) {
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i1, %0
    %2 = neq i1 %clk_i2, %0
    %posedge = and i1 %1, %2
    %rst_ni2 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni1, %0
    %4 = eq i1 %rst_ni2, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni2
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i16 1
    drv i16$ %shift_q, %8, %7
    br %init
if_false:
    %shift_d1 = prb i16$ %shift_d
    drv i16$ %shift_q, %shift_d1, %7
    br %init
}

proc %lfsr_16bit.param1.initial.332.1 () -> () {
0:
    halt
}

entity @lfsr_16bit.param1 (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) -> (i16$ %out_o) {
    %0 = const i16 0
    %shift_d = sig i16 %0
    %shift_q = sig i16 %0
    inst %lfsr_16bit.param1.always_comb.273.1 (i16$ %shift_q, i1$ %en_i) -> (i16$ %shift_d, i16$ %out_o)
    inst %lfsr_16bit.param1.always_ff.314.1 (i16$ %shift_d, i1$ %clk_i, i1$ %rst_ni) -> (i16$ %shift_q)
    inst %lfsr_16bit.param1.initial.332.1 () -> ()
}

proc %lfsr_16bit_tb.initial.113.0 () -> (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) {
0:
    %1 = const i1 0
    %2 = const time 1ns
    drv i1$ %rst_ni, %1, %2
    %3 = const i1 1
    %4 = const time 2ns
    drv i1$ %rst_ni, %3, %4
    %5 = const time 4ns
    wait %6 for %5
6:
    %7 = const i1 1
    %8 = const time 0s 1d
    drv i1$ %en_i, %7, %8
    %9 = const i32 10000000
    br %loop_body
loop_body:
    %10 = phi i32 [%11, %12], [%9, %6]
    %13 = const i32 0
    %14 = neq i32 %10, %13
    br %14, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %15 = const time 1ns
    drv i1$ %clk_i, %7, %15
    %16 = const i1 0
    %17 = const time 2ns
    drv i1$ %clk_i, %16, %17
    wait %12 for %17
12:
    %18 = const i32 1
    %11 = sub i32 %10, %18
    br %loop_body
}

entity @lfsr_16bit_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %en_i = sig i1 %0
    %2 = const i16 0
    %out_o = sig i16 %2
    %clk_i1 = prb i1$ %clk_i
    %3 = sig i1 %0
    %4 = const time 0s 1e
    drv i1$ %3, %clk_i1, %4
    %rst_ni1 = prb i1$ %rst_ni
    %5 = sig i1 %0
    drv i1$ %5, %rst_ni1, %4
    %en_i1 = prb i1$ %en_i
    %6 = sig i1 %0
    drv i1$ %6, %en_i1, %4
    inst @lfsr_16bit.param1 (i1$ %3, i1$ %5, i1$ %6) -> (i16$ %out_o)
    inst %lfsr_16bit_tb.initial.113.0 () -> (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i)
}
