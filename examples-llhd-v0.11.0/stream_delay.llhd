proc %delta_counter.param3.always_comb.1234.3 (i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i, i5$ %counter_q) -> (i5$ %counter_d) {
body:
    %counter_q.prb = prb i5$ %counter_q
    %0 = const time 0s 1e
    drv i5$ %counter_d, %counter_q.prb, %0
    %clear_i.prb = prb i1$ %clear_i
    %1 = const i1 0
    %2 = neq i1 %clear_i.prb, %1
    %3 = const i5 0
    br %2, %if_false, %if_true
check:
    wait %body, %clear_i, %en_i, %load_i, %down_i, %delta_i, %d_i, %counter_q
if_true:
    drv i5$ %counter_d, %3, %0
    br %check
if_false:
    %load_i.prb = prb i1$ %load_i
    %4 = neq i1 %load_i.prb, %1
    br %4, %if_false1, %if_true1
if_true1:
    %d_i.prb = prb i4$ %d_i
    %5 = inss i5 %3, i4 %d_i.prb, 0, 4
    %concat = inss i5 %5, i1 %1, 4, 1
    drv i5$ %counter_d, %concat, %0
    br %check
if_false1:
    %en_i.prb = prb i1$ %en_i
    %6 = neq i1 %en_i.prb, %1
    br %6, %check, %if_true2
if_true2:
    %down_i.prb = prb i1$ %down_i
    %7 = neq i1 %down_i.prb, %1
    %delta_i.prb = prb i4$ %delta_i
    br %7, %if_false2, %if_true3
if_true3:
    %zext = inss i5 %3, i4 %delta_i.prb, 0, 4
    %8 = sub i5 %counter_q.prb, %zext
    drv i5$ %counter_d, %8, %0
    br %check
if_false2:
    %zext1 = inss i5 %3, i4 %delta_i.prb, 0, 4
    %9 = add i5 %counter_q.prb, %zext1
    drv i5$ %counter_d, %9, %0
    br %check
}

proc %delta_counter.param3.always_ff.1273.3 (i1$ %clk_i, i1$ %rst_ni, i5$ %counter_d) -> (i5$ %counter_q) {
init:
    %clk_i.prb = prb i1$ %clk_i
    %rst_ni.prb = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %rst_ni.prb1 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni.prb, %0
    %4 = eq i1 %rst_ni.prb1, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = neq i1 %rst_ni.prb1, %0
    %6 = not i1 %5
    %7 = neq i1 %6, %0
    %8 = const time 0s 1d
    br %7, %if_false, %if_true
if_true:
    %9 = const i5 0
    drv i5$ %counter_q, %9, %8
    br %init
if_false:
    %counter_d.prb = prb i5$ %counter_d
    drv i5$ %counter_q, %counter_d.prb, %8
    br %init
}

entity @delta_counter.param3 (i1$ %clk_i, i1$ %rst_ni, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i) -> (i4$ %q_o, i1$ %overflow_o) {
    %0 = const i5 0
    %counter_q = sig i5 %0
    %counter_d = sig i5 %0
    %counter_q.prb = prb i5$ %counter_q
    %1 = exts i4, i5 %counter_q.prb, 0, 4
    %2 = const time 0s 1e
    drv i4$ %q_o, %1, %2
    %3 = exts i1, i5 %counter_q.prb, 4, 1
    %4 = inss i5 %0, i1 %3, 0, 1
    %5 = exts i1, i5 %4, 0, 1
    drv i1$ %overflow_o, %5, %2
    inst %delta_counter.param3.always_comb.1234.3 (i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %delta_i, i4$ %d_i, i5$ %counter_q) -> (i5$ %counter_d)
    inst %delta_counter.param3.always_ff.1273.3 (i1$ %clk_i, i1$ %rst_ni, i5$ %counter_d) -> (i5$ %counter_q)
}

entity @counter.param2 (i1$ %clk_i, i1$ %rst_ni, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %d_i) -> (i4$ %q_o, i1$ %overflow_o) {
    %0 = const i4 1
    %1 = const i4 0
    %2 = sig i4 %1
    %3 = const time 0s 1d
    drv i4$ %2, %0, %3
    inst @delta_counter.param3 (i1$ %clk_i, i1$ %rst_ni, i1$ %clear_i, i1$ %en_i, i1$ %load_i, i1$ %down_i, i4$ %2, i4$ %d_i) -> (i4$ %q_o, i1$ %overflow_o)
}

proc %lfsr_16bit.param4.always_comb.1433.4 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d) {
body:
    %0 = const i1 0
    %shift_in = var i1 %0
    %shift_q.prb = prb i16$ %shift_q
    %1 = exts i1, i16 %shift_q.prb, 15, 1
    %2 = const i16 0
    %3 = inss i16 %2, i1 %1, 0, 1
    %4 = exts i1, i16 %3, 0, 1
    %5 = exts i4, i16 %shift_q.prb, 12, 4
    %6 = inss i16 %2, i4 %5, 0, 4
    %7 = exts i1, i16 %6, 0, 1
    %8 = xor i1 %4, %7
    %9 = exts i11, i16 %shift_q.prb, 5, 11
    %10 = inss i16 %2, i11 %9, 0, 11
    %11 = exts i1, i16 %10, 0, 1
    %12 = xor i1 %8, %11
    %13 = exts i15, i16 %shift_q.prb, 1, 15
    %14 = inss i16 %2, i15 %13, 0, 15
    %15 = exts i1, i16 %14, 0, 1
    %16 = xor i1 %12, %15
    %17 = neq i1 %16, %0
    %18 = not i1 %17
    st i1* %shift_in, %18
    %19 = const time 0s 1e
    drv i16$ %shift_d, %shift_q.prb, %19
    %en_i.prb = prb i1$ %en_i
    %20 = neq i1 %en_i.prb, %0
    br %20, %if_exit, %if_true
if_true:
    %shift_in.ld = ld i1* %shift_in
    %21 = inss i16 %2, i1 %shift_in.ld, 0, 1
    %22 = exts i15, i16 %shift_q.prb, 0, 15
    %concat = inss i16 %21, i15 %22, 1, 15
    drv i16$ %shift_d, %concat, %19
    br %if_exit
if_exit:
    drv i16$ %out_o, %shift_q.prb, %19
    wait %body, %en_i, %shift_q
}

proc %lfsr_16bit.param4.always_ff.1474.4 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q) {
init:
    %clk_i.prb = prb i1$ %clk_i
    %rst_ni.prb = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %rst_ni.prb1 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni.prb, %0
    %4 = eq i1 %rst_ni.prb1, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni.prb1
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i16 0
    drv i16$ %shift_q, %8, %7
    br %init
if_false:
    %shift_d.prb = prb i16$ %shift_d
    drv i16$ %shift_q, %shift_d.prb, %7
    br %init
}

proc %lfsr_16bit.param4.initial.1492.4 () -> () {
0:
    halt
}

entity @lfsr_16bit.param4 (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) -> (i16$ %out_o) {
    %0 = const i16 0
    %shift_d = sig i16 %0
    %shift_q = sig i16 %0
    inst %lfsr_16bit.param4.always_comb.1433.4 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d)
    inst %lfsr_16bit.param4.always_ff.1474.4 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q)
    inst %lfsr_16bit.param4.initial.1492.4 () -> ()
}

proc %stream_delay.param1.always_comb.400.1 (i1$ %valid_i, i1$ %ready_i, i2$ %state_q, i4$ %count_out, i4$ %counter_load) -> (i1$ %ready_o, i1$ %valid_o, i2$ %state_d, i1$ %load, i1$ %en) {
body:
    %state_q.prb = prb i2$ %state_q
    %0 = const time 0s 1e
    drv i2$ %state_d, %state_q.prb, %0
    %1 = const i1 0
    drv i1$ %valid_o, %1, %0
    drv i1$ %ready_o, %1, %0
    drv i1$ %load, %1, %0
    drv i1$ %en, %1, %0
    %2 = const i2 0
    %3 = eq i2 %state_q.prb, %2
    %4 = const i2 1
    %5 = const i1 1
    %6 = const i32 0
    %7 = const i2 2
    %ready_i.prb = prb i1$ %ready_i
    br %3, %8, %case_body
check:
    wait %body, %valid_i, %ready_i, %state_q, %count_out, %counter_load
case_body:
    %valid_i.prb = prb i1$ %valid_i
    %9 = neq i1 %valid_i.prb, %1
    br %9, %check, %if_true
8:
    %10 = eq i2 %state_q.prb, %4
    br %10, %11, %case_body1
if_true:
    drv i1$ %load, %5, %0
    drv i2$ %state_d, %4, %0
    %counter_load.prb = prb i4$ %counter_load
    %zext = inss i32 %6, i4 %counter_load.prb, 0, 4
    %12 = const i32 1
    %13 = eq i32 %zext, %12
    %14 = neq i1 %13, %1
    %15 = neq i1 %14, %1
    %16 = neq i1 %15, %1
    br %16, %if_exit, %if_true1
if_true1:
    drv i2$ %state_d, %7, %0
    br %if_exit
if_exit:
    %17 = eq i32 %zext, %6
    %18 = neq i1 %17, %1
    %19 = neq i1 %18, %1
    br %19, %check, %if_true2
if_true2:
    drv i1$ %valid_o, %5, %0
    drv i1$ %ready_o, %ready_i.prb, %0
    %20 = neq i1 %ready_i.prb, %1
    br %20, %if_false, %if_true3
if_true3:
    drv i2$ %state_d, %2, %0
    br %check
if_false:
    drv i2$ %state_d, %7, %0
    br %check
case_body1:
    drv i1$ %en, %5, %0
    %count_out.prb = prb i4$ %count_out
    %zext1 = inss i32 %6, i4 %count_out.prb, 0, 4
    %21 = eq i32 %zext1, %6
    %22 = neq i1 %21, %1
    br %22, %check, %if_true4
11:
    %23 = eq i2 %state_q.prb, %7
    br %23, %check, %case_body2
if_true4:
    drv i2$ %state_d, %7, %0
    br %check
case_body2:
    drv i1$ %valid_o, %5, %0
    drv i1$ %ready_o, %ready_i.prb, %0
    %24 = neq i1 %ready_i.prb, %1
    br %24, %check, %if_true5
if_true5:
    drv i2$ %state_d, %2, %0
    br %check
}

proc %stream_delay.param1.always_ff.540.1 (i1$ %clk_i, i1$ %rst_ni, i2$ %state_d) -> (i2$ %state_q) {
init:
    %clk_i.prb = prb i1$ %clk_i
    %rst_ni.prb = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i.prb1 = prb i1$ %clk_i
    %0 = const i1 0
    %1 = eq i1 %clk_i.prb, %0
    %2 = neq i1 %clk_i.prb1, %0
    %posedge = and i1 %1, %2
    %rst_ni.prb1 = prb i1$ %rst_ni
    %3 = neq i1 %rst_ni.prb, %0
    %4 = eq i1 %rst_ni.prb1, %0
    %negedge = and i1 %4, %3
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %5 = not i1 %rst_ni.prb1
    %6 = neq i1 %5, %0
    %7 = const time 0s 1d
    br %6, %if_false, %if_true
if_true:
    %8 = const i2 0
    drv i2$ %state_q, %8, %7
    br %init
if_false:
    %state_d.prb = prb i2$ %state_d
    drv i2$ %state_q, %state_d.prb, %7
    br %init
}

entity @stream_delay.param1 (i1$ %clk_i, i1$ %rst_ni, i32$ %payload_i, i1$ %valid_i, i1$ %ready_i) -> (i1$ %ready_o, i32$ %payload_o, i1$ %valid_o) {
    %0 = const i2 0
    %state_d = sig i2 %0
    %state_q = sig i2 %0
    %1 = const i1 0
    %load = sig i1 %1
    %2 = const i4 0
    %count_out = sig i4 %2
    %en = sig i1 %1
    %counter_load = sig i4 %2
    %payload_i.prb = prb i32$ %payload_i
    %3 = const time 0s 1e
    drv i32$ %payload_o, %payload_i.prb, %3
    %4 = sig i1 %1
    %5 = const time 0s 1d
    drv i1$ %4, %1, %5
    %6 = const i1 1
    %7 = sig i1 %1
    drv i1$ %7, %6, %5
    %i_counter.overflow_o.default = sig i1 %1
    inst @counter.param2 (i1$ %clk_i, i1$ %rst_ni, i1$ %4, i1$ %en, i1$ %load, i1$ %7, i4$ %counter_load) -> (i4$ %count_out, i1$ %i_counter.overflow_o.default)
    %8 = const i16 0
    %lfsr_out = sig i16 %8
    %lfsr_out.prb = prb i16$ %lfsr_out
    %9 = exts i4, i16 %lfsr_out.prb, 0, 4
    drv i4$ %counter_load, %9, %3
    inst @lfsr_16bit.param4 (i1$ %clk_i, i1$ %rst_ni, i1$ %load) -> (i16$ %lfsr_out)
    inst %stream_delay.param1.always_comb.400.1 (i1$ %valid_i, i1$ %ready_i, i2$ %state_q, i4$ %count_out, i4$ %counter_load) -> (i1$ %ready_o, i1$ %valid_o, i2$ %state_d, i1$ %load, i1$ %en)
    inst %stream_delay.param1.always_ff.540.1 (i1$ %clk_i, i1$ %rst_ni, i2$ %state_d) -> (i2$ %state_q)
}

proc %stream_delay_tb.initial.695.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i1 0
    %2 = const time 1ns
    drv i1$ %rst_ni, %1, %2
    %3 = const i1 1
    %4 = const time 2ns
    drv i1$ %rst_ni, %3, %4
    %5 = const time 4ns
    wait %6 for %5
6:
    %7 = const i32 600000
    %loop_count = var i32 %7
    br %loop_body
loop_body:
    %8 = ld i32* %loop_count
    %9 = const i32 0
    %10 = neq i32 %8, %9
    br %10, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %11 = const i1 1
    %12 = const time 1ns
    drv i1$ %clk_i, %11, %12
    %13 = const i1 0
    %14 = const time 2ns
    drv i1$ %clk_i, %13, %14
    wait %15 for %14
15:
    %16 = ld i32* %loop_count
    st i32* %loop_count, %16
    br %loop_body
}

proc %stream_delay_tb.always.725.0 (i1$ %clk_i, i1$ %ready_o) -> (i32$ %payload_i) {
0:
    %1 = prb i32$ %payload_i
    %payload_i.shadow = var i32 %1
    br %init
init:
    %clk_i.prb = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %2 = prb i32$ %payload_i
    st i32* %payload_i.shadow, %2
    %clk_i.prb1 = prb i1$ %clk_i
    %3 = const i1 0
    %4 = eq i1 %clk_i.prb, %3
    %5 = neq i1 %clk_i.prb1, %3
    %posedge = and i1 %4, %5
    %ready_o.prb = prb i1$ %ready_o
    %iff = and i1 %posedge, %ready_o.prb
    br %iff, %init, %event
event:
    %payload_i.shadow.ld = ld i32* %payload_i.shadow
    %6 = const i32 1
    %7 = add i32 %payload_i.shadow.ld, %6
    %8 = const time 500ps
    drv i32$ %payload_i, %7, %8
    br %0
}

entity @stream_delay_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %2 = const i32 0
    %payload_i = sig i32 %2
    %ready_o = sig i1 %0
    %valid_i = sig i1 %0
    %payload_o = sig i32 %2
    %ready_i = sig i1 %0
    %valid_o = sig i1 %0
    %3 = const time 0s 1e
    drv i1$ %valid_i, %1, %3
    %valid_o.prb = prb i1$ %valid_o
    drv i1$ %ready_i, %valid_o.prb, %3
    inst @stream_delay.param1 (i1$ %clk_i, i1$ %rst_ni, i32$ %payload_i, i1$ %valid_i, i1$ %ready_i) -> (i1$ %ready_o, i32$ %payload_o, i1$ %valid_o)
    inst %stream_delay_tb.initial.695.0 () -> (i1$ %clk_i, i1$ %rst_ni)
    inst %stream_delay_tb.always.725.0 (i1$ %clk_i, i1$ %ready_o) -> (i32$ %payload_i)
}
