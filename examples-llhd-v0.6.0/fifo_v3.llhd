proc %fifo_v3.param1.always_comb.289.1 (i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i, i4$ %read_pointer_n, i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [16 x i32]$ %mem_q) -> (i32$ %data_o, i1$ %gate_clock, i4$ %read_pointer_n1, i4$ %write_pointer_n, i5$ %status_cnt_n, [16 x i32]$ %mem_n) {
0:
    %1 = prb i4$ %read_pointer_n1
    %read_pointer_n.shadow = var i4 %1
    br %body
body:
    %2 = prb i4$ %read_pointer_n1
    st i4* %read_pointer_n.shadow, %2
    %read_pointer_q1 = prb i4$ %read_pointer_q
    %3 = const time 0s 1e
    drv i4$ %read_pointer_n1, %read_pointer_q1, %3
    st i4* %read_pointer_n.shadow, %read_pointer_q1
    %write_pointer_q1 = prb i4$ %write_pointer_q
    %4 = const time 0s 1e
    drv i4$ %write_pointer_n, %write_pointer_q1, %4
    %status_cnt_q1 = prb i5$ %status_cnt_q
    %5 = const time 0s 1e
    drv i5$ %status_cnt_n, %status_cnt_q1, %5
    %6 = const i32 16
    %7 = const i32 0
    %8 = eq i32 %6, %7
    %data_i1 = prb i32$ %data_i
    %mem_q1 = prb [16 x i32]$ %mem_q
    %read_pointer_q2 = prb i4$ %read_pointer_q
    %9 = const i32 0
    %10 = [16 x i32 %9]
    %11 = shr [16 x i32] %mem_q1, [16 x i32] %10, i4 %read_pointer_q2
    %12 = extf i32, [16 x i32] %11, 0
    %13 = [i32 %12, %data_i1]
    %14 = mux [2 x i32] %13, i1 %8
    %15 = const time 0s 1e
    drv i32$ %data_o, %14, %15
    %mem_q2 = prb [16 x i32]$ %mem_q
    %16 = const time 0s 1e
    drv [16 x i32]$ %mem_n, %mem_q2, %16
    %17 = const i1 1
    %18 = const time 0s 1e
    drv i1$ %gate_clock, %17, %18
    %push_i1 = prb i1$ %push_i
    %full_o1 = prb i1$ %full_o
    %19 = not i1 %full_o1
    %20 = and i1 %push_i1, %19
    br %20, %if_false, %if_true
check:
    wait %body, %full_o, %empty_o, %data_i, %push_i, %pop_i, %read_pointer_n1, %read_pointer_q, %write_pointer_q, %status_cnt_q, %mem_q
if_true:
    %write_pointer_q2 = prb i4$ %write_pointer_q
    %21 = const i32 0
    %22 = [16 x i32 %21]
    %23 = sig [16 x i32] %22
    %24 = shr [16 x i32]$ %mem_n, [16 x i32]$ %23, i4 %write_pointer_q2
    %25 = extf i32$, [16 x i32]$ %24, 0
    %data_i2 = prb i32$ %data_i
    %26 = const time 0s 1e
    drv i32$ %25, %data_i2, %26
    %27 = const i1 0
    %28 = const time 0s 1e
    drv i1$ %gate_clock, %27, %28
    %29 = const i32 0
    %write_pointer_q3 = prb i4$ %write_pointer_q
    %30 = inss i32 %29, i4 %write_pointer_q3, 0, 4
    %31 = const i32 16
    %32 = const i1 0
    %33 = const i32 0
    %34 = shr i32 %31, i32 %33, i1 %32
    %35 = exts i4, i32 %34, 0, 4
    %36 = exts i1, i4 %35, 3, 1
    %37 = const i32 0
    %38 = not i32 %37
    %39 = [i32 %37, %38]
    %40 = mux [2 x i32] %39, i1 %36
    %41 = inss i32 %40, i4 %35, 0, 4
    %42 = const i32 1
    %43 = sub i32 %41, %42
    %44 = eq i32 %30, %43
    br %44, %if_false1, %if_true1
if_false:
    br %if_exit
if_exit:
    %pop_i1 = prb i1$ %pop_i
    %empty_o1 = prb i1$ %empty_o
    %45 = not i1 %empty_o1
    %46 = and i1 %pop_i1, %45
    br %46, %if_false2, %if_true2
if_true1:
    %47 = const i4 0
    %48 = const i1 0
    %49 = inss i4 %47, i1 %48, 0, 1
    %50 = const time 0s 1e
    drv i4$ %write_pointer_n, %49, %50
    br %if_exit1
if_false1:
    %51 = const i32 0
    %write_pointer_q4 = prb i4$ %write_pointer_q
    %52 = inss i32 %51, i4 %write_pointer_q4, 0, 4
    %53 = const i32 1
    %54 = add i32 %52, %53
    %55 = exts i4, i32 %54, 0, 4
    %56 = const time 0s 1e
    drv i4$ %write_pointer_n, %55, %56
    br %if_exit1
if_exit1:
    %57 = const i32 0
    %status_cnt_q2 = prb i5$ %status_cnt_q
    %58 = inss i32 %57, i5 %status_cnt_q2, 0, 5
    %59 = const i32 1
    %60 = add i32 %58, %59
    %61 = exts i5, i32 %60, 0, 5
    %62 = const time 0s 1e
    drv i5$ %status_cnt_n, %61, %62
    br %if_exit
if_true2:
    %63 = const i32 0
    %read_pointer_n2 = ld i4* %read_pointer_n.shadow
    %64 = inss i32 %63, i4 %read_pointer_n2, 0, 4
    %65 = const i32 16
    %66 = const i1 0
    %67 = const i32 0
    %68 = shr i32 %65, i32 %67, i1 %66
    %69 = exts i4, i32 %68, 0, 4
    %70 = exts i1, i4 %69, 3, 1
    %71 = const i32 0
    %72 = not i32 %71
    %73 = [i32 %71, %72]
    %74 = mux [2 x i32] %73, i1 %70
    %75 = inss i32 %74, i4 %69, 0, 4
    %76 = const i32 1
    %77 = sub i32 %75, %76
    %78 = eq i32 %64, %77
    br %78, %if_false3, %if_true3
if_false2:
    br %if_exit2
if_exit2:
    %push_i2 = prb i1$ %push_i
    %pop_i2 = prb i1$ %pop_i
    %79 = and i1 %push_i2, %pop_i2
    %full_o2 = prb i1$ %full_o
    %80 = not i1 %full_o2
    %81 = and i1 %79, %80
    %empty_o2 = prb i1$ %empty_o
    %82 = not i1 %empty_o2
    %83 = and i1 %81, %82
    br %83, %if_false4, %if_true4
if_true3:
    %84 = const i4 0
    %85 = const i1 0
    %86 = inss i4 %84, i1 %85, 0, 1
    %87 = const time 0s 1e
    drv i4$ %read_pointer_n1, %86, %87
    st i4* %read_pointer_n.shadow, %86
    br %if_exit3
if_false3:
    %88 = const i32 0
    %read_pointer_q3 = prb i4$ %read_pointer_q
    %89 = inss i32 %88, i4 %read_pointer_q3, 0, 4
    %90 = const i32 1
    %91 = add i32 %89, %90
    %92 = exts i4, i32 %91, 0, 4
    %93 = const time 0s 1e
    drv i4$ %read_pointer_n1, %92, %93
    st i4* %read_pointer_n.shadow, %92
    br %if_exit3
if_exit3:
    %94 = const i32 0
    %status_cnt_q3 = prb i5$ %status_cnt_q
    %95 = inss i32 %94, i5 %status_cnt_q3, 0, 5
    %96 = const i32 1
    %97 = sub i32 %95, %96
    %98 = exts i5, i32 %97, 0, 5
    %99 = const time 0s 1e
    drv i5$ %status_cnt_n, %98, %99
    br %if_exit2
if_true4:
    %status_cnt_q4 = prb i5$ %status_cnt_q
    %100 = const time 0s 1e
    drv i5$ %status_cnt_n, %status_cnt_q4, %100
    br %if_exit4
if_false4:
    br %if_exit4
if_exit4:
    %101 = const i1 0
    %102 = const i32 0
    %status_cnt_q5 = prb i5$ %status_cnt_q
    %103 = inss i32 %102, i5 %status_cnt_q5, 0, 5
    %104 = const i32 0
    %105 = eq i32 %103, %104
    %106 = and i1 %101, %105
    %push_i3 = prb i1$ %push_i
    %107 = and i1 %106, %push_i3
    br %107, %if_false5, %if_true5
if_true5:
    %data_i3 = prb i32$ %data_i
    %108 = const time 0s 1e
    drv i32$ %data_o, %data_i3, %108
    %pop_i3 = prb i1$ %pop_i
    br %pop_i3, %if_false6, %if_true6
if_false5:
    br %if_exit5
if_exit5:
    br %check
if_true6:
    %status_cnt_q6 = prb i5$ %status_cnt_q
    %109 = const time 0s 1e
    drv i5$ %status_cnt_n, %status_cnt_q6, %109
    %read_pointer_q4 = prb i4$ %read_pointer_q
    %110 = const time 0s 1e
    drv i4$ %read_pointer_n1, %read_pointer_q4, %110
    st i4* %read_pointer_n.shadow, %read_pointer_q4
    %write_pointer_q5 = prb i4$ %write_pointer_q
    %111 = const time 0s 1e
    drv i4$ %write_pointer_n, %write_pointer_q5, %111
    br %if_exit6
if_false6:
    br %if_exit6
if_exit6:
    br %if_exit5
}

proc %fifo_v3.param1.always_ff.290.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i4 0
    %9 = const i1 0
    %10 = inss i4 %8, i1 %9, 0, 1
    %11 = const time 0s 1d
    drv i4$ %read_pointer_q, %10, %11
    %12 = const i4 0
    %13 = const i1 0
    %14 = inss i4 %12, i1 %13, 0, 1
    %15 = const time 0s 1d
    drv i4$ %write_pointer_q, %14, %15
    %16 = const i5 0
    %17 = const i1 0
    %18 = inss i5 %16, i1 %17, 0, 1
    %19 = const time 0s 1d
    drv i5$ %status_cnt_q, %18, %19
    br %if_exit
if_false:
    %flush_i1 = prb i1$ %flush_i
    br %flush_i1, %if_false1, %if_true1
if_exit:
    br %0
if_true1:
    %20 = const i4 0
    %21 = const i1 0
    %22 = inss i4 %20, i1 %21, 0, 1
    %23 = const time 0s 1d
    drv i4$ %read_pointer_q, %22, %23
    %24 = const i4 0
    %25 = const i1 0
    %26 = inss i4 %24, i1 %25, 0, 1
    %27 = const time 0s 1d
    drv i4$ %write_pointer_q, %26, %27
    %28 = const i5 0
    %29 = const i1 0
    %30 = inss i5 %28, i1 %29, 0, 1
    %31 = const time 0s 1d
    drv i5$ %status_cnt_q, %30, %31
    br %if_exit1
if_false1:
    %read_pointer_n1 = prb i4$ %read_pointer_n
    %32 = const time 0s 1d
    drv i4$ %read_pointer_q, %read_pointer_n1, %32
    %write_pointer_n1 = prb i4$ %write_pointer_n
    %33 = const time 0s 1d
    drv i4$ %write_pointer_q, %write_pointer_n1, %33
    %status_cnt_n1 = prb i5$ %status_cnt_n
    %34 = const time 0s 1d
    drv i5$ %status_cnt_q, %status_cnt_n1, %34
    br %if_exit1
if_exit1:
    br %if_exit
}

proc %fifo_v3.param1.always_ff.291.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [16 x i32]$ %mem_n) -> ([16 x i32]$ %mem_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i512 0
    %9 = const i1 0
    %10 = inss i512 %8, i1 %9, 0, 1
    %11 = const i32 0
    %12 = const i512 0
    %13 = shr i512 %10, i512 %12, i32 %11
    %14 = exts i32, i512 %13, 0, 32
    %15 = const i512 0
    %16 = const i1 0
    %17 = inss i512 %15, i1 %16, 0, 1
    %18 = const i32 32
    %19 = const i512 0
    %20 = shr i512 %17, i512 %19, i32 %18
    %21 = exts i32, i512 %20, 0, 32
    %22 = const i512 0
    %23 = const i1 0
    %24 = inss i512 %22, i1 %23, 0, 1
    %25 = const i32 64
    %26 = const i512 0
    %27 = shr i512 %24, i512 %26, i32 %25
    %28 = exts i32, i512 %27, 0, 32
    %29 = const i512 0
    %30 = const i1 0
    %31 = inss i512 %29, i1 %30, 0, 1
    %32 = const i32 96
    %33 = const i512 0
    %34 = shr i512 %31, i512 %33, i32 %32
    %35 = exts i32, i512 %34, 0, 32
    %36 = const i512 0
    %37 = const i1 0
    %38 = inss i512 %36, i1 %37, 0, 1
    %39 = const i32 128
    %40 = const i512 0
    %41 = shr i512 %38, i512 %40, i32 %39
    %42 = exts i32, i512 %41, 0, 32
    %43 = const i512 0
    %44 = const i1 0
    %45 = inss i512 %43, i1 %44, 0, 1
    %46 = const i32 160
    %47 = const i512 0
    %48 = shr i512 %45, i512 %47, i32 %46
    %49 = exts i32, i512 %48, 0, 32
    %50 = const i512 0
    %51 = const i1 0
    %52 = inss i512 %50, i1 %51, 0, 1
    %53 = const i32 192
    %54 = const i512 0
    %55 = shr i512 %52, i512 %54, i32 %53
    %56 = exts i32, i512 %55, 0, 32
    %57 = const i512 0
    %58 = const i1 0
    %59 = inss i512 %57, i1 %58, 0, 1
    %60 = const i32 224
    %61 = const i512 0
    %62 = shr i512 %59, i512 %61, i32 %60
    %63 = exts i32, i512 %62, 0, 32
    %64 = const i512 0
    %65 = const i1 0
    %66 = inss i512 %64, i1 %65, 0, 1
    %67 = const i32 256
    %68 = const i512 0
    %69 = shr i512 %66, i512 %68, i32 %67
    %70 = exts i32, i512 %69, 0, 32
    %71 = const i512 0
    %72 = const i1 0
    %73 = inss i512 %71, i1 %72, 0, 1
    %74 = const i32 288
    %75 = const i512 0
    %76 = shr i512 %73, i512 %75, i32 %74
    %77 = exts i32, i512 %76, 0, 32
    %78 = const i512 0
    %79 = const i1 0
    %80 = inss i512 %78, i1 %79, 0, 1
    %81 = const i32 320
    %82 = const i512 0
    %83 = shr i512 %80, i512 %82, i32 %81
    %84 = exts i32, i512 %83, 0, 32
    %85 = const i512 0
    %86 = const i1 0
    %87 = inss i512 %85, i1 %86, 0, 1
    %88 = const i32 352
    %89 = const i512 0
    %90 = shr i512 %87, i512 %89, i32 %88
    %91 = exts i32, i512 %90, 0, 32
    %92 = const i512 0
    %93 = const i1 0
    %94 = inss i512 %92, i1 %93, 0, 1
    %95 = const i32 384
    %96 = const i512 0
    %97 = shr i512 %94, i512 %96, i32 %95
    %98 = exts i32, i512 %97, 0, 32
    %99 = const i512 0
    %100 = const i1 0
    %101 = inss i512 %99, i1 %100, 0, 1
    %102 = const i32 416
    %103 = const i512 0
    %104 = shr i512 %101, i512 %103, i32 %102
    %105 = exts i32, i512 %104, 0, 32
    %106 = const i512 0
    %107 = const i1 0
    %108 = inss i512 %106, i1 %107, 0, 1
    %109 = const i32 448
    %110 = const i512 0
    %111 = shr i512 %108, i512 %110, i32 %109
    %112 = exts i32, i512 %111, 0, 32
    %113 = const i512 0
    %114 = const i1 0
    %115 = inss i512 %113, i1 %114, 0, 1
    %116 = const i32 480
    %117 = const i512 0
    %118 = shr i512 %115, i512 %117, i32 %116
    %119 = exts i32, i512 %118, 0, 32
    %120 = [i32 %14, %21, %28, %35, %42, %49, %56, %63, %70, %77, %84, %91, %98, %105, %112, %119]
    %121 = const time 0s 1d
    drv [16 x i32]$ %mem_q, %120, %121
    br %if_exit
if_false:
    %gate_clock1 = prb i1$ %gate_clock
    %122 = not i1 %gate_clock1
    br %122, %if_false1, %if_true1
if_exit:
    br %0
if_true1:
    %mem_n1 = prb [16 x i32]$ %mem_n
    %123 = const time 0s 1d
    drv [16 x i32]$ %mem_q, %mem_n1, %123
    br %if_exit1
if_false1:
    br %if_exit1
if_exit1:
    br %if_exit
}

proc %fifo_v3.param1.initial.292.1 () -> () {
0:
    halt
}

entity @fifo_v3.param1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i1$ %testmode_i, i32$ %data_i, i1$ %push_i, i1$ %pop_i) -> (i1$ %full_o, i1$ %empty_o, i4$ %usage_o, i32$ %data_o) {
    %0 = const i1 0
    %gate_clock = sig i1 %0
    %1 = const i4 0
    %read_pointer_n = sig i4 %1
    %2 = const i4 0
    %read_pointer_q = sig i4 %2
    %3 = const i4 0
    %write_pointer_n = sig i4 %3
    %4 = const i4 0
    %write_pointer_q = sig i4 %4
    %5 = const i5 0
    %status_cnt_n = sig i5 %5
    %6 = const i5 0
    %status_cnt_q = sig i5 %6
    %7 = const i32 0
    %8 = const i32 0
    %9 = const i32 0
    %10 = const i32 0
    %11 = const i32 0
    %12 = const i32 0
    %13 = const i32 0
    %14 = const i32 0
    %15 = const i32 0
    %16 = const i32 0
    %17 = const i32 0
    %18 = const i32 0
    %19 = const i32 0
    %20 = const i32 0
    %21 = const i32 0
    %22 = const i32 0
    %23 = [i32 %7, %8, %9, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22]
    %mem_n = sig [16 x i32] %23
    %24 = const i32 0
    %25 = const i32 0
    %26 = const i32 0
    %27 = const i32 0
    %28 = const i32 0
    %29 = const i32 0
    %30 = const i32 0
    %31 = const i32 0
    %32 = const i32 0
    %33 = const i32 0
    %34 = const i32 0
    %35 = const i32 0
    %36 = const i32 0
    %37 = const i32 0
    %38 = const i32 0
    %39 = const i32 0
    %40 = [i32 %24, %25, %26, %27, %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39]
    %mem_q = sig [16 x i32] %40
    %status_cnt_q1 = prb i5$ %status_cnt_q
    %41 = const i1 0
    %42 = const i5 0
    %43 = shr i5 %status_cnt_q1, i5 %42, i1 %41
    %44 = exts i4, i5 %43, 0, 4
    %45 = const time 0s 1e
    drv i4$ %usage_o, %44, %45
    %status_cnt_q2 = prb i5$ %status_cnt_q
    %46 = const i32 16
    %47 = const i1 0
    %48 = const i32 0
    %49 = shr i32 %46, i32 %48, i1 %47
    %50 = exts i5, i32 %49, 0, 5
    %51 = eq i5 %status_cnt_q2, %50
    %52 = const time 0s 1e
    drv i1$ %full_o, %51, %52
    %53 = const i32 0
    %status_cnt_q3 = prb i5$ %status_cnt_q
    %54 = inss i32 %53, i5 %status_cnt_q3, 0, 5
    %55 = const i32 0
    %56 = eq i32 %54, %55
    %57 = const i1 0
    %push_i1 = prb i1$ %push_i
    %58 = and i1 %57, %push_i1
    %59 = not i1 %58
    %60 = and i1 %56, %59
    %61 = const time 0s 1e
    drv i1$ %empty_o, %60, %61
    inst %fifo_v3.param1.always_comb.289.1 (i1$ %full_o, i1$ %empty_o, i32$ %data_i, i1$ %push_i, i1$ %pop_i, i4$ %read_pointer_n, i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q, [16 x i32]$ %mem_q) -> (i32$ %data_o, i1$ %gate_clock, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n, [16 x i32]$ %mem_n)
    inst %fifo_v3.param1.always_ff.290.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %flush_i, i4$ %read_pointer_n, i4$ %write_pointer_n, i5$ %status_cnt_n) -> (i4$ %read_pointer_q, i4$ %write_pointer_q, i5$ %status_cnt_q)
    inst %fifo_v3.param1.always_ff.291.1 (i1$ %clk_i, i1$ %rst_ni, i1$ %gate_clock, [16 x i32]$ %mem_n) -> ([16 x i32]$ %mem_q)
    inst %fifo_v3.param1.initial.292.1 () -> ()
}

proc %fifo_v3_tb.initial.240.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i32 0
    %2 = exts i1, i32 %1, 0, 1
    %3 = const time 1ns
    drv i1$ %rst_ni, %2, %3
    %4 = const i32 1
    %5 = exts i1, i32 %4, 0, 1
    %6 = const time 2ns
    drv i1$ %rst_ni, %5, %6
    %7 = const time 4ns
    wait %8 for %7
8:
    %9 = const i32 1000000
    %loop_count = var i32 %9
    br %loop_body
loop_body:
    %10 = ld i32* %loop_count
    %11 = const i32 0
    %12 = neq i32 %10, %11
    br %12, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %13 = const i32 1
    %14 = exts i1, i32 %13, 0, 1
    %15 = const time 1ns
    drv i1$ %clk_i, %14, %15
    %16 = const i32 0
    %17 = exts i1, i32 %16, 0, 1
    %18 = const time 2ns
    drv i1$ %clk_i, %17, %18
    %19 = const time 2ns
    wait %20 for %19
20:
    %21 = ld i32* %loop_count
    %22 = const i32 1
    %23 = sub i32 %21, %22
    st i32* %loop_count, %23
    br %loop_body
}

proc %fifo_v3_tb.always_comb.241.0 (i1$ %full_o) -> (i1$ %push_i) {
0:
    br %body
body:
    %full_o1 = prb i1$ %full_o
    %1 = not i1 %full_o1
    %2 = const time 250ps
    drv i1$ %push_i, %1, %2
    br %check
check:
    wait %body, %full_o
}

proc %fifo_v3_tb.always.242.0 (i1$ %clk_i, i1$ %full_o, i32$ %data_i) -> (i32$ %data_i1) {
0:
    %1 = prb i32$ %data_i1
    %data_i.shadow = var i32 %1
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    wait %check, %clk_i
check:
    %2 = prb i32$ %data_i1
    st i32* %data_i.shadow, %2
    %clk_i2 = prb i1$ %clk_i
    %3 = const i1 0
    %4 = eq i1 %clk_i1, %3
    %5 = neq i1 %clk_i2, %3
    %posedge = and i1 %4, %5
    %full_o1 = prb i1$ %full_o
    %6 = not i1 %full_o1
    %iff = and i1 %posedge, %6
    br %iff, %init, %event
event:
    %data_i2 = ld i32* %data_i.shadow
    %7 = const i32 1
    %8 = add i32 %data_i2, %7
    %9 = const time 250ps
    drv i32$ %data_i1, %8, %9
    br %0
}

proc %fifo_v3_tb.always_comb.243.0 (i1$ %empty_o) -> (i1$ %pop_i) {
0:
    br %body
body:
    %empty_o1 = prb i1$ %empty_o
    %1 = not i1 %empty_o1
    %2 = const time 250ps
    drv i1$ %pop_i, %1, %2
    br %check
check:
    wait %body, %empty_o
}

entity @fifo_v3_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %2 = const i1 0
    %full_o = sig i1 %2
    %3 = const i1 0
    %empty_o = sig i1 %3
    %4 = const i32 0
    %data_i = sig i32 %4
    %5 = const i1 0
    %push_i = sig i1 %5
    %6 = const i32 0
    %data_o = sig i32 %6
    %7 = const i1 0
    %pop_i = sig i1 %7
    %clk_i1 = prb i1$ %clk_i
    %8 = const i1 0
    %9 = sig i1 %8
    %10 = const time 0s 1e
    drv i1$ %9, %clk_i1, %10
    %rst_ni1 = prb i1$ %rst_ni
    %11 = const i1 0
    %12 = sig i1 %11
    %13 = const time 0s 1e
    drv i1$ %12, %rst_ni1, %13
    %14 = const i1 0
    %15 = const i1 0
    %16 = sig i1 %15
    %17 = const time 0s 1e
    drv i1$ %16, %14, %17
    %18 = const i1 0
    %19 = const i1 0
    %20 = sig i1 %19
    %21 = const time 0s 1e
    drv i1$ %20, %18, %21
    %22 = const i4 0
    %23 = sig i4 %22
    %data_i1 = prb i32$ %data_i
    %24 = const i32 0
    %25 = sig i32 %24
    %26 = const time 0s 1e
    drv i32$ %25, %data_i1, %26
    %push_i1 = prb i1$ %push_i
    %27 = const i1 0
    %28 = sig i1 %27
    %29 = const time 0s 1e
    drv i1$ %28, %push_i1, %29
    %pop_i1 = prb i1$ %pop_i
    %30 = const i1 0
    %31 = sig i1 %30
    %32 = const time 0s 1e
    drv i1$ %31, %pop_i1, %32
    inst @fifo_v3.param1 (i1$ %9, i1$ %12, i1$ %16, i1$ %20, i32$ %25, i1$ %28, i1$ %31) -> (i1$ %full_o, i1$ %empty_o, i4$ %23, i32$ %data_o)
    inst %fifo_v3_tb.initial.240.0 () -> (i1$ %clk_i, i1$ %rst_ni)
    inst %fifo_v3_tb.always_comb.241.0 (i1$ %full_o) -> (i1$ %push_i)
    inst %fifo_v3_tb.always.242.0 (i1$ %clk_i, i1$ %full_o, i32$ %data_i) -> (i32$ %data_i)
    inst %fifo_v3_tb.always_comb.243.0 (i1$ %empty_o) -> (i1$ %pop_i)
}
