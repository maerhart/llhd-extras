proc %lzc.param1.initial.262.1 () -> () {
0:
    halt
}

proc %lzc.param1.always_comb.271.1 (i16$ %in_i) -> (i16$ %in_tmp) {
0:
    br %body
body:
    %1 = const i32 0
    %i = var i32 %1
    br %loop_body
check:
    wait %body, %in_i
loop_body:
    %i1 = ld i32* %i
    %2 = const i32 16
    %3 = slt i32 %i1, %2
    br %3, %loop_exit, %loop_continue
loop_exit:
    br %check
loop_continue:
    %i2 = ld i32* %i
    %4 = const i16 0
    %5 = sig i16 %4
    %6 = shr i16$ %in_tmp, i16$ %5, i32 %i2
    %7 = exts i1$, i16$ %6, 0, 1
    %8 = const i32 1
    %9 = const i32 0
    %10 = neq i32 %8, %9
    %in_i1 = prb i16$ %in_i
    %11 = const i32 16
    %12 = const i32 1
    %13 = sub i32 %11, %12
    %i3 = ld i32* %i
    %14 = sub i32 %13, %i3
    %15 = const i16 0
    %16 = shr i16 %in_i1, i16 %15, i32 %14
    %17 = exts i1, i16 %16, 0, 1
    %in_i2 = prb i16$ %in_i
    %i4 = ld i32* %i
    %18 = const i16 0
    %19 = shr i16 %in_i2, i16 %18, i32 %i4
    %20 = exts i1, i16 %19, 0, 1
    %21 = [i1 %20, %17]
    %22 = mux [2 x i1] %21, i1 %10
    %23 = const time 0s 1e
    drv i1$ %7, %22, %23
    %i5 = ld i32* %i
    %24 = const i32 1
    %25 = add i32 %i5, %24
    st i32* %i, %25
    %i6 = ld i32* %i
    %26 = const i32 0
    %27 = neq i32 %i6, %26
    br %loop_body
}

entity @lzc.param1 (i16$ %in_i) -> (i4$ %cnt_o, i1$ %empty_o) {
    %0 = const i4 0
    %1 = const i4 0
    %2 = const i4 0
    %3 = const i4 0
    %4 = const i4 0
    %5 = const i4 0
    %6 = const i4 0
    %7 = const i4 0
    %8 = const i4 0
    %9 = const i4 0
    %10 = const i4 0
    %11 = const i4 0
    %12 = const i4 0
    %13 = const i4 0
    %14 = const i4 0
    %15 = const i4 0
    %16 = [i4 %0, %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15]
    %index_lut = sig [16 x i4] %16
    %17 = const i16 0
    %sel_nodes = sig i16 %17
    %18 = const i4 0
    %19 = const i4 0
    %20 = const i4 0
    %21 = const i4 0
    %22 = const i4 0
    %23 = const i4 0
    %24 = const i4 0
    %25 = const i4 0
    %26 = const i4 0
    %27 = const i4 0
    %28 = const i4 0
    %29 = const i4 0
    %30 = const i4 0
    %31 = const i4 0
    %32 = const i4 0
    %33 = const i4 0
    %34 = [i4 %18, %19, %20, %21, %22, %23, %24, %25, %26, %27, %28, %29, %30, %31, %32, %33]
    %index_nodes = sig [16 x i4] %34
    %35 = const i16 0
    %in_tmp = sig i16 %35
    %36 = const i32 4
    %37 = const i32 0
    %38 = sgt i32 %36, %37
    %index_nodes1 = prb [16 x i4]$ %index_nodes
    %39 = const i32 0
    %40 = const i4 0
    %41 = [16 x i4 %40]
    %42 = shr [16 x i4] %index_nodes1, [16 x i4] %41, i32 %39
    %43 = extf i4, [16 x i4] %42, 0
    %44 = const i1 0
    %45 = const i1 0
    %46 = inss i1 %44, i1 %45, 0, 1
    %47 = const i4 0
    %48 = inss i4 %47, i1 %46, 0, 1
    %49 = inss i4 %48, i1 %46, 1, 1
    %50 = inss i4 %49, i1 %46, 2, 1
    %51 = inss i4 %50, i1 %46, 3, 1
    %52 = [i4 %51, %43]
    %53 = mux [2 x i4] %52, i1 %38
    %54 = const time 0s 1e
    drv i4$ %cnt_o, %53, %54
    %55 = const i32 4
    %56 = const i32 0
    %57 = sgt i32 %55, %56
    %sel_nodes1 = prb i16$ %sel_nodes
    %58 = const i32 0
    %59 = const i16 0
    %60 = shr i16 %sel_nodes1, i16 %59, i32 %58
    %61 = exts i1, i16 %60, 0, 1
    %62 = not i1 %61
    %in_i1 = prb i16$ %in_i
    %63 = exts i1, i16 %in_i1, 0, 1
    %64 = exts i1, i16 %in_i1, 1, 1
    %65 = or i1 %63, %64
    %66 = exts i1, i16 %in_i1, 2, 1
    %67 = or i1 %65, %66
    %68 = exts i1, i16 %in_i1, 3, 1
    %69 = or i1 %67, %68
    %70 = exts i1, i16 %in_i1, 4, 1
    %71 = or i1 %69, %70
    %72 = exts i1, i16 %in_i1, 5, 1
    %73 = or i1 %71, %72
    %74 = exts i1, i16 %in_i1, 6, 1
    %75 = or i1 %73, %74
    %76 = exts i1, i16 %in_i1, 7, 1
    %77 = or i1 %75, %76
    %78 = exts i1, i16 %in_i1, 8, 1
    %79 = or i1 %77, %78
    %80 = exts i1, i16 %in_i1, 9, 1
    %81 = or i1 %79, %80
    %82 = exts i1, i16 %in_i1, 10, 1
    %83 = or i1 %81, %82
    %84 = exts i1, i16 %in_i1, 11, 1
    %85 = or i1 %83, %84
    %86 = exts i1, i16 %in_i1, 12, 1
    %87 = or i1 %85, %86
    %88 = exts i1, i16 %in_i1, 13, 1
    %89 = or i1 %87, %88
    %90 = exts i1, i16 %in_i1, 14, 1
    %91 = or i1 %89, %90
    %92 = exts i1, i16 %in_i1, 15, 1
    %93 = or i1 %91, %92
    %94 = not i1 %93
    %95 = [i1 %94, %62]
    %96 = mux [2 x i1] %95, i1 %57
    %97 = const time 0s 1e
    drv i1$ %empty_o, %96, %97
    %98 = const i32 0
    %99 = const i4 0
    %100 = [16 x i4 %99]
    %101 = sig [16 x i4] %100
    %102 = shr [16 x i4]$ %index_lut, [16 x i4]$ %101, i32 %98
    %103 = extf i4$, [16 x i4]$ %102, 0
    %104 = const i32 0
    %105 = exts i4, i32 %104, 0, 4
    %106 = const time 0s 1e
    drv i4$ %103, %105, %106
    %107 = const i32 1
    %108 = const i4 0
    %109 = [16 x i4 %108]
    %110 = sig [16 x i4] %109
    %111 = shr [16 x i4]$ %index_lut, [16 x i4]$ %110, i32 %107
    %112 = extf i4$, [16 x i4]$ %111, 0
    %113 = const i32 1
    %114 = exts i4, i32 %113, 0, 4
    %115 = const time 0s 1e
    drv i4$ %112, %114, %115
    %116 = const i32 2
    %117 = const i4 0
    %118 = [16 x i4 %117]
    %119 = sig [16 x i4] %118
    %120 = shr [16 x i4]$ %index_lut, [16 x i4]$ %119, i32 %116
    %121 = extf i4$, [16 x i4]$ %120, 0
    %122 = const i32 2
    %123 = exts i4, i32 %122, 0, 4
    %124 = const time 0s 1e
    drv i4$ %121, %123, %124
    %125 = const i32 3
    %126 = const i4 0
    %127 = [16 x i4 %126]
    %128 = sig [16 x i4] %127
    %129 = shr [16 x i4]$ %index_lut, [16 x i4]$ %128, i32 %125
    %130 = extf i4$, [16 x i4]$ %129, 0
    %131 = const i32 3
    %132 = exts i4, i32 %131, 0, 4
    %133 = const time 0s 1e
    drv i4$ %130, %132, %133
    %134 = const i32 4
    %135 = const i4 0
    %136 = [16 x i4 %135]
    %137 = sig [16 x i4] %136
    %138 = shr [16 x i4]$ %index_lut, [16 x i4]$ %137, i32 %134
    %139 = extf i4$, [16 x i4]$ %138, 0
    %140 = const i32 4
    %141 = exts i4, i32 %140, 0, 4
    %142 = const time 0s 1e
    drv i4$ %139, %141, %142
    %143 = const i32 5
    %144 = const i4 0
    %145 = [16 x i4 %144]
    %146 = sig [16 x i4] %145
    %147 = shr [16 x i4]$ %index_lut, [16 x i4]$ %146, i32 %143
    %148 = extf i4$, [16 x i4]$ %147, 0
    %149 = const i32 5
    %150 = exts i4, i32 %149, 0, 4
    %151 = const time 0s 1e
    drv i4$ %148, %150, %151
    %152 = const i32 6
    %153 = const i4 0
    %154 = [16 x i4 %153]
    %155 = sig [16 x i4] %154
    %156 = shr [16 x i4]$ %index_lut, [16 x i4]$ %155, i32 %152
    %157 = extf i4$, [16 x i4]$ %156, 0
    %158 = const i32 6
    %159 = exts i4, i32 %158, 0, 4
    %160 = const time 0s 1e
    drv i4$ %157, %159, %160
    %161 = const i32 7
    %162 = const i4 0
    %163 = [16 x i4 %162]
    %164 = sig [16 x i4] %163
    %165 = shr [16 x i4]$ %index_lut, [16 x i4]$ %164, i32 %161
    %166 = extf i4$, [16 x i4]$ %165, 0
    %167 = const i32 7
    %168 = exts i4, i32 %167, 0, 4
    %169 = const time 0s 1e
    drv i4$ %166, %168, %169
    %170 = const i32 8
    %171 = const i4 0
    %172 = [16 x i4 %171]
    %173 = sig [16 x i4] %172
    %174 = shr [16 x i4]$ %index_lut, [16 x i4]$ %173, i32 %170
    %175 = extf i4$, [16 x i4]$ %174, 0
    %176 = const i32 8
    %177 = exts i4, i32 %176, 0, 4
    %178 = const time 0s 1e
    drv i4$ %175, %177, %178
    %179 = const i32 9
    %180 = const i4 0
    %181 = [16 x i4 %180]
    %182 = sig [16 x i4] %181
    %183 = shr [16 x i4]$ %index_lut, [16 x i4]$ %182, i32 %179
    %184 = extf i4$, [16 x i4]$ %183, 0
    %185 = const i32 9
    %186 = exts i4, i32 %185, 0, 4
    %187 = const time 0s 1e
    drv i4$ %184, %186, %187
    %188 = const i32 10
    %189 = const i4 0
    %190 = [16 x i4 %189]
    %191 = sig [16 x i4] %190
    %192 = shr [16 x i4]$ %index_lut, [16 x i4]$ %191, i32 %188
    %193 = extf i4$, [16 x i4]$ %192, 0
    %194 = const i32 10
    %195 = exts i4, i32 %194, 0, 4
    %196 = const time 0s 1e
    drv i4$ %193, %195, %196
    %197 = const i32 11
    %198 = const i4 0
    %199 = [16 x i4 %198]
    %200 = sig [16 x i4] %199
    %201 = shr [16 x i4]$ %index_lut, [16 x i4]$ %200, i32 %197
    %202 = extf i4$, [16 x i4]$ %201, 0
    %203 = const i32 11
    %204 = exts i4, i32 %203, 0, 4
    %205 = const time 0s 1e
    drv i4$ %202, %204, %205
    %206 = const i32 12
    %207 = const i4 0
    %208 = [16 x i4 %207]
    %209 = sig [16 x i4] %208
    %210 = shr [16 x i4]$ %index_lut, [16 x i4]$ %209, i32 %206
    %211 = extf i4$, [16 x i4]$ %210, 0
    %212 = const i32 12
    %213 = exts i4, i32 %212, 0, 4
    %214 = const time 0s 1e
    drv i4$ %211, %213, %214
    %215 = const i32 13
    %216 = const i4 0
    %217 = [16 x i4 %216]
    %218 = sig [16 x i4] %217
    %219 = shr [16 x i4]$ %index_lut, [16 x i4]$ %218, i32 %215
    %220 = extf i4$, [16 x i4]$ %219, 0
    %221 = const i32 13
    %222 = exts i4, i32 %221, 0, 4
    %223 = const time 0s 1e
    drv i4$ %220, %222, %223
    %224 = const i32 14
    %225 = const i4 0
    %226 = [16 x i4 %225]
    %227 = sig [16 x i4] %226
    %228 = shr [16 x i4]$ %index_lut, [16 x i4]$ %227, i32 %224
    %229 = extf i4$, [16 x i4]$ %228, 0
    %230 = const i32 14
    %231 = exts i4, i32 %230, 0, 4
    %232 = const time 0s 1e
    drv i4$ %229, %231, %232
    %233 = const i32 15
    %234 = const i4 0
    %235 = [16 x i4 %234]
    %236 = sig [16 x i4] %235
    %237 = shr [16 x i4]$ %index_lut, [16 x i4]$ %236, i32 %233
    %238 = extf i4$, [16 x i4]$ %237, 0
    %239 = const i32 15
    %240 = exts i4, i32 %239, 0, 4
    %241 = const time 0s 1e
    drv i4$ %238, %240, %241
    %242 = const i32 1
    %243 = const i32 0
    %244 = const i32 0
    %245 = shl i32 %242, i32 %244, i32 %243
    %246 = const i32 1
    %247 = sub i32 %245, %246
    %248 = const i32 0
    %249 = add i32 %247, %248
    %250 = const i16 0
    %251 = sig i16 %250
    %252 = shr i16$ %sel_nodes, i16$ %251, i32 %249
    %253 = exts i1$, i16$ %252, 0, 1
    %sel_nodes2 = prb i16$ %sel_nodes
    %254 = const i32 1
    %255 = const i32 0
    %256 = const i32 1
    %257 = add i32 %255, %256
    %258 = const i32 0
    %259 = shl i32 %254, i32 %258, i32 %257
    %260 = const i32 1
    %261 = sub i32 %259, %260
    %262 = const i32 0
    %263 = const i32 2
    %264 = smul i32 %262, %263
    %265 = add i32 %261, %264
    %266 = const i16 0
    %267 = shr i16 %sel_nodes2, i16 %266, i32 %265
    %268 = exts i1, i16 %267, 0, 1
    %sel_nodes3 = prb i16$ %sel_nodes
    %269 = const i32 1
    %270 = const i32 0
    %271 = const i32 1
    %272 = add i32 %270, %271
    %273 = const i32 0
    %274 = shl i32 %269, i32 %273, i32 %272
    %275 = const i32 1
    %276 = sub i32 %274, %275
    %277 = const i32 0
    %278 = const i32 2
    %279 = smul i32 %277, %278
    %280 = add i32 %276, %279
    %281 = const i32 1
    %282 = add i32 %280, %281
    %283 = const i16 0
    %284 = shr i16 %sel_nodes3, i16 %283, i32 %282
    %285 = exts i1, i16 %284, 0, 1
    %286 = or i1 %268, %285
    %287 = const time 0s 1e
    drv i1$ %253, %286, %287
    %288 = const i32 1
    %289 = const i32 0
    %290 = const i32 0
    %291 = shl i32 %288, i32 %290, i32 %289
    %292 = const i32 1
    %293 = sub i32 %291, %292
    %294 = const i32 0
    %295 = add i32 %293, %294
    %296 = const i4 0
    %297 = [16 x i4 %296]
    %298 = sig [16 x i4] %297
    %299 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %298, i32 %295
    %300 = extf i4$, [16 x i4]$ %299, 0
    %sel_nodes4 = prb i16$ %sel_nodes
    %301 = const i32 1
    %302 = const i32 0
    %303 = const i32 1
    %304 = add i32 %302, %303
    %305 = const i32 0
    %306 = shl i32 %301, i32 %305, i32 %304
    %307 = const i32 1
    %308 = sub i32 %306, %307
    %309 = const i32 0
    %310 = const i32 2
    %311 = smul i32 %309, %310
    %312 = add i32 %308, %311
    %313 = const i16 0
    %314 = shr i16 %sel_nodes4, i16 %313, i32 %312
    %315 = exts i1, i16 %314, 0, 1
    %316 = const i1 1
    %317 = eq i1 %315, %316
    %index_nodes2 = prb [16 x i4]$ %index_nodes
    %318 = const i32 1
    %319 = const i32 0
    %320 = const i32 1
    %321 = add i32 %319, %320
    %322 = const i32 0
    %323 = shl i32 %318, i32 %322, i32 %321
    %324 = const i32 1
    %325 = sub i32 %323, %324
    %326 = const i32 0
    %327 = const i32 2
    %328 = smul i32 %326, %327
    %329 = add i32 %325, %328
    %330 = const i4 0
    %331 = [16 x i4 %330]
    %332 = shr [16 x i4] %index_nodes2, [16 x i4] %331, i32 %329
    %333 = extf i4, [16 x i4] %332, 0
    %index_nodes3 = prb [16 x i4]$ %index_nodes
    %334 = const i32 1
    %335 = const i32 0
    %336 = const i32 1
    %337 = add i32 %335, %336
    %338 = const i32 0
    %339 = shl i32 %334, i32 %338, i32 %337
    %340 = const i32 1
    %341 = sub i32 %339, %340
    %342 = const i32 0
    %343 = const i32 2
    %344 = smul i32 %342, %343
    %345 = add i32 %341, %344
    %346 = const i32 1
    %347 = add i32 %345, %346
    %348 = const i4 0
    %349 = [16 x i4 %348]
    %350 = shr [16 x i4] %index_nodes3, [16 x i4] %349, i32 %347
    %351 = extf i4, [16 x i4] %350, 0
    %352 = [i4 %351, %333]
    %353 = mux [2 x i4] %352, i1 %317
    %354 = const time 0s 1e
    drv i4$ %300, %353, %354
    %355 = const i32 1
    %356 = const i32 1
    %357 = const i32 0
    %358 = shl i32 %355, i32 %357, i32 %356
    %359 = const i32 1
    %360 = sub i32 %358, %359
    %361 = const i32 0
    %362 = add i32 %360, %361
    %363 = const i16 0
    %364 = sig i16 %363
    %365 = shr i16$ %sel_nodes, i16$ %364, i32 %362
    %366 = exts i1$, i16$ %365, 0, 1
    %sel_nodes5 = prb i16$ %sel_nodes
    %367 = const i32 1
    %368 = const i32 1
    %369 = const i32 1
    %370 = add i32 %368, %369
    %371 = const i32 0
    %372 = shl i32 %367, i32 %371, i32 %370
    %373 = const i32 1
    %374 = sub i32 %372, %373
    %375 = const i32 0
    %376 = const i32 2
    %377 = smul i32 %375, %376
    %378 = add i32 %374, %377
    %379 = const i16 0
    %380 = shr i16 %sel_nodes5, i16 %379, i32 %378
    %381 = exts i1, i16 %380, 0, 1
    %sel_nodes6 = prb i16$ %sel_nodes
    %382 = const i32 1
    %383 = const i32 1
    %384 = const i32 1
    %385 = add i32 %383, %384
    %386 = const i32 0
    %387 = shl i32 %382, i32 %386, i32 %385
    %388 = const i32 1
    %389 = sub i32 %387, %388
    %390 = const i32 0
    %391 = const i32 2
    %392 = smul i32 %390, %391
    %393 = add i32 %389, %392
    %394 = const i32 1
    %395 = add i32 %393, %394
    %396 = const i16 0
    %397 = shr i16 %sel_nodes6, i16 %396, i32 %395
    %398 = exts i1, i16 %397, 0, 1
    %399 = or i1 %381, %398
    %400 = const time 0s 1e
    drv i1$ %366, %399, %400
    %401 = const i32 1
    %402 = const i32 1
    %403 = const i32 0
    %404 = shl i32 %401, i32 %403, i32 %402
    %405 = const i32 1
    %406 = sub i32 %404, %405
    %407 = const i32 0
    %408 = add i32 %406, %407
    %409 = const i4 0
    %410 = [16 x i4 %409]
    %411 = sig [16 x i4] %410
    %412 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %411, i32 %408
    %413 = extf i4$, [16 x i4]$ %412, 0
    %sel_nodes7 = prb i16$ %sel_nodes
    %414 = const i32 1
    %415 = const i32 1
    %416 = const i32 1
    %417 = add i32 %415, %416
    %418 = const i32 0
    %419 = shl i32 %414, i32 %418, i32 %417
    %420 = const i32 1
    %421 = sub i32 %419, %420
    %422 = const i32 0
    %423 = const i32 2
    %424 = smul i32 %422, %423
    %425 = add i32 %421, %424
    %426 = const i16 0
    %427 = shr i16 %sel_nodes7, i16 %426, i32 %425
    %428 = exts i1, i16 %427, 0, 1
    %429 = const i1 1
    %430 = eq i1 %428, %429
    %index_nodes4 = prb [16 x i4]$ %index_nodes
    %431 = const i32 1
    %432 = const i32 1
    %433 = const i32 1
    %434 = add i32 %432, %433
    %435 = const i32 0
    %436 = shl i32 %431, i32 %435, i32 %434
    %437 = const i32 1
    %438 = sub i32 %436, %437
    %439 = const i32 0
    %440 = const i32 2
    %441 = smul i32 %439, %440
    %442 = add i32 %438, %441
    %443 = const i4 0
    %444 = [16 x i4 %443]
    %445 = shr [16 x i4] %index_nodes4, [16 x i4] %444, i32 %442
    %446 = extf i4, [16 x i4] %445, 0
    %index_nodes5 = prb [16 x i4]$ %index_nodes
    %447 = const i32 1
    %448 = const i32 1
    %449 = const i32 1
    %450 = add i32 %448, %449
    %451 = const i32 0
    %452 = shl i32 %447, i32 %451, i32 %450
    %453 = const i32 1
    %454 = sub i32 %452, %453
    %455 = const i32 0
    %456 = const i32 2
    %457 = smul i32 %455, %456
    %458 = add i32 %454, %457
    %459 = const i32 1
    %460 = add i32 %458, %459
    %461 = const i4 0
    %462 = [16 x i4 %461]
    %463 = shr [16 x i4] %index_nodes5, [16 x i4] %462, i32 %460
    %464 = extf i4, [16 x i4] %463, 0
    %465 = [i4 %464, %446]
    %466 = mux [2 x i4] %465, i1 %430
    %467 = const time 0s 1e
    drv i4$ %413, %466, %467
    %468 = const i32 1
    %469 = const i32 1
    %470 = const i32 0
    %471 = shl i32 %468, i32 %470, i32 %469
    %472 = const i32 1
    %473 = sub i32 %471, %472
    %474 = const i32 1
    %475 = add i32 %473, %474
    %476 = const i16 0
    %477 = sig i16 %476
    %478 = shr i16$ %sel_nodes, i16$ %477, i32 %475
    %479 = exts i1$, i16$ %478, 0, 1
    %sel_nodes8 = prb i16$ %sel_nodes
    %480 = const i32 1
    %481 = const i32 1
    %482 = const i32 1
    %483 = add i32 %481, %482
    %484 = const i32 0
    %485 = shl i32 %480, i32 %484, i32 %483
    %486 = const i32 1
    %487 = sub i32 %485, %486
    %488 = const i32 1
    %489 = const i32 2
    %490 = smul i32 %488, %489
    %491 = add i32 %487, %490
    %492 = const i16 0
    %493 = shr i16 %sel_nodes8, i16 %492, i32 %491
    %494 = exts i1, i16 %493, 0, 1
    %sel_nodes9 = prb i16$ %sel_nodes
    %495 = const i32 1
    %496 = const i32 1
    %497 = const i32 1
    %498 = add i32 %496, %497
    %499 = const i32 0
    %500 = shl i32 %495, i32 %499, i32 %498
    %501 = const i32 1
    %502 = sub i32 %500, %501
    %503 = const i32 1
    %504 = const i32 2
    %505 = smul i32 %503, %504
    %506 = add i32 %502, %505
    %507 = const i32 1
    %508 = add i32 %506, %507
    %509 = const i16 0
    %510 = shr i16 %sel_nodes9, i16 %509, i32 %508
    %511 = exts i1, i16 %510, 0, 1
    %512 = or i1 %494, %511
    %513 = const time 0s 1e
    drv i1$ %479, %512, %513
    %514 = const i32 1
    %515 = const i32 1
    %516 = const i32 0
    %517 = shl i32 %514, i32 %516, i32 %515
    %518 = const i32 1
    %519 = sub i32 %517, %518
    %520 = const i32 1
    %521 = add i32 %519, %520
    %522 = const i4 0
    %523 = [16 x i4 %522]
    %524 = sig [16 x i4] %523
    %525 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %524, i32 %521
    %526 = extf i4$, [16 x i4]$ %525, 0
    %sel_nodes10 = prb i16$ %sel_nodes
    %527 = const i32 1
    %528 = const i32 1
    %529 = const i32 1
    %530 = add i32 %528, %529
    %531 = const i32 0
    %532 = shl i32 %527, i32 %531, i32 %530
    %533 = const i32 1
    %534 = sub i32 %532, %533
    %535 = const i32 1
    %536 = const i32 2
    %537 = smul i32 %535, %536
    %538 = add i32 %534, %537
    %539 = const i16 0
    %540 = shr i16 %sel_nodes10, i16 %539, i32 %538
    %541 = exts i1, i16 %540, 0, 1
    %542 = const i1 1
    %543 = eq i1 %541, %542
    %index_nodes6 = prb [16 x i4]$ %index_nodes
    %544 = const i32 1
    %545 = const i32 1
    %546 = const i32 1
    %547 = add i32 %545, %546
    %548 = const i32 0
    %549 = shl i32 %544, i32 %548, i32 %547
    %550 = const i32 1
    %551 = sub i32 %549, %550
    %552 = const i32 1
    %553 = const i32 2
    %554 = smul i32 %552, %553
    %555 = add i32 %551, %554
    %556 = const i4 0
    %557 = [16 x i4 %556]
    %558 = shr [16 x i4] %index_nodes6, [16 x i4] %557, i32 %555
    %559 = extf i4, [16 x i4] %558, 0
    %index_nodes7 = prb [16 x i4]$ %index_nodes
    %560 = const i32 1
    %561 = const i32 1
    %562 = const i32 1
    %563 = add i32 %561, %562
    %564 = const i32 0
    %565 = shl i32 %560, i32 %564, i32 %563
    %566 = const i32 1
    %567 = sub i32 %565, %566
    %568 = const i32 1
    %569 = const i32 2
    %570 = smul i32 %568, %569
    %571 = add i32 %567, %570
    %572 = const i32 1
    %573 = add i32 %571, %572
    %574 = const i4 0
    %575 = [16 x i4 %574]
    %576 = shr [16 x i4] %index_nodes7, [16 x i4] %575, i32 %573
    %577 = extf i4, [16 x i4] %576, 0
    %578 = [i4 %577, %559]
    %579 = mux [2 x i4] %578, i1 %543
    %580 = const time 0s 1e
    drv i4$ %526, %579, %580
    %581 = const i32 1
    %582 = const i32 2
    %583 = const i32 0
    %584 = shl i32 %581, i32 %583, i32 %582
    %585 = const i32 1
    %586 = sub i32 %584, %585
    %587 = const i32 0
    %588 = add i32 %586, %587
    %589 = const i16 0
    %590 = sig i16 %589
    %591 = shr i16$ %sel_nodes, i16$ %590, i32 %588
    %592 = exts i1$, i16$ %591, 0, 1
    %sel_nodes11 = prb i16$ %sel_nodes
    %593 = const i32 1
    %594 = const i32 2
    %595 = const i32 1
    %596 = add i32 %594, %595
    %597 = const i32 0
    %598 = shl i32 %593, i32 %597, i32 %596
    %599 = const i32 1
    %600 = sub i32 %598, %599
    %601 = const i32 0
    %602 = const i32 2
    %603 = smul i32 %601, %602
    %604 = add i32 %600, %603
    %605 = const i16 0
    %606 = shr i16 %sel_nodes11, i16 %605, i32 %604
    %607 = exts i1, i16 %606, 0, 1
    %sel_nodes12 = prb i16$ %sel_nodes
    %608 = const i32 1
    %609 = const i32 2
    %610 = const i32 1
    %611 = add i32 %609, %610
    %612 = const i32 0
    %613 = shl i32 %608, i32 %612, i32 %611
    %614 = const i32 1
    %615 = sub i32 %613, %614
    %616 = const i32 0
    %617 = const i32 2
    %618 = smul i32 %616, %617
    %619 = add i32 %615, %618
    %620 = const i32 1
    %621 = add i32 %619, %620
    %622 = const i16 0
    %623 = shr i16 %sel_nodes12, i16 %622, i32 %621
    %624 = exts i1, i16 %623, 0, 1
    %625 = or i1 %607, %624
    %626 = const time 0s 1e
    drv i1$ %592, %625, %626
    %627 = const i32 1
    %628 = const i32 2
    %629 = const i32 0
    %630 = shl i32 %627, i32 %629, i32 %628
    %631 = const i32 1
    %632 = sub i32 %630, %631
    %633 = const i32 0
    %634 = add i32 %632, %633
    %635 = const i4 0
    %636 = [16 x i4 %635]
    %637 = sig [16 x i4] %636
    %638 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %637, i32 %634
    %639 = extf i4$, [16 x i4]$ %638, 0
    %sel_nodes13 = prb i16$ %sel_nodes
    %640 = const i32 1
    %641 = const i32 2
    %642 = const i32 1
    %643 = add i32 %641, %642
    %644 = const i32 0
    %645 = shl i32 %640, i32 %644, i32 %643
    %646 = const i32 1
    %647 = sub i32 %645, %646
    %648 = const i32 0
    %649 = const i32 2
    %650 = smul i32 %648, %649
    %651 = add i32 %647, %650
    %652 = const i16 0
    %653 = shr i16 %sel_nodes13, i16 %652, i32 %651
    %654 = exts i1, i16 %653, 0, 1
    %655 = const i1 1
    %656 = eq i1 %654, %655
    %index_nodes8 = prb [16 x i4]$ %index_nodes
    %657 = const i32 1
    %658 = const i32 2
    %659 = const i32 1
    %660 = add i32 %658, %659
    %661 = const i32 0
    %662 = shl i32 %657, i32 %661, i32 %660
    %663 = const i32 1
    %664 = sub i32 %662, %663
    %665 = const i32 0
    %666 = const i32 2
    %667 = smul i32 %665, %666
    %668 = add i32 %664, %667
    %669 = const i4 0
    %670 = [16 x i4 %669]
    %671 = shr [16 x i4] %index_nodes8, [16 x i4] %670, i32 %668
    %672 = extf i4, [16 x i4] %671, 0
    %index_nodes9 = prb [16 x i4]$ %index_nodes
    %673 = const i32 1
    %674 = const i32 2
    %675 = const i32 1
    %676 = add i32 %674, %675
    %677 = const i32 0
    %678 = shl i32 %673, i32 %677, i32 %676
    %679 = const i32 1
    %680 = sub i32 %678, %679
    %681 = const i32 0
    %682 = const i32 2
    %683 = smul i32 %681, %682
    %684 = add i32 %680, %683
    %685 = const i32 1
    %686 = add i32 %684, %685
    %687 = const i4 0
    %688 = [16 x i4 %687]
    %689 = shr [16 x i4] %index_nodes9, [16 x i4] %688, i32 %686
    %690 = extf i4, [16 x i4] %689, 0
    %691 = [i4 %690, %672]
    %692 = mux [2 x i4] %691, i1 %656
    %693 = const time 0s 1e
    drv i4$ %639, %692, %693
    %694 = const i32 1
    %695 = const i32 2
    %696 = const i32 0
    %697 = shl i32 %694, i32 %696, i32 %695
    %698 = const i32 1
    %699 = sub i32 %697, %698
    %700 = const i32 1
    %701 = add i32 %699, %700
    %702 = const i16 0
    %703 = sig i16 %702
    %704 = shr i16$ %sel_nodes, i16$ %703, i32 %701
    %705 = exts i1$, i16$ %704, 0, 1
    %sel_nodes14 = prb i16$ %sel_nodes
    %706 = const i32 1
    %707 = const i32 2
    %708 = const i32 1
    %709 = add i32 %707, %708
    %710 = const i32 0
    %711 = shl i32 %706, i32 %710, i32 %709
    %712 = const i32 1
    %713 = sub i32 %711, %712
    %714 = const i32 1
    %715 = const i32 2
    %716 = smul i32 %714, %715
    %717 = add i32 %713, %716
    %718 = const i16 0
    %719 = shr i16 %sel_nodes14, i16 %718, i32 %717
    %720 = exts i1, i16 %719, 0, 1
    %sel_nodes15 = prb i16$ %sel_nodes
    %721 = const i32 1
    %722 = const i32 2
    %723 = const i32 1
    %724 = add i32 %722, %723
    %725 = const i32 0
    %726 = shl i32 %721, i32 %725, i32 %724
    %727 = const i32 1
    %728 = sub i32 %726, %727
    %729 = const i32 1
    %730 = const i32 2
    %731 = smul i32 %729, %730
    %732 = add i32 %728, %731
    %733 = const i32 1
    %734 = add i32 %732, %733
    %735 = const i16 0
    %736 = shr i16 %sel_nodes15, i16 %735, i32 %734
    %737 = exts i1, i16 %736, 0, 1
    %738 = or i1 %720, %737
    %739 = const time 0s 1e
    drv i1$ %705, %738, %739
    %740 = const i32 1
    %741 = const i32 2
    %742 = const i32 0
    %743 = shl i32 %740, i32 %742, i32 %741
    %744 = const i32 1
    %745 = sub i32 %743, %744
    %746 = const i32 1
    %747 = add i32 %745, %746
    %748 = const i4 0
    %749 = [16 x i4 %748]
    %750 = sig [16 x i4] %749
    %751 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %750, i32 %747
    %752 = extf i4$, [16 x i4]$ %751, 0
    %sel_nodes16 = prb i16$ %sel_nodes
    %753 = const i32 1
    %754 = const i32 2
    %755 = const i32 1
    %756 = add i32 %754, %755
    %757 = const i32 0
    %758 = shl i32 %753, i32 %757, i32 %756
    %759 = const i32 1
    %760 = sub i32 %758, %759
    %761 = const i32 1
    %762 = const i32 2
    %763 = smul i32 %761, %762
    %764 = add i32 %760, %763
    %765 = const i16 0
    %766 = shr i16 %sel_nodes16, i16 %765, i32 %764
    %767 = exts i1, i16 %766, 0, 1
    %768 = const i1 1
    %769 = eq i1 %767, %768
    %index_nodes10 = prb [16 x i4]$ %index_nodes
    %770 = const i32 1
    %771 = const i32 2
    %772 = const i32 1
    %773 = add i32 %771, %772
    %774 = const i32 0
    %775 = shl i32 %770, i32 %774, i32 %773
    %776 = const i32 1
    %777 = sub i32 %775, %776
    %778 = const i32 1
    %779 = const i32 2
    %780 = smul i32 %778, %779
    %781 = add i32 %777, %780
    %782 = const i4 0
    %783 = [16 x i4 %782]
    %784 = shr [16 x i4] %index_nodes10, [16 x i4] %783, i32 %781
    %785 = extf i4, [16 x i4] %784, 0
    %index_nodes11 = prb [16 x i4]$ %index_nodes
    %786 = const i32 1
    %787 = const i32 2
    %788 = const i32 1
    %789 = add i32 %787, %788
    %790 = const i32 0
    %791 = shl i32 %786, i32 %790, i32 %789
    %792 = const i32 1
    %793 = sub i32 %791, %792
    %794 = const i32 1
    %795 = const i32 2
    %796 = smul i32 %794, %795
    %797 = add i32 %793, %796
    %798 = const i32 1
    %799 = add i32 %797, %798
    %800 = const i4 0
    %801 = [16 x i4 %800]
    %802 = shr [16 x i4] %index_nodes11, [16 x i4] %801, i32 %799
    %803 = extf i4, [16 x i4] %802, 0
    %804 = [i4 %803, %785]
    %805 = mux [2 x i4] %804, i1 %769
    %806 = const time 0s 1e
    drv i4$ %752, %805, %806
    %807 = const i32 1
    %808 = const i32 2
    %809 = const i32 0
    %810 = shl i32 %807, i32 %809, i32 %808
    %811 = const i32 1
    %812 = sub i32 %810, %811
    %813 = const i32 2
    %814 = add i32 %812, %813
    %815 = const i16 0
    %816 = sig i16 %815
    %817 = shr i16$ %sel_nodes, i16$ %816, i32 %814
    %818 = exts i1$, i16$ %817, 0, 1
    %sel_nodes17 = prb i16$ %sel_nodes
    %819 = const i32 1
    %820 = const i32 2
    %821 = const i32 1
    %822 = add i32 %820, %821
    %823 = const i32 0
    %824 = shl i32 %819, i32 %823, i32 %822
    %825 = const i32 1
    %826 = sub i32 %824, %825
    %827 = const i32 2
    %828 = const i32 2
    %829 = smul i32 %827, %828
    %830 = add i32 %826, %829
    %831 = const i16 0
    %832 = shr i16 %sel_nodes17, i16 %831, i32 %830
    %833 = exts i1, i16 %832, 0, 1
    %sel_nodes18 = prb i16$ %sel_nodes
    %834 = const i32 1
    %835 = const i32 2
    %836 = const i32 1
    %837 = add i32 %835, %836
    %838 = const i32 0
    %839 = shl i32 %834, i32 %838, i32 %837
    %840 = const i32 1
    %841 = sub i32 %839, %840
    %842 = const i32 2
    %843 = const i32 2
    %844 = smul i32 %842, %843
    %845 = add i32 %841, %844
    %846 = const i32 1
    %847 = add i32 %845, %846
    %848 = const i16 0
    %849 = shr i16 %sel_nodes18, i16 %848, i32 %847
    %850 = exts i1, i16 %849, 0, 1
    %851 = or i1 %833, %850
    %852 = const time 0s 1e
    drv i1$ %818, %851, %852
    %853 = const i32 1
    %854 = const i32 2
    %855 = const i32 0
    %856 = shl i32 %853, i32 %855, i32 %854
    %857 = const i32 1
    %858 = sub i32 %856, %857
    %859 = const i32 2
    %860 = add i32 %858, %859
    %861 = const i4 0
    %862 = [16 x i4 %861]
    %863 = sig [16 x i4] %862
    %864 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %863, i32 %860
    %865 = extf i4$, [16 x i4]$ %864, 0
    %sel_nodes19 = prb i16$ %sel_nodes
    %866 = const i32 1
    %867 = const i32 2
    %868 = const i32 1
    %869 = add i32 %867, %868
    %870 = const i32 0
    %871 = shl i32 %866, i32 %870, i32 %869
    %872 = const i32 1
    %873 = sub i32 %871, %872
    %874 = const i32 2
    %875 = const i32 2
    %876 = smul i32 %874, %875
    %877 = add i32 %873, %876
    %878 = const i16 0
    %879 = shr i16 %sel_nodes19, i16 %878, i32 %877
    %880 = exts i1, i16 %879, 0, 1
    %881 = const i1 1
    %882 = eq i1 %880, %881
    %index_nodes12 = prb [16 x i4]$ %index_nodes
    %883 = const i32 1
    %884 = const i32 2
    %885 = const i32 1
    %886 = add i32 %884, %885
    %887 = const i32 0
    %888 = shl i32 %883, i32 %887, i32 %886
    %889 = const i32 1
    %890 = sub i32 %888, %889
    %891 = const i32 2
    %892 = const i32 2
    %893 = smul i32 %891, %892
    %894 = add i32 %890, %893
    %895 = const i4 0
    %896 = [16 x i4 %895]
    %897 = shr [16 x i4] %index_nodes12, [16 x i4] %896, i32 %894
    %898 = extf i4, [16 x i4] %897, 0
    %index_nodes13 = prb [16 x i4]$ %index_nodes
    %899 = const i32 1
    %900 = const i32 2
    %901 = const i32 1
    %902 = add i32 %900, %901
    %903 = const i32 0
    %904 = shl i32 %899, i32 %903, i32 %902
    %905 = const i32 1
    %906 = sub i32 %904, %905
    %907 = const i32 2
    %908 = const i32 2
    %909 = smul i32 %907, %908
    %910 = add i32 %906, %909
    %911 = const i32 1
    %912 = add i32 %910, %911
    %913 = const i4 0
    %914 = [16 x i4 %913]
    %915 = shr [16 x i4] %index_nodes13, [16 x i4] %914, i32 %912
    %916 = extf i4, [16 x i4] %915, 0
    %917 = [i4 %916, %898]
    %918 = mux [2 x i4] %917, i1 %882
    %919 = const time 0s 1e
    drv i4$ %865, %918, %919
    %920 = const i32 1
    %921 = const i32 2
    %922 = const i32 0
    %923 = shl i32 %920, i32 %922, i32 %921
    %924 = const i32 1
    %925 = sub i32 %923, %924
    %926 = const i32 3
    %927 = add i32 %925, %926
    %928 = const i16 0
    %929 = sig i16 %928
    %930 = shr i16$ %sel_nodes, i16$ %929, i32 %927
    %931 = exts i1$, i16$ %930, 0, 1
    %sel_nodes20 = prb i16$ %sel_nodes
    %932 = const i32 1
    %933 = const i32 2
    %934 = const i32 1
    %935 = add i32 %933, %934
    %936 = const i32 0
    %937 = shl i32 %932, i32 %936, i32 %935
    %938 = const i32 1
    %939 = sub i32 %937, %938
    %940 = const i32 3
    %941 = const i32 2
    %942 = smul i32 %940, %941
    %943 = add i32 %939, %942
    %944 = const i16 0
    %945 = shr i16 %sel_nodes20, i16 %944, i32 %943
    %946 = exts i1, i16 %945, 0, 1
    %sel_nodes21 = prb i16$ %sel_nodes
    %947 = const i32 1
    %948 = const i32 2
    %949 = const i32 1
    %950 = add i32 %948, %949
    %951 = const i32 0
    %952 = shl i32 %947, i32 %951, i32 %950
    %953 = const i32 1
    %954 = sub i32 %952, %953
    %955 = const i32 3
    %956 = const i32 2
    %957 = smul i32 %955, %956
    %958 = add i32 %954, %957
    %959 = const i32 1
    %960 = add i32 %958, %959
    %961 = const i16 0
    %962 = shr i16 %sel_nodes21, i16 %961, i32 %960
    %963 = exts i1, i16 %962, 0, 1
    %964 = or i1 %946, %963
    %965 = const time 0s 1e
    drv i1$ %931, %964, %965
    %966 = const i32 1
    %967 = const i32 2
    %968 = const i32 0
    %969 = shl i32 %966, i32 %968, i32 %967
    %970 = const i32 1
    %971 = sub i32 %969, %970
    %972 = const i32 3
    %973 = add i32 %971, %972
    %974 = const i4 0
    %975 = [16 x i4 %974]
    %976 = sig [16 x i4] %975
    %977 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %976, i32 %973
    %978 = extf i4$, [16 x i4]$ %977, 0
    %sel_nodes22 = prb i16$ %sel_nodes
    %979 = const i32 1
    %980 = const i32 2
    %981 = const i32 1
    %982 = add i32 %980, %981
    %983 = const i32 0
    %984 = shl i32 %979, i32 %983, i32 %982
    %985 = const i32 1
    %986 = sub i32 %984, %985
    %987 = const i32 3
    %988 = const i32 2
    %989 = smul i32 %987, %988
    %990 = add i32 %986, %989
    %991 = const i16 0
    %992 = shr i16 %sel_nodes22, i16 %991, i32 %990
    %993 = exts i1, i16 %992, 0, 1
    %994 = const i1 1
    %995 = eq i1 %993, %994
    %index_nodes14 = prb [16 x i4]$ %index_nodes
    %996 = const i32 1
    %997 = const i32 2
    %998 = const i32 1
    %999 = add i32 %997, %998
    %1000 = const i32 0
    %1001 = shl i32 %996, i32 %1000, i32 %999
    %1002 = const i32 1
    %1003 = sub i32 %1001, %1002
    %1004 = const i32 3
    %1005 = const i32 2
    %1006 = smul i32 %1004, %1005
    %1007 = add i32 %1003, %1006
    %1008 = const i4 0
    %1009 = [16 x i4 %1008]
    %1010 = shr [16 x i4] %index_nodes14, [16 x i4] %1009, i32 %1007
    %1011 = extf i4, [16 x i4] %1010, 0
    %index_nodes15 = prb [16 x i4]$ %index_nodes
    %1012 = const i32 1
    %1013 = const i32 2
    %1014 = const i32 1
    %1015 = add i32 %1013, %1014
    %1016 = const i32 0
    %1017 = shl i32 %1012, i32 %1016, i32 %1015
    %1018 = const i32 1
    %1019 = sub i32 %1017, %1018
    %1020 = const i32 3
    %1021 = const i32 2
    %1022 = smul i32 %1020, %1021
    %1023 = add i32 %1019, %1022
    %1024 = const i32 1
    %1025 = add i32 %1023, %1024
    %1026 = const i4 0
    %1027 = [16 x i4 %1026]
    %1028 = shr [16 x i4] %index_nodes15, [16 x i4] %1027, i32 %1025
    %1029 = extf i4, [16 x i4] %1028, 0
    %1030 = [i4 %1029, %1011]
    %1031 = mux [2 x i4] %1030, i1 %995
    %1032 = const time 0s 1e
    drv i4$ %978, %1031, %1032
    %1033 = const i32 1
    %1034 = const i32 3
    %1035 = const i32 0
    %1036 = shl i32 %1033, i32 %1035, i32 %1034
    %1037 = const i32 1
    %1038 = sub i32 %1036, %1037
    %1039 = const i32 0
    %1040 = add i32 %1038, %1039
    %1041 = const i16 0
    %1042 = sig i16 %1041
    %1043 = shr i16$ %sel_nodes, i16$ %1042, i32 %1040
    %1044 = exts i1$, i16$ %1043, 0, 1
    %in_tmp1 = prb i16$ %in_tmp
    %1045 = const i32 0
    %1046 = const i32 2
    %1047 = smul i32 %1045, %1046
    %1048 = const i16 0
    %1049 = shr i16 %in_tmp1, i16 %1048, i32 %1047
    %1050 = exts i1, i16 %1049, 0, 1
    %in_tmp2 = prb i16$ %in_tmp
    %1051 = const i32 0
    %1052 = const i32 2
    %1053 = smul i32 %1051, %1052
    %1054 = const i32 1
    %1055 = add i32 %1053, %1054
    %1056 = const i16 0
    %1057 = shr i16 %in_tmp2, i16 %1056, i32 %1055
    %1058 = exts i1, i16 %1057, 0, 1
    %1059 = or i1 %1050, %1058
    %1060 = const time 0s 1e
    drv i1$ %1044, %1059, %1060
    %1061 = const i32 1
    %1062 = const i32 3
    %1063 = const i32 0
    %1064 = shl i32 %1061, i32 %1063, i32 %1062
    %1065 = const i32 1
    %1066 = sub i32 %1064, %1065
    %1067 = const i32 0
    %1068 = add i32 %1066, %1067
    %1069 = const i4 0
    %1070 = [16 x i4 %1069]
    %1071 = sig [16 x i4] %1070
    %1072 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1071, i32 %1068
    %1073 = extf i4$, [16 x i4]$ %1072, 0
    %in_tmp3 = prb i16$ %in_tmp
    %1074 = const i32 0
    %1075 = const i32 2
    %1076 = smul i32 %1074, %1075
    %1077 = const i16 0
    %1078 = shr i16 %in_tmp3, i16 %1077, i32 %1076
    %1079 = exts i1, i16 %1078, 0, 1
    %1080 = const i1 1
    %1081 = eq i1 %1079, %1080
    %index_lut1 = prb [16 x i4]$ %index_lut
    %1082 = const i32 0
    %1083 = const i32 2
    %1084 = smul i32 %1082, %1083
    %1085 = const i4 0
    %1086 = [16 x i4 %1085]
    %1087 = shr [16 x i4] %index_lut1, [16 x i4] %1086, i32 %1084
    %1088 = extf i4, [16 x i4] %1087, 0
    %index_lut2 = prb [16 x i4]$ %index_lut
    %1089 = const i32 0
    %1090 = const i32 2
    %1091 = smul i32 %1089, %1090
    %1092 = const i32 1
    %1093 = add i32 %1091, %1092
    %1094 = const i4 0
    %1095 = [16 x i4 %1094]
    %1096 = shr [16 x i4] %index_lut2, [16 x i4] %1095, i32 %1093
    %1097 = extf i4, [16 x i4] %1096, 0
    %1098 = [i4 %1097, %1088]
    %1099 = mux [2 x i4] %1098, i1 %1081
    %1100 = const time 0s 1e
    drv i4$ %1073, %1099, %1100
    %1101 = const i32 1
    %1102 = const i32 3
    %1103 = const i32 0
    %1104 = shl i32 %1101, i32 %1103, i32 %1102
    %1105 = const i32 1
    %1106 = sub i32 %1104, %1105
    %1107 = const i32 1
    %1108 = add i32 %1106, %1107
    %1109 = const i16 0
    %1110 = sig i16 %1109
    %1111 = shr i16$ %sel_nodes, i16$ %1110, i32 %1108
    %1112 = exts i1$, i16$ %1111, 0, 1
    %in_tmp4 = prb i16$ %in_tmp
    %1113 = const i32 1
    %1114 = const i32 2
    %1115 = smul i32 %1113, %1114
    %1116 = const i16 0
    %1117 = shr i16 %in_tmp4, i16 %1116, i32 %1115
    %1118 = exts i1, i16 %1117, 0, 1
    %in_tmp5 = prb i16$ %in_tmp
    %1119 = const i32 1
    %1120 = const i32 2
    %1121 = smul i32 %1119, %1120
    %1122 = const i32 1
    %1123 = add i32 %1121, %1122
    %1124 = const i16 0
    %1125 = shr i16 %in_tmp5, i16 %1124, i32 %1123
    %1126 = exts i1, i16 %1125, 0, 1
    %1127 = or i1 %1118, %1126
    %1128 = const time 0s 1e
    drv i1$ %1112, %1127, %1128
    %1129 = const i32 1
    %1130 = const i32 3
    %1131 = const i32 0
    %1132 = shl i32 %1129, i32 %1131, i32 %1130
    %1133 = const i32 1
    %1134 = sub i32 %1132, %1133
    %1135 = const i32 1
    %1136 = add i32 %1134, %1135
    %1137 = const i4 0
    %1138 = [16 x i4 %1137]
    %1139 = sig [16 x i4] %1138
    %1140 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1139, i32 %1136
    %1141 = extf i4$, [16 x i4]$ %1140, 0
    %in_tmp6 = prb i16$ %in_tmp
    %1142 = const i32 1
    %1143 = const i32 2
    %1144 = smul i32 %1142, %1143
    %1145 = const i16 0
    %1146 = shr i16 %in_tmp6, i16 %1145, i32 %1144
    %1147 = exts i1, i16 %1146, 0, 1
    %1148 = const i1 1
    %1149 = eq i1 %1147, %1148
    %index_lut3 = prb [16 x i4]$ %index_lut
    %1150 = const i32 1
    %1151 = const i32 2
    %1152 = smul i32 %1150, %1151
    %1153 = const i4 0
    %1154 = [16 x i4 %1153]
    %1155 = shr [16 x i4] %index_lut3, [16 x i4] %1154, i32 %1152
    %1156 = extf i4, [16 x i4] %1155, 0
    %index_lut4 = prb [16 x i4]$ %index_lut
    %1157 = const i32 1
    %1158 = const i32 2
    %1159 = smul i32 %1157, %1158
    %1160 = const i32 1
    %1161 = add i32 %1159, %1160
    %1162 = const i4 0
    %1163 = [16 x i4 %1162]
    %1164 = shr [16 x i4] %index_lut4, [16 x i4] %1163, i32 %1161
    %1165 = extf i4, [16 x i4] %1164, 0
    %1166 = [i4 %1165, %1156]
    %1167 = mux [2 x i4] %1166, i1 %1149
    %1168 = const time 0s 1e
    drv i4$ %1141, %1167, %1168
    %1169 = const i32 1
    %1170 = const i32 3
    %1171 = const i32 0
    %1172 = shl i32 %1169, i32 %1171, i32 %1170
    %1173 = const i32 1
    %1174 = sub i32 %1172, %1173
    %1175 = const i32 2
    %1176 = add i32 %1174, %1175
    %1177 = const i16 0
    %1178 = sig i16 %1177
    %1179 = shr i16$ %sel_nodes, i16$ %1178, i32 %1176
    %1180 = exts i1$, i16$ %1179, 0, 1
    %in_tmp7 = prb i16$ %in_tmp
    %1181 = const i32 2
    %1182 = const i32 2
    %1183 = smul i32 %1181, %1182
    %1184 = const i16 0
    %1185 = shr i16 %in_tmp7, i16 %1184, i32 %1183
    %1186 = exts i1, i16 %1185, 0, 1
    %in_tmp8 = prb i16$ %in_tmp
    %1187 = const i32 2
    %1188 = const i32 2
    %1189 = smul i32 %1187, %1188
    %1190 = const i32 1
    %1191 = add i32 %1189, %1190
    %1192 = const i16 0
    %1193 = shr i16 %in_tmp8, i16 %1192, i32 %1191
    %1194 = exts i1, i16 %1193, 0, 1
    %1195 = or i1 %1186, %1194
    %1196 = const time 0s 1e
    drv i1$ %1180, %1195, %1196
    %1197 = const i32 1
    %1198 = const i32 3
    %1199 = const i32 0
    %1200 = shl i32 %1197, i32 %1199, i32 %1198
    %1201 = const i32 1
    %1202 = sub i32 %1200, %1201
    %1203 = const i32 2
    %1204 = add i32 %1202, %1203
    %1205 = const i4 0
    %1206 = [16 x i4 %1205]
    %1207 = sig [16 x i4] %1206
    %1208 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1207, i32 %1204
    %1209 = extf i4$, [16 x i4]$ %1208, 0
    %in_tmp9 = prb i16$ %in_tmp
    %1210 = const i32 2
    %1211 = const i32 2
    %1212 = smul i32 %1210, %1211
    %1213 = const i16 0
    %1214 = shr i16 %in_tmp9, i16 %1213, i32 %1212
    %1215 = exts i1, i16 %1214, 0, 1
    %1216 = const i1 1
    %1217 = eq i1 %1215, %1216
    %index_lut5 = prb [16 x i4]$ %index_lut
    %1218 = const i32 2
    %1219 = const i32 2
    %1220 = smul i32 %1218, %1219
    %1221 = const i4 0
    %1222 = [16 x i4 %1221]
    %1223 = shr [16 x i4] %index_lut5, [16 x i4] %1222, i32 %1220
    %1224 = extf i4, [16 x i4] %1223, 0
    %index_lut6 = prb [16 x i4]$ %index_lut
    %1225 = const i32 2
    %1226 = const i32 2
    %1227 = smul i32 %1225, %1226
    %1228 = const i32 1
    %1229 = add i32 %1227, %1228
    %1230 = const i4 0
    %1231 = [16 x i4 %1230]
    %1232 = shr [16 x i4] %index_lut6, [16 x i4] %1231, i32 %1229
    %1233 = extf i4, [16 x i4] %1232, 0
    %1234 = [i4 %1233, %1224]
    %1235 = mux [2 x i4] %1234, i1 %1217
    %1236 = const time 0s 1e
    drv i4$ %1209, %1235, %1236
    %1237 = const i32 1
    %1238 = const i32 3
    %1239 = const i32 0
    %1240 = shl i32 %1237, i32 %1239, i32 %1238
    %1241 = const i32 1
    %1242 = sub i32 %1240, %1241
    %1243 = const i32 3
    %1244 = add i32 %1242, %1243
    %1245 = const i16 0
    %1246 = sig i16 %1245
    %1247 = shr i16$ %sel_nodes, i16$ %1246, i32 %1244
    %1248 = exts i1$, i16$ %1247, 0, 1
    %in_tmp10 = prb i16$ %in_tmp
    %1249 = const i32 3
    %1250 = const i32 2
    %1251 = smul i32 %1249, %1250
    %1252 = const i16 0
    %1253 = shr i16 %in_tmp10, i16 %1252, i32 %1251
    %1254 = exts i1, i16 %1253, 0, 1
    %in_tmp11 = prb i16$ %in_tmp
    %1255 = const i32 3
    %1256 = const i32 2
    %1257 = smul i32 %1255, %1256
    %1258 = const i32 1
    %1259 = add i32 %1257, %1258
    %1260 = const i16 0
    %1261 = shr i16 %in_tmp11, i16 %1260, i32 %1259
    %1262 = exts i1, i16 %1261, 0, 1
    %1263 = or i1 %1254, %1262
    %1264 = const time 0s 1e
    drv i1$ %1248, %1263, %1264
    %1265 = const i32 1
    %1266 = const i32 3
    %1267 = const i32 0
    %1268 = shl i32 %1265, i32 %1267, i32 %1266
    %1269 = const i32 1
    %1270 = sub i32 %1268, %1269
    %1271 = const i32 3
    %1272 = add i32 %1270, %1271
    %1273 = const i4 0
    %1274 = [16 x i4 %1273]
    %1275 = sig [16 x i4] %1274
    %1276 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1275, i32 %1272
    %1277 = extf i4$, [16 x i4]$ %1276, 0
    %in_tmp12 = prb i16$ %in_tmp
    %1278 = const i32 3
    %1279 = const i32 2
    %1280 = smul i32 %1278, %1279
    %1281 = const i16 0
    %1282 = shr i16 %in_tmp12, i16 %1281, i32 %1280
    %1283 = exts i1, i16 %1282, 0, 1
    %1284 = const i1 1
    %1285 = eq i1 %1283, %1284
    %index_lut7 = prb [16 x i4]$ %index_lut
    %1286 = const i32 3
    %1287 = const i32 2
    %1288 = smul i32 %1286, %1287
    %1289 = const i4 0
    %1290 = [16 x i4 %1289]
    %1291 = shr [16 x i4] %index_lut7, [16 x i4] %1290, i32 %1288
    %1292 = extf i4, [16 x i4] %1291, 0
    %index_lut8 = prb [16 x i4]$ %index_lut
    %1293 = const i32 3
    %1294 = const i32 2
    %1295 = smul i32 %1293, %1294
    %1296 = const i32 1
    %1297 = add i32 %1295, %1296
    %1298 = const i4 0
    %1299 = [16 x i4 %1298]
    %1300 = shr [16 x i4] %index_lut8, [16 x i4] %1299, i32 %1297
    %1301 = extf i4, [16 x i4] %1300, 0
    %1302 = [i4 %1301, %1292]
    %1303 = mux [2 x i4] %1302, i1 %1285
    %1304 = const time 0s 1e
    drv i4$ %1277, %1303, %1304
    %1305 = const i32 1
    %1306 = const i32 3
    %1307 = const i32 0
    %1308 = shl i32 %1305, i32 %1307, i32 %1306
    %1309 = const i32 1
    %1310 = sub i32 %1308, %1309
    %1311 = const i32 4
    %1312 = add i32 %1310, %1311
    %1313 = const i16 0
    %1314 = sig i16 %1313
    %1315 = shr i16$ %sel_nodes, i16$ %1314, i32 %1312
    %1316 = exts i1$, i16$ %1315, 0, 1
    %in_tmp13 = prb i16$ %in_tmp
    %1317 = const i32 4
    %1318 = const i32 2
    %1319 = smul i32 %1317, %1318
    %1320 = const i16 0
    %1321 = shr i16 %in_tmp13, i16 %1320, i32 %1319
    %1322 = exts i1, i16 %1321, 0, 1
    %in_tmp14 = prb i16$ %in_tmp
    %1323 = const i32 4
    %1324 = const i32 2
    %1325 = smul i32 %1323, %1324
    %1326 = const i32 1
    %1327 = add i32 %1325, %1326
    %1328 = const i16 0
    %1329 = shr i16 %in_tmp14, i16 %1328, i32 %1327
    %1330 = exts i1, i16 %1329, 0, 1
    %1331 = or i1 %1322, %1330
    %1332 = const time 0s 1e
    drv i1$ %1316, %1331, %1332
    %1333 = const i32 1
    %1334 = const i32 3
    %1335 = const i32 0
    %1336 = shl i32 %1333, i32 %1335, i32 %1334
    %1337 = const i32 1
    %1338 = sub i32 %1336, %1337
    %1339 = const i32 4
    %1340 = add i32 %1338, %1339
    %1341 = const i4 0
    %1342 = [16 x i4 %1341]
    %1343 = sig [16 x i4] %1342
    %1344 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1343, i32 %1340
    %1345 = extf i4$, [16 x i4]$ %1344, 0
    %in_tmp15 = prb i16$ %in_tmp
    %1346 = const i32 4
    %1347 = const i32 2
    %1348 = smul i32 %1346, %1347
    %1349 = const i16 0
    %1350 = shr i16 %in_tmp15, i16 %1349, i32 %1348
    %1351 = exts i1, i16 %1350, 0, 1
    %1352 = const i1 1
    %1353 = eq i1 %1351, %1352
    %index_lut9 = prb [16 x i4]$ %index_lut
    %1354 = const i32 4
    %1355 = const i32 2
    %1356 = smul i32 %1354, %1355
    %1357 = const i4 0
    %1358 = [16 x i4 %1357]
    %1359 = shr [16 x i4] %index_lut9, [16 x i4] %1358, i32 %1356
    %1360 = extf i4, [16 x i4] %1359, 0
    %index_lut10 = prb [16 x i4]$ %index_lut
    %1361 = const i32 4
    %1362 = const i32 2
    %1363 = smul i32 %1361, %1362
    %1364 = const i32 1
    %1365 = add i32 %1363, %1364
    %1366 = const i4 0
    %1367 = [16 x i4 %1366]
    %1368 = shr [16 x i4] %index_lut10, [16 x i4] %1367, i32 %1365
    %1369 = extf i4, [16 x i4] %1368, 0
    %1370 = [i4 %1369, %1360]
    %1371 = mux [2 x i4] %1370, i1 %1353
    %1372 = const time 0s 1e
    drv i4$ %1345, %1371, %1372
    %1373 = const i32 1
    %1374 = const i32 3
    %1375 = const i32 0
    %1376 = shl i32 %1373, i32 %1375, i32 %1374
    %1377 = const i32 1
    %1378 = sub i32 %1376, %1377
    %1379 = const i32 5
    %1380 = add i32 %1378, %1379
    %1381 = const i16 0
    %1382 = sig i16 %1381
    %1383 = shr i16$ %sel_nodes, i16$ %1382, i32 %1380
    %1384 = exts i1$, i16$ %1383, 0, 1
    %in_tmp16 = prb i16$ %in_tmp
    %1385 = const i32 5
    %1386 = const i32 2
    %1387 = smul i32 %1385, %1386
    %1388 = const i16 0
    %1389 = shr i16 %in_tmp16, i16 %1388, i32 %1387
    %1390 = exts i1, i16 %1389, 0, 1
    %in_tmp17 = prb i16$ %in_tmp
    %1391 = const i32 5
    %1392 = const i32 2
    %1393 = smul i32 %1391, %1392
    %1394 = const i32 1
    %1395 = add i32 %1393, %1394
    %1396 = const i16 0
    %1397 = shr i16 %in_tmp17, i16 %1396, i32 %1395
    %1398 = exts i1, i16 %1397, 0, 1
    %1399 = or i1 %1390, %1398
    %1400 = const time 0s 1e
    drv i1$ %1384, %1399, %1400
    %1401 = const i32 1
    %1402 = const i32 3
    %1403 = const i32 0
    %1404 = shl i32 %1401, i32 %1403, i32 %1402
    %1405 = const i32 1
    %1406 = sub i32 %1404, %1405
    %1407 = const i32 5
    %1408 = add i32 %1406, %1407
    %1409 = const i4 0
    %1410 = [16 x i4 %1409]
    %1411 = sig [16 x i4] %1410
    %1412 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1411, i32 %1408
    %1413 = extf i4$, [16 x i4]$ %1412, 0
    %in_tmp18 = prb i16$ %in_tmp
    %1414 = const i32 5
    %1415 = const i32 2
    %1416 = smul i32 %1414, %1415
    %1417 = const i16 0
    %1418 = shr i16 %in_tmp18, i16 %1417, i32 %1416
    %1419 = exts i1, i16 %1418, 0, 1
    %1420 = const i1 1
    %1421 = eq i1 %1419, %1420
    %index_lut11 = prb [16 x i4]$ %index_lut
    %1422 = const i32 5
    %1423 = const i32 2
    %1424 = smul i32 %1422, %1423
    %1425 = const i4 0
    %1426 = [16 x i4 %1425]
    %1427 = shr [16 x i4] %index_lut11, [16 x i4] %1426, i32 %1424
    %1428 = extf i4, [16 x i4] %1427, 0
    %index_lut12 = prb [16 x i4]$ %index_lut
    %1429 = const i32 5
    %1430 = const i32 2
    %1431 = smul i32 %1429, %1430
    %1432 = const i32 1
    %1433 = add i32 %1431, %1432
    %1434 = const i4 0
    %1435 = [16 x i4 %1434]
    %1436 = shr [16 x i4] %index_lut12, [16 x i4] %1435, i32 %1433
    %1437 = extf i4, [16 x i4] %1436, 0
    %1438 = [i4 %1437, %1428]
    %1439 = mux [2 x i4] %1438, i1 %1421
    %1440 = const time 0s 1e
    drv i4$ %1413, %1439, %1440
    %1441 = const i32 1
    %1442 = const i32 3
    %1443 = const i32 0
    %1444 = shl i32 %1441, i32 %1443, i32 %1442
    %1445 = const i32 1
    %1446 = sub i32 %1444, %1445
    %1447 = const i32 6
    %1448 = add i32 %1446, %1447
    %1449 = const i16 0
    %1450 = sig i16 %1449
    %1451 = shr i16$ %sel_nodes, i16$ %1450, i32 %1448
    %1452 = exts i1$, i16$ %1451, 0, 1
    %in_tmp19 = prb i16$ %in_tmp
    %1453 = const i32 6
    %1454 = const i32 2
    %1455 = smul i32 %1453, %1454
    %1456 = const i16 0
    %1457 = shr i16 %in_tmp19, i16 %1456, i32 %1455
    %1458 = exts i1, i16 %1457, 0, 1
    %in_tmp20 = prb i16$ %in_tmp
    %1459 = const i32 6
    %1460 = const i32 2
    %1461 = smul i32 %1459, %1460
    %1462 = const i32 1
    %1463 = add i32 %1461, %1462
    %1464 = const i16 0
    %1465 = shr i16 %in_tmp20, i16 %1464, i32 %1463
    %1466 = exts i1, i16 %1465, 0, 1
    %1467 = or i1 %1458, %1466
    %1468 = const time 0s 1e
    drv i1$ %1452, %1467, %1468
    %1469 = const i32 1
    %1470 = const i32 3
    %1471 = const i32 0
    %1472 = shl i32 %1469, i32 %1471, i32 %1470
    %1473 = const i32 1
    %1474 = sub i32 %1472, %1473
    %1475 = const i32 6
    %1476 = add i32 %1474, %1475
    %1477 = const i4 0
    %1478 = [16 x i4 %1477]
    %1479 = sig [16 x i4] %1478
    %1480 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1479, i32 %1476
    %1481 = extf i4$, [16 x i4]$ %1480, 0
    %in_tmp21 = prb i16$ %in_tmp
    %1482 = const i32 6
    %1483 = const i32 2
    %1484 = smul i32 %1482, %1483
    %1485 = const i16 0
    %1486 = shr i16 %in_tmp21, i16 %1485, i32 %1484
    %1487 = exts i1, i16 %1486, 0, 1
    %1488 = const i1 1
    %1489 = eq i1 %1487, %1488
    %index_lut13 = prb [16 x i4]$ %index_lut
    %1490 = const i32 6
    %1491 = const i32 2
    %1492 = smul i32 %1490, %1491
    %1493 = const i4 0
    %1494 = [16 x i4 %1493]
    %1495 = shr [16 x i4] %index_lut13, [16 x i4] %1494, i32 %1492
    %1496 = extf i4, [16 x i4] %1495, 0
    %index_lut14 = prb [16 x i4]$ %index_lut
    %1497 = const i32 6
    %1498 = const i32 2
    %1499 = smul i32 %1497, %1498
    %1500 = const i32 1
    %1501 = add i32 %1499, %1500
    %1502 = const i4 0
    %1503 = [16 x i4 %1502]
    %1504 = shr [16 x i4] %index_lut14, [16 x i4] %1503, i32 %1501
    %1505 = extf i4, [16 x i4] %1504, 0
    %1506 = [i4 %1505, %1496]
    %1507 = mux [2 x i4] %1506, i1 %1489
    %1508 = const time 0s 1e
    drv i4$ %1481, %1507, %1508
    %1509 = const i32 1
    %1510 = const i32 3
    %1511 = const i32 0
    %1512 = shl i32 %1509, i32 %1511, i32 %1510
    %1513 = const i32 1
    %1514 = sub i32 %1512, %1513
    %1515 = const i32 7
    %1516 = add i32 %1514, %1515
    %1517 = const i16 0
    %1518 = sig i16 %1517
    %1519 = shr i16$ %sel_nodes, i16$ %1518, i32 %1516
    %1520 = exts i1$, i16$ %1519, 0, 1
    %in_tmp22 = prb i16$ %in_tmp
    %1521 = const i32 7
    %1522 = const i32 2
    %1523 = smul i32 %1521, %1522
    %1524 = const i16 0
    %1525 = shr i16 %in_tmp22, i16 %1524, i32 %1523
    %1526 = exts i1, i16 %1525, 0, 1
    %in_tmp23 = prb i16$ %in_tmp
    %1527 = const i32 7
    %1528 = const i32 2
    %1529 = smul i32 %1527, %1528
    %1530 = const i32 1
    %1531 = add i32 %1529, %1530
    %1532 = const i16 0
    %1533 = shr i16 %in_tmp23, i16 %1532, i32 %1531
    %1534 = exts i1, i16 %1533, 0, 1
    %1535 = or i1 %1526, %1534
    %1536 = const time 0s 1e
    drv i1$ %1520, %1535, %1536
    %1537 = const i32 1
    %1538 = const i32 3
    %1539 = const i32 0
    %1540 = shl i32 %1537, i32 %1539, i32 %1538
    %1541 = const i32 1
    %1542 = sub i32 %1540, %1541
    %1543 = const i32 7
    %1544 = add i32 %1542, %1543
    %1545 = const i4 0
    %1546 = [16 x i4 %1545]
    %1547 = sig [16 x i4] %1546
    %1548 = shr [16 x i4]$ %index_nodes, [16 x i4]$ %1547, i32 %1544
    %1549 = extf i4$, [16 x i4]$ %1548, 0
    %in_tmp24 = prb i16$ %in_tmp
    %1550 = const i32 7
    %1551 = const i32 2
    %1552 = smul i32 %1550, %1551
    %1553 = const i16 0
    %1554 = shr i16 %in_tmp24, i16 %1553, i32 %1552
    %1555 = exts i1, i16 %1554, 0, 1
    %1556 = const i1 1
    %1557 = eq i1 %1555, %1556
    %index_lut15 = prb [16 x i4]$ %index_lut
    %1558 = const i32 7
    %1559 = const i32 2
    %1560 = smul i32 %1558, %1559
    %1561 = const i4 0
    %1562 = [16 x i4 %1561]
    %1563 = shr [16 x i4] %index_lut15, [16 x i4] %1562, i32 %1560
    %1564 = extf i4, [16 x i4] %1563, 0
    %index_lut16 = prb [16 x i4]$ %index_lut
    %1565 = const i32 7
    %1566 = const i32 2
    %1567 = smul i32 %1565, %1566
    %1568 = const i32 1
    %1569 = add i32 %1567, %1568
    %1570 = const i4 0
    %1571 = [16 x i4 %1570]
    %1572 = shr [16 x i4] %index_lut16, [16 x i4] %1571, i32 %1569
    %1573 = extf i4, [16 x i4] %1572, 0
    %1574 = [i4 %1573, %1564]
    %1575 = mux [2 x i4] %1574, i1 %1557
    %1576 = const time 0s 1e
    drv i4$ %1549, %1575, %1576
    inst %lzc.param1.initial.262.1 () -> ()
    inst %lzc.param1.always_comb.271.1 (i16$ %in_i) -> (i16$ %in_tmp)
}

proc %lfsr_16bit.param37.always_comb.1836.37 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d) {
0:
    br %body
body:
    %1 = const i1 0
    %shift_in = var i1 %1
    %shift_q1 = prb i16$ %shift_q
    %2 = const i32 15
    %3 = const i16 0
    %4 = shr i16 %shift_q1, i16 %3, i32 %2
    %5 = exts i1, i16 %4, 0, 1
    %shift_q2 = prb i16$ %shift_q
    %6 = const i32 12
    %7 = const i16 0
    %8 = shr i16 %shift_q2, i16 %7, i32 %6
    %9 = exts i1, i16 %8, 0, 1
    %10 = xor i1 %5, %9
    %shift_q3 = prb i16$ %shift_q
    %11 = const i32 5
    %12 = const i16 0
    %13 = shr i16 %shift_q3, i16 %12, i32 %11
    %14 = exts i1, i16 %13, 0, 1
    %15 = xor i1 %10, %14
    %shift_q4 = prb i16$ %shift_q
    %16 = const i32 1
    %17 = const i16 0
    %18 = shr i16 %shift_q4, i16 %17, i32 %16
    %19 = exts i1, i16 %18, 0, 1
    %20 = xor i1 %15, %19
    %21 = not i1 %20
    st i1* %shift_in, %21
    %shift_q5 = prb i16$ %shift_q
    %22 = const time 0s 1e
    drv i16$ %shift_d, %shift_q5, %22
    %en_i1 = prb i1$ %en_i
    br %en_i1, %if_false, %if_true
check:
    wait %body, %en_i, %shift_q
if_true:
    %23 = const i16 0
    %shift_in1 = ld i1* %shift_in
    %24 = inss i16 %23, i1 %shift_in1, 0, 1
    %shift_q6 = prb i16$ %shift_q
    %25 = const i1 0
    %26 = const i16 0
    %27 = shr i16 %shift_q6, i16 %26, i1 %25
    %28 = exts i15, i16 %27, 0, 15
    %29 = inss i16 %24, i15 %28, 1, 15
    %30 = const time 0s 1e
    drv i16$ %shift_d, %29, %30
    br %if_exit
if_false:
    br %if_exit
if_exit:
    %shift_q7 = prb i16$ %shift_q
    %31 = const time 0s 1e
    drv i16$ %out_o, %shift_q7, %31
    br %check
}

proc %lfsr_16bit.param37.always_ff.1837.37 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i32 1
    %9 = exts i16, i32 %8, 0, 16
    %10 = const time 0s 1d
    drv i16$ %shift_q, %9, %10
    br %if_exit
if_false:
    %shift_d1 = prb i16$ %shift_d
    %11 = const time 0s 1d
    drv i16$ %shift_q, %shift_d1, %11
    br %if_exit
if_exit:
    br %0
}

proc %lfsr_16bit.param37.initial.1838.37 () -> () {
0:
    halt
}

entity @lfsr_16bit.param37 (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) -> (i16$ %out_o) {
    %0 = const i16 0
    %shift_d = sig i16 %0
    %1 = const i16 0
    %shift_q = sig i16 %1
    inst %lfsr_16bit.param37.always_comb.1836.37 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d)
    inst %lfsr_16bit.param37.always_ff.1837.37 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q)
    inst %lfsr_16bit.param37.initial.1838.37 () -> ()
}

proc %lzc_tb.initial.238.0 () -> (i1$ %clk_i, i1$ %rst_ni) {
0:
    %1 = const i32 0
    %2 = exts i1, i32 %1, 0, 1
    %3 = const time 1ns
    drv i1$ %rst_ni, %2, %3
    %4 = const i32 1
    %5 = exts i1, i32 %4, 0, 1
    %6 = const time 2ns
    drv i1$ %rst_ni, %5, %6
    %7 = const time 4ns
    wait %8 for %7
8:
    %9 = const i32 1000000
    %loop_count = var i32 %9
    br %loop_body
loop_body:
    %10 = ld i32* %loop_count
    %11 = const i32 0
    %12 = neq i32 %10, %11
    br %12, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %13 = const i32 1
    %14 = exts i1, i32 %13, 0, 1
    %15 = const time 1ns
    drv i1$ %clk_i, %14, %15
    %16 = const i32 0
    %17 = exts i1, i32 %16, 0, 1
    %18 = const time 2ns
    drv i1$ %clk_i, %17, %18
    %19 = const time 2ns
    wait %20 for %19
20:
    %21 = ld i32* %loop_count
    %22 = const i32 1
    %23 = sub i32 %21, %22
    st i32* %loop_count, %23
    br %loop_body
}

entity @lzc_tb () -> () {
    %0 = const i16 0
    %in_i = sig i16 %0
    %1 = const i4 0
    %cnt_o = sig i4 %1
    %2 = const i1 0
    %empty_o = sig i1 %2
    %3 = const i1 0
    %clk_i = sig i1 %3
    %4 = const i1 1
    %rst_ni = sig i1 %4
    %in_i1 = prb i16$ %in_i
    %5 = const i16 0
    %6 = sig i16 %5
    %7 = const time 0s 1e
    drv i16$ %6, %in_i1, %7
    inst @lzc.param1 (i16$ %6) -> (i4$ %cnt_o, i1$ %empty_o)
    %clk_i1 = prb i1$ %clk_i
    %8 = const i1 0
    %9 = sig i1 %8
    %10 = const time 0s 1e
    drv i1$ %9, %clk_i1, %10
    %rst_ni1 = prb i1$ %rst_ni
    %11 = const i1 0
    %12 = sig i1 %11
    %13 = const time 0s 1e
    drv i1$ %12, %rst_ni1, %13
    %14 = const i1 1
    %15 = const i1 0
    %16 = sig i1 %15
    %17 = const time 0s 1e
    drv i1$ %16, %14, %17
    inst @lfsr_16bit.param37 (i1$ %9, i1$ %12, i1$ %16) -> (i16$ %in_i)
    inst %lzc_tb.initial.238.0 () -> (i1$ %clk_i, i1$ %rst_ni)
}
