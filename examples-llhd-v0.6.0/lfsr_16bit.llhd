proc %lfsr_16bit.param1.always_comb.251.1 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d) {
0:
    br %body
body:
    %1 = const i1 0
    %shift_in = var i1 %1
    %shift_q1 = prb i16$ %shift_q
    %2 = const i32 15
    %3 = const i16 0
    %4 = shr i16 %shift_q1, i16 %3, i32 %2
    %5 = exts i1, i16 %4, 0, 1
    %shift_q2 = prb i16$ %shift_q
    %6 = const i32 12
    %7 = const i16 0
    %8 = shr i16 %shift_q2, i16 %7, i32 %6
    %9 = exts i1, i16 %8, 0, 1
    %10 = xor i1 %5, %9
    %shift_q3 = prb i16$ %shift_q
    %11 = const i32 5
    %12 = const i16 0
    %13 = shr i16 %shift_q3, i16 %12, i32 %11
    %14 = exts i1, i16 %13, 0, 1
    %15 = xor i1 %10, %14
    %shift_q4 = prb i16$ %shift_q
    %16 = const i32 1
    %17 = const i16 0
    %18 = shr i16 %shift_q4, i16 %17, i32 %16
    %19 = exts i1, i16 %18, 0, 1
    %20 = xor i1 %15, %19
    %21 = not i1 %20
    st i1* %shift_in, %21
    %shift_q5 = prb i16$ %shift_q
    %22 = const time 0s 1e
    drv i16$ %shift_d, %shift_q5, %22
    %en_i1 = prb i1$ %en_i
    br %en_i1, %if_false, %if_true
check:
    wait %body, %en_i, %shift_q
if_true:
    %23 = const i16 0
    %shift_in1 = ld i1* %shift_in
    %24 = inss i16 %23, i1 %shift_in1, 0, 1
    %shift_q6 = prb i16$ %shift_q
    %25 = const i1 0
    %26 = const i16 0
    %27 = shr i16 %shift_q6, i16 %26, i1 %25
    %28 = exts i15, i16 %27, 0, 15
    %29 = inss i16 %24, i15 %28, 1, 15
    %30 = const time 0s 1e
    drv i16$ %shift_d, %29, %30
    br %if_exit
if_false:
    br %if_exit
if_exit:
    %shift_q7 = prb i16$ %shift_q
    %31 = const time 0s 1e
    drv i16$ %out_o, %shift_q7, %31
    br %check
}

proc %lfsr_16bit.param1.always_ff.252.1 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q) {
0:
    br %init
init:
    %clk_i1 = prb i1$ %clk_i
    %rst_ni1 = prb i1$ %rst_ni
    wait %check, %clk_i, %rst_ni
check:
    %clk_i2 = prb i1$ %clk_i
    %1 = const i1 0
    %2 = eq i1 %clk_i1, %1
    %3 = neq i1 %clk_i2, %1
    %posedge = and i1 %2, %3
    %rst_ni2 = prb i1$ %rst_ni
    %4 = const i1 0
    %5 = neq i1 %rst_ni1, %4
    %6 = eq i1 %rst_ni2, %4
    %negedge = and i1 %6, %5
    %event_or = or i1 %posedge, %negedge
    br %event_or, %init, %event
event:
    %rst_ni3 = prb i1$ %rst_ni
    %7 = not i1 %rst_ni3
    br %7, %if_false, %if_true
if_true:
    %8 = const i32 1
    %9 = exts i16, i32 %8, 0, 16
    %10 = const time 0s 1d
    drv i16$ %shift_q, %9, %10
    br %if_exit
if_false:
    %shift_d1 = prb i16$ %shift_d
    %11 = const time 0s 1d
    drv i16$ %shift_q, %shift_d1, %11
    br %if_exit
if_exit:
    br %0
}

proc %lfsr_16bit.param1.initial.253.1 () -> () {
0:
    halt
}

entity @lfsr_16bit.param1 (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) -> (i16$ %out_o) {
    %0 = const i16 0
    %shift_d = sig i16 %0
    %1 = const i16 0
    %shift_q = sig i16 %1
    inst %lfsr_16bit.param1.always_comb.251.1 (i1$ %en_i, i16$ %shift_q) -> (i16$ %out_o, i16$ %shift_d)
    inst %lfsr_16bit.param1.always_ff.252.1 (i1$ %clk_i, i1$ %rst_ni, i16$ %shift_d) -> (i16$ %shift_q)
    inst %lfsr_16bit.param1.initial.253.1 () -> ()
}

proc %lfsr_16bit_tb.initial.232.0 () -> (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i) {
0:
    %1 = const i32 0
    %2 = exts i1, i32 %1, 0, 1
    %3 = const time 1ns
    drv i1$ %rst_ni, %2, %3
    %4 = const i32 1
    %5 = exts i1, i32 %4, 0, 1
    %6 = const time 2ns
    drv i1$ %rst_ni, %5, %6
    %7 = const time 4ns
    wait %8 for %7
8:
    %9 = const i32 1
    %10 = exts i1, i32 %9, 0, 1
    %11 = const time 0s 1d
    drv i1$ %en_i, %10, %11
    %12 = const i32 10000000
    %loop_count = var i32 %12
    br %loop_body
loop_body:
    %13 = ld i32* %loop_count
    %14 = const i32 0
    %15 = neq i32 %13, %14
    br %15, %loop_exit, %loop_continue
loop_exit:
    halt
loop_continue:
    %16 = const i32 1
    %17 = exts i1, i32 %16, 0, 1
    %18 = const time 1ns
    drv i1$ %clk_i, %17, %18
    %19 = const i32 0
    %20 = exts i1, i32 %19, 0, 1
    %21 = const time 2ns
    drv i1$ %clk_i, %20, %21
    %22 = const time 2ns
    wait %23 for %22
23:
    %24 = ld i32* %loop_count
    %25 = const i32 1
    %26 = sub i32 %24, %25
    st i32* %loop_count, %26
    br %loop_body
}

entity @lfsr_16bit_tb () -> () {
    %0 = const i1 0
    %clk_i = sig i1 %0
    %1 = const i1 1
    %rst_ni = sig i1 %1
    %2 = const i1 0
    %en_i = sig i1 %2
    %3 = const i16 0
    %out_o = sig i16 %3
    %clk_i1 = prb i1$ %clk_i
    %4 = const i1 0
    %5 = sig i1 %4
    %6 = const time 0s 1e
    drv i1$ %5, %clk_i1, %6
    %rst_ni1 = prb i1$ %rst_ni
    %7 = const i1 0
    %8 = sig i1 %7
    %9 = const time 0s 1e
    drv i1$ %8, %rst_ni1, %9
    %en_i1 = prb i1$ %en_i
    %10 = const i1 0
    %11 = sig i1 %10
    %12 = const time 0s 1e
    drv i1$ %11, %en_i1, %12
    inst @lfsr_16bit.param1 (i1$ %5, i1$ %8, i1$ %11) -> (i16$ %out_o)
    inst %lfsr_16bit_tb.initial.232.0 () -> (i1$ %clk_i, i1$ %rst_ni, i1$ %en_i)
}
